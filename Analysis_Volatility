Private session As blpapicomLib.sessionSub m_analyse(sVResult As String, sScatterPlot As String, sBoxPlot As String)'these names are the names of the sheets used to display the results'How it works:''It uses the User's input parameters and run the volatility analysis.'This analysis has 4 parts: Implied Volatility, Implied VS Realised, Term Structure, and Smile'For each part, the macro creates:'- a summary table displayed on "Sheet1"'- a percentile table displayed on "Sheet1"'- a scatter plot displayed on "Vol_Scatter_plots"'- a box plot displayed on "Vol_Box_Plots"'Formating:''Each table is sorted with respect to the user specification.Sh_InputVol.CalculateActiveWorkbook.RefreshAllDoEvents'All the user parametersDim nb_vol As Integer: nb_vol = Sh_InputVol.Range("nb_vol")Dim nb_IR As Integer: nb_IR = Sh_InputVol.Range("nb_IR")Dim nb_TS As Integer: nb_TS = Sh_InputVol.Range("nb_TS")Dim nb_SK As Integer: nb_SK = Sh_InputVol.Range("nb_SK")'create the color scale for pptSheets("3. Volatilities").ActivateDim end_date As Date: end_date = CDate(Sh_InputVol.Range("m_date"))Dim start_date As DateDim m_date As Date: m_date = Sh_InputVol.Range("m_date")Dim normalized As Boolean'All the graph formatingDim iMarkerSize As IntegerDim dGap As IntegerDim iLabelSize As IntegerDim iAxesTitleSize As IntegerDim dLineWeight As DoubleDim iHeightBox_Plot As IntegerDim iWidthBox_Plot As IntegerDim iHeightScatter_Plot As IntegerDim iWidthScatter_Plot As IntegerdGap = 500dLineWeight = 0.75iMarkerSize = 4iLabelSize = 6iAxesTitleSize = 7iHeightBox_Plot = 200iWidthBox_Plot = 380iHeightScatter_Plot = 200iWidthScatter_Plot = 380'All the variables for calculusDim fld As StringDim maturity_RVIV As StringDim iTop, iTop_BP As IntegerDim realized_vol_maturity As IntegerDim percentile_up As DoubleDim percentile_down As DoubleDim moneyness As StringDim moneyness1 As StringDim moneyness2 As StringDim small_tick As StringDim iOffset As IntegerDim dss As Stringpercentile_up = Sheets("3. Volatilities").Range("percentile_up").Valuepercentile_down = Sheets("3. Volatilities").Range("percentile_down").ValueDim strOpenPwd As String: strOpenPwd = ";pwd=123456"Dim opt_db As DatabaseSet opt_db = OpenDatabase(Sh_InputVol.Range("VolReportDB"), _                            Options:=True, _                            ReadOnly:=False, _                            Connect:=strOpenPwd)                            Dim nb_names As IntegerIf Sheets("3. Volatilities").Range("B4") <> "" Then    nb_names = Range("Underlyings", Range("Underlyings").End(xlDown)).CountElse    nb_names = 1End If'If nb_vol > nb_names Then    nb_vol = nb_names    Sh_InputVol.Range("I4") = nb_vol'End If'If nb_IR > nb_names Then    nb_IR = nb_names    Sh_InputVol.Range("I5") = nb_IR'End If'If nb_TS > nb_names Then    nb_TS = nb_names    Sh_InputVol.Range("I6") = nb_TS'End If'If nb_SK > nb_names Then    nb_SK = nb_names    Sh_InputVol.Range("I7") = nb_SK'End IfSheets("Color Scales").ActivateSheets("Color Scales").Range("A1").Resize(1000, 100).ClearFor i = 1 To nb_vol    Sheets("Color Scales").Range("B1").Offset(i, 0).Value = iNext iSheets("Color Scales").Range("B2").Resize(nb_vol, 1).SelectSelection.FormatConditions.AddColorScale ColorScaleType:=3Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPrioritySelection.FormatConditions(1).ColorScaleCriteria(1).Type = _    xlConditionValueLowestValueWith Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor    .Color = 8109667    .TintAndShade = 0End WithSelection.FormatConditions(1).ColorScaleCriteria(2).Type = _    xlConditionValuePercentileSelection.FormatConditions(1).ColorScaleCriteria(2).Value = 50With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor    .Color = 8711167    .TintAndShade = 0End WithSelection.FormatConditions(1).ColorScaleCriteria(3).Type = _    xlConditionValueHighestValueWith Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor    .Color = 7039480    .TintAndShade = 0End WithWith Selection    .NumberFormat = ";;;"End WithFor i = 1 To nb_vol    Sheets("Color Scales").Range("C1").Offset(1, i).Value = iNext iSheets("Color Scales").Range("D2").Resize(1, nb_vol).SelectSelection.FormatConditions.AddColorScale ColorScaleType:=3Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPrioritySelection.FormatConditions(1).ColorScaleCriteria(1).Type = _    xlConditionValueLowestValueWith Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor    .Color = 8109667    .TintAndShade = 0End WithSelection.FormatConditions(1).ColorScaleCriteria(2).Type = _    xlConditionValuePercentileSelection.FormatConditions(1).ColorScaleCriteria(2).Value = 50With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor    .Color = 8711167    .TintAndShade = 0End WithSelection.FormatConditions(1).ColorScaleCriteria(3).Type = _    xlConditionValueHighestValueWith Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor    .Color = 7039480    .TintAndShade = 0End WithWith Selection    .NumberFormat = ";;;"End With'""" define result tables """Sheets("3. Volatilities").Activatemoneyness1 = CStr(Replace(Range("moneyness1"), "%", "") * 100)moneyness2 = CStr(Replace(Range("moneyness2"), "%", "") * 100)Dim vResult_PercentilesT() As VariantDim global_results() As VariantReDim global_results(nb_names - 1, 23)Dim percentile_result() As VariantReDim percentile_result(nb_names - 1, 28)Dim pct_rank_result() As VariantReDim pct_rank_result(nb_names - 1, 2)Dim rg As Range'''' PART I Implied  Analysis ''''Dim vResult() As VariantDim vResult_Percentiles() As VariantReDim vResult(1 To nb_vol + 1, 1 To 6) As VariantReDim vResult_Percentiles(1 To 9, 1 To nb_vol + 1) As Variant'clear contents of sheet vol resultSheets(sVResult).Range("A1").Resize(1000, 200).ClearWith Sheets(sVResult)    .Cells.Font.name = "Verdana"    .Cells.Interior.ColorIndex = 2    .Cells.RowHeight = 16    Dim line As Integer: line = 1    .Cells(line, 1).Value = "US DAILY VOLATILITY OVERVIEW - " & CStr(Format(m_date, "mmmm dd, yyyy"))    .Cells(line, 1).Font.Bold = True    .Cells(line, 1).Font.Size = 16    .Cells(line, 1).RowHeight = 20End WithWith Sheets(sVResult).Range("A1").Resize(1, 8)    .HorizontalAlignment = xlCenter    .MergeCells = TrueEnd WithWith Sheets(sVResult).Columns .ColumnWidth = 9 .Font.Size = 7End WithWith Sheets(sVResult).Columns("B") .ColumnWidth = 10End WithWith Sheets(sVResult).Columns("C") .ColumnWidth = 20End WithWith Sheets(sVResult).Columns("n") .ColumnWidth = 15End WithFor Each col In Worksheets(sVResult).Columns    If col.column = 14 + 2 * (nb_vol + 1) + 6 + 7 Then        col.ColumnWidth = 10    End If    If col.column = 14 + 2 * (nb_vol + 1) + 6 + 7 + 1 Then        col.ColumnWidth = 20    End IfNext col'get parametersDim maturity As StringDim maturity1 As StringDim maturity2 As Stringmoneyness1 = CStr(Replace(Range("moneyness_IV").Value, "%", "") * 100)maturity = CStr(Range("maturity_IV").Value)percentile_days = Range("percentile_IV").Valuestart_date = CDate(Sh_InputVol.Range("m_date").Value - percentile_days)    vResult(1, 1) = "Ticker"vResult(1, 2) = "Name"'vResult(1, 3) = "Daily Chg"vResult(1, 3) = maturity & " IVol"vResult(1, 4) = "5D Chg"vResult(1, 5) = "MTD Chg"vResult(1, 6) = "Curr. Perc."vResult_Percentiles(1, 1) = "Ticker"vResult_Percentiles(2, 1) = "5% Percentile"vResult_Percentiles(3, 1) = "25% Percentile"vResult_Percentiles(4, 1) = "Median"vResult_Percentiles(5, 1) = "75% Percentile"vResult_Percentiles(6, 1) = "95% Percentile"vResult_Percentiles(7, 1) = "Current Value"vResult_Percentiles(8, 1) = "Last Week"vResult_Percentiles(9, 1) = "Current Percentile"iOffset = 0i = 2For Each cell In Range("Underlyings", Range("Underlyings").End(xlDown))    ' get ticker name    small_tick = CStr(cell)    vResult(i, 2) = cell.Offset(0, 1) 'ticker name    If Len(small_tick) > 7 Then        If Right(small_tick, 7) = " Equity" Then            vResult(i, 1) = left(small_tick, Len(small_tick) - 7)        Else            vResult(i, 1) = small_tick        End If    Else        vResult(i, 1) = small_tick    End If        vResult_Percentiles(1, i) = vResult(i, 1)        '''' Implied volatility analysis''''    If nb_vol = 0 Then        Exit For    End If        Dim histo_6M() As Variant        fld = maturity & "_" & moneyness1        histo_6M = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    debut = 0    If UBound(histo_6M) > 0 Then        '''' 6M vol changes over 1D        'vResult(i, 3) = Round(changes(histo_6M(), nb_days_before(histo_6M(), end_date, 1, dss), end_date, "level", dss), 2)                '''' last 6M vol        vResult(i, 3) = Round(date_data(histo_6M(), end_date, 1), 2)                '''' 6M vol changes over 5D        vResult(i, 4) = Round(changes(histo_6M(), nb_days_before(histo_6M(), end_date, 5, dss), end_date, "level", dss), 2)                '''' 6M vol changes MTD        vResult(i, 5) = Round(changes(histo_6M, first_date_month(histo_6M(), end_date, dss), end_date, "level", dss), 2)                '''' 6M vol percentrank(last) over one year        vResult(i, 6) = Round(percent_rank(histo_6M(), start_date, end_date, dss), 2)                    '''' Add percentile up and down ''''        vResult_Percentiles(2, i) = Round(percentile_value(histo_6M(), start_date, end_date, 0.05), 2) 'min        vResult_Percentiles(3, i) = Round(percentile_value(histo_6M(), start_date, end_date, 0.25), 2) ' 1st quartile        vResult_Percentiles(4, i) = Round(percentile_value(histo_6M(), start_date, end_date, 0.5), 2) 'median        vResult_Percentiles(5, i) = Round(percentile_value(histo_6M(), start_date, end_date, 0.75), 2) '2nd quartile        vResult_Percentiles(6, i) = Round(percentile_value(histo_6M(), start_date, end_date, 0.95), 2) '95% percentile        vResult_Percentiles(7, i) = Round(histo_6M(UBound(histo_6M), 1), 2) ' spot        vResult_Percentiles(8, i) = Round(histo_6M(UBound(histo_6M) - 5, 1), 2) 'last week        vResult_Percentiles(9, i) = Round(vResult(i, 6) * 100, 0)        Else        MsgBox "Error: No data for the following ticker: " & small_tick        GoTo 1    End If    i = i + 1Next' ***** write implied volatility resultsCall Write_IV_Results(sVResult, iOffset, maturity, moneyness1, vResult, vResult_Percentiles, vResult_PercentilesT) ' ***************** CREATE THE CHARTS *****************Dim vBoxPlotArray() As DoubleReDim vBoxPlotArray(nb_vol - 1) As DoubleDim range_min As RangeSet range_min = Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(1, UBound(vResult_Percentiles, 2) - 1)Dim range_max As RangeSet range_max = Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 3).Resize(1, UBound(vResult_Percentiles, 2) - 1)Dim range_tickers As RangeSet range_tickers = Sheets(sVResult).Range("N6").Offset(iOffset, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1)Dim vBoxPlotArray_spot() As DoubleReDim vBoxPlotArray_spot(nb_vol - 1) As DoubleFor i = 0 To nb_vol - 1    vBoxPlotArray_spot(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).ValueNext iDim vBoxPlotArray_lastweek() As DoubleReDim vBoxPlotArray_lastweek(nb_vol - 1) As DoubleFor i = 0 To nb_vol - 1    vBoxPlotArray_lastweek(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).ValueNext iDim vBoxPlotArray_median() As DoubleReDim vBoxPlotArray_median(nb_vol - 1) As DoubleFor i = 0 To nb_vol - 1    vBoxPlotArray_median(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).ValueNext i 'Delete existing chartsFor Each chObj In Sheets(sBoxPlot).ChartObjects    chObj.DeleteNext chObjDim minValue As DoubleDim maxValue As DoublemaxValue = -100minValue = 100Call min_maxValue(sVResult, iOffset, nb_vol, minValue, maxValue)    Dim Array_names() As StringReDim Array_names(1 To nb_names) As StringFor i = 1 To nb_names    Array_names(i) = Sheets(sVResult).Range("N6").Offset(iOffset, i).ValueNext i' *********Add the Implied VS Realized Chart **********'chart creationSet chtChart = Sheets(sBoxPlot).ChartObjects.Add( _        left:=Sheets(sBoxPlot).Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets(sBoxPlot).Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=iHeightBox_Plot).Chart            With chtChart        .ChartType = xlColumnStacked        .Parent.name = "Implied_BoxPlot"    End WithDim sName As String'add points and formattingWith chtChart        iTop_BP = .Parent.top'    .HasTitle = True    .HasLegend = False'    .ChartTitle.Text = maturity & "_" & moneyness1 & "% Implied Volatility Box Plot"    .Axes(xlValue, xlPrimary).MajorGridlines.Delete    .Axes(xlCategory, xlPrimary).MajorGridlines.Delete    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop        ' Add each series    For iSrsIX = 0 To 2                If iSrsIX = 0 Then ' Q25%                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value                    sName = "5% Percentile"                Next i            End If                            If iSrsIX = 1 Then  ' Box1: median -Q25                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value)                    sName = "Box1"                Next i            End If                        If iSrsIX = 2 Then ' Box2: Q75 -median                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 4, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value)                    sName = "Box2"                Next i            End If                        Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = sName                .values = vBoxPlotArray()                If iSrsIX = 0 Then                    .Interior.ColorIndex = xlNone                    .HasErrorBars = True'                    .ErrorBar.MinusValues = vBoxPlotArray_min()'                    .ErrorBar.Amount = vBoxPlotArray_min()                    .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                    Type:=xlCustom, Amount:=range_min, MinusValues:= _                    range_min                    .ErrorBars.Format.line.Weight = dLineWeight                                                        End If                If iSrsIX = 1 Then                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                       End If                If iSrsIX = 2 Then                           .HasErrorBars = True'                    .ErrorBar.MinusValues = vBoxPlotArray_min()'                    .ErrorBar.Amount = vBoxPlotArray_min()                    .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                    Type:=xlCustom, Amount:=range_max, MinusValues:= _                    range_max                    .ErrorBars.Format.line.Weight = dLineWeight                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                                    End If            End With                        Next   '.Axes(xlCategory, xlPrimary).CategoryNames = range_tickers   .Axes(xlCategory, xlPrimary).CategoryNames = Array_names   .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0%"   .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize   .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).MaximumScale = maxValue    .Axes(xlValue, xlPrimary).MinimumScale = minValue    .Axes(xlValue).CrossesAt = minValue                .ChartGroups(1).GapWidth = dGap      'add the spot    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Current Value"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_spot()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDiamond        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End With    'add the spot last week    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Last Week"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_lastweek()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDash        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End WithEnd With'implied volatility results FormatingCall Formating_IV(sVResult, iOffset, vResult, vResult_Percentiles)'*******************VOLATILITY SPREAD************************************************************iOffset = WorksheetFunction.Max(nb_vol, 8) + iOffset + 4'get parametersmoneyness = CStr(Replace(Range("moneyness_RV").Value, "%", "") * 100)maturity_RVIV = CStr(Range("maturity_RVIV").Value)fld = maturity_RVIV & "_" & moneynesspercentile_days = Range("percentile_RV").Valuerealized_vol_maturity = Range("maturity_RV").Valuestart_date = CDate(Sh_InputVol.Range("m_date").Value - realized_vol_maturity)ReDim vResult(1 To nb_vol + 1, 1 To 6) As VariantDim vResults_Bis() As VariantReDim vResult_Bis(1 To nb_vol + 1, 1 To 3) As VariantvResult(1, 1) = "Ticker"vResult(1, 2) = "Name"'vResult(1, 3) = "Implied"vResult(1, 3) = "Realized"'vResult(1, 5) = "Impd/Real"vResult(1, 4) = "5D Chg"vResult(1, 5) = "MTD Chg"vResult_Bis(1, 1) = "Ticker"vResult_Bis(1, 2) = "Impd/Real"vResult_Bis(1, 3) = "Curr. Perc."If percentile_days = 365 Then    vResult(1, 6) = "1Y %Rk"Else    vResult(1, 6) = percentile_days & " %Rk"End IfvResult(1, 6) = "Curr. Perc."i = 2For Each cell In Range("Underlyings", Range("Underlyings").End(xlDown))    If nb_IR = 0 Then        Exit For    End If        ' get ticker name    small_tick = CStr(cell)    vResult(i, 2) = cell.Offset(0, 1) 'ticker name    If Len(small_tick) > 7 Then        If Right(small_tick, 7) = " Equity" Then            vResult(i, 1) = left(small_tick, Len(small_tick) - 7)        Else            vResult(i, 1) = small_tick        End If    Else        vResult(i, 1) = small_tick    End If        vResult_Percentiles(1, i) = vResult(i, 1)    vResult_Bis(i, 1) = vResult(i, 1)        Dim histo_prices() As Variant    histo_prices = get_histo_datas(small_tick, "PX_LAST", #1/1/2009#, end_date, opt_db, dss)    debut = debut + 1    If UBound(histo_prices) > 0 Then        Dim m_returns() As Variant        m_returns = returns(histo_prices)        Dim histo_real() As Variant        If (UBound(m_returns) > realized_vol_maturity) Then            histo_real = real_vol(m_returns, realized_vol_maturity)                       Dim histo_impl() As Variant            histo_impl = get_histo_datas(small_tick, fld, #1/1/2009#, end_date, opt_db, dss)            If UBound(histo_real) > 0 And UBound(histo_impl) > 0 Then                Dim spread_IR() As Variant                spread_IR = term_structure_ratio_and_spread(histo_real, histo_impl)  'impl_real_spread(histo_real, histo_impl)                For t = 0 To UBound(spread_IR, 1)                    spread_IR(t, 1) = spread_IR(t, 1) / 100                Next t                '''' last implied vol                'vResult(i, 3) = date_data(histo_impl(), end_date, 1)                vResult_Bis(i, 2) = date_data(spread_IR(), end_date, 1)                '''' last realized vol                vResult(i, 3) = date_data(histo_real(), end_date, 1) * 100                '''' Imp-Real spread                'vResult(i, 5) = date_data(spread_IR(), end_date, 1)                '''' Real spread 5D move                vResult(i, 4) = changes(histo_real(), nb_days_before(spread_IR(), end_date, 5, dss), end_date, "level", dss)                ''''Real spread MTD move                vResult(i, 5) = changes(histo_real(), first_date_month(spread_IR(), end_date, dss), end_date, "level", dss)                '''' Imp-Real spread percentrank(last) over one year                'vResult(i, 8) = percent_rank(spread_IR(), start_date, end_date, dss)                start_date = CDate(Sh_InputVol.Range("m_date").Value - percentile_days)                vResult(i, 6) = percent_rank(histo_real(), start_date, end_date, dss)                vResult_Bis(i, 3) = percent_rank(spread_IR(), start_date, end_date, dss)                                                                '''' Add percentile up and down ''''                vResult_Percentiles(2, i) = percentile_value(histo_real(), start_date, end_date, 0.05) '5%                vResult_Percentiles(3, i) = percentile_value(histo_real(), start_date, end_date, 0.25) '1Q                vResult_Percentiles(4, i) = percentile_value(histo_real(), start_date, end_date, 0.5) ' median                vResult_Percentiles(5, i) = percentile_value(histo_real(), start_date, end_date, 0.75) ' 3Q                vResult_Percentiles(6, i) = percentile_value(histo_real(), start_date, end_date, 0.95)  ' 95%                vResult_Percentiles(7, i) = histo_real(UBound(histo_real), 1)  'spot                vResult_Percentiles(8, i) = histo_real(UBound(histo_real) - 5, 1) 'last week                vResult_Percentiles(9, i) = Round(percent_rank(histo_real(), start_date, end_date, dss) * 100, 0)                            End If        End If    Else        MsgBox "Error: No data for the following ticker: " & small_tick        GoTo 1    End If    i = i + 1Next' ***** write implied volatility vs realized volatility resultsDim realized_vol_mat As Stringrealized_vol_mat = realized_vol_maturity & "D"Call Write_IVR_Results(sVResult, iOffset, maturity_RVIV, realized_vol_mat, moneyness, vResult, vResult_Percentiles, vResult_PercentilesT, vResult_Bis)' ***************** CREATE THE CHARTS *****************    Set range_min = Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(1, UBound(vResult_Percentiles, 2) - 1)Set range_max = Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 3).Resize(1, UBound(vResult_Percentiles, 2) - 1)Set range_tickers = Sheets(sVResult).Range("N6").Offset(iOffset, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1)ReDim vBoxPlotArray_spot(nb_vol - 1) As DoubleFor i = 0 To nb_vol - 1    vBoxPlotArray_spot(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).ValueNext iFor i = 0 To nb_vol - 1    vBoxPlotArray_lastweek(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).ValueNext iFor i = 0 To nb_vol - 1    vBoxPlotArray_median(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).ValueNext i  maxValue = -100minValue = 100Call min_maxValue(sVResult, iOffset, nb_vol, minValue, maxValue)   ' *********Add the Implied VS Realized Chart **********'chart creationiTop_BP = iTop_BP * 3.5Set chtChart = Sheets(sBoxPlot).ChartObjects.Add( _        left:=Sheets(sBoxPlot).Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=iTop_BP, _        Height:=iHeightBox_Plot).Chart    With chtChart        .ChartType = xlColumnStacked        .Parent.name = "Volatility_Spread_BoxPlot"    End WithFor i = 1 To nb_names    Array_names(i) = Sheets(sVResult).Range("N6").Offset(iOffset, i).ValueNext i'add points and formattingWith chtChart    .HasTitle = True    .HasLegend = False    .ChartTitle.Text = Sheets(sVResult).Range("N4").Offset(iOffset, 0).Value & " Box Plot"    .Axes(xlValue, xlPrimary).MajorGridlines.Delete    .Axes(xlCategory, xlPrimary).MajorGridlines.Delete    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    ' Add each series    For iSrsIX = 0 To 2                If iSrsIX = 0 Then ' Q25%                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value                    sName = "5% Percentile"                Next i            End If                            If iSrsIX = 1 Then  ' Box1: median -Q25                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value)                    sName = "Box1"                Next i            End If                        If iSrsIX = 2 Then ' Box2: Q75 -median                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 4, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value)                    sName = "Box2"                Next i            End If                        Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = sName                .values = vBoxPlotArray()                If iSrsIX = 0 Then                    .Interior.ColorIndex = xlNone                    .HasErrorBars = True'                    .ErrorBar.MinusValues = vBoxPlotArray_min()'                    .ErrorBar.Amount = vBoxPlotArray_min()                    .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                    Type:=xlCustom, Amount:=range_min, MinusValues:= _                    range_min                    .ErrorBars.Format.line.Weight = dLineWeight                End If                If iSrsIX = 1 Then                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If                If iSrsIX = 2 Then                           .HasErrorBars = True'                    .ErrorBar.MinusValues = vBoxPlotArray_min()'                    .ErrorBar.Amount = vBoxPlotArray_min()                    .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                    Type:=xlCustom, Amount:=range_max, MinusValues:= _                    range_max                    .ErrorBars.Format.line.Weight = dLineWeight                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If            End With                Next   '.Axes(xlCategory, xlPrimary).CategoryNames = range_tickers   .Axes(xlCategory, xlPrimary).CategoryNames = Array_names   .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00%"   .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize      .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize    .Axes(xlValue).CrossesAt = minValue    .Axes(xlValue, xlPrimary).MaximumScale = maxValue    .Axes(xlValue, xlPrimary).MinimumScale = minValue        .ChartGroups(1).GapWidth = dGap   'add the spot    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Current Value"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_spot()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDiamond        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End With    'add the spot last week    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Last Week"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_lastweek()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDash        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End WithEnd With'Delete existing chartsi = Sheets(sScatterPlot).ChartObjects.CountFor Each chObj In Sheets(sScatterPlot).ChartObjects    chObj.DeleteNext chObjmax_implied = -100For i = 1 To UBound(vResult, 1) - 1    If Sheets(sVResult).Range("g6").Offset(i, 0).Value > max_implied Then        max_implied = Sheets(sVResult).Range("g6").Offset(i, 0).Value    End IfNext imax_realized = -100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 6) > max_realized Then        max_realized = vResult(i + 1, 6)    End IfNext imin_implied = 100For i = 1 To UBound(vResult, 1) - 1    If Sheets(sVResult).Range("g6").Offset(i, 0).Value < min_implied Then        min_implied = Sheets(sVResult).Range("g6").Offset(i, 0).Value    End IfNext imin_realized = 100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 6) < min_realized Then        min_realized = vResult(i + 1, 6)    End IfNext imin_v = Application.Min(min_realized, min_implied)min_realized = min_vmin_implied = min_v' *********Add the Implied VS Realized Chart **********'chart creationDim iLeft As DoubleDim iWidth As DoubleSet chtChart = Sheets(sScatterPlot).ChartObjects.Add( _        left:=Sheets(sScatterPlot).Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthScatter_Plot, _        top:=Sheets(sScatterPlot).Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=iHeightScatter_Plot).Chart    With chtChart        .ChartType = xlXYScatterLines        .Parent.name = "Volatility_Spread_ScatterPlot"    End With    'add points and formattingWith chtChart    iTop = .Parent.top    iLeft = .Parent.left    iWidth = .Parent.width    .HasLegend = False    .Axes(xlCategory, xlPrimary).HasTitle = True    .Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = maturity & "_" & moneyness & "% Implied Volatility Percentile"    .Axes(xlCategory, xlPrimary).AxisTitle.Font.Bold = True    .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlCategory, xlPrimary).AxisTitle.Font.Size = iAxesTitleSize    .Axes(xlCategory, xlPrimary).MinimumScale = WorksheetFunction.Max(min_implied * 0.9, 0)    .Axes(xlCategory, xlPrimary).MaximumScale = max_implied * 1.1    .Axes(xlCategory, xlPrimary).TickLabels.NumberFormat = "0%"        .Axes(xlValue, xlPrimary).HasTitle = True    .Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = realized_vol_mat & " Realized Volatility Percentile"    .Axes(xlValue, xlPrimary).AxisTitle.Font.Bold = True    .Axes(xlValue, xlPrimary).AxisTitle.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).MinimumScale = WorksheetFunction.Max(min_realized * 0.9)    .Axes(xlValue, xlPrimary).MaximumScale = max_realized * 1.1    .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0%"    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    For iSrsIX = 0 To UBound(vResult, 1) - 2            '' Add each series            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = vResult(iSrsIX + 2, 1)                .values = vResult(iSrsIX + 2, 6) 'Realized                .XValues = Application.VLookup(vResult(iSrsIX + 2, 1), Sheets(sVResult).Range("B7").Resize(UBound(vResult, 1) - 1, 7).Value, 6, False) 'Implied                .MarkerStyle = xlMarkerStyleSquare                .MarkerForegroundColorIndex = 29                .MarkerBackgroundColorIndex = 29                .Smooth = False                .MarkerSize = iMarkerSize - 2                .Shadow = False                                                            End With            .SeriesCollection(iSrsIX + 1).HasDataLabels = True            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Text = vResult(iSrsIX + 2, 1)            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Font.Size = iLabelSize            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Font.Bold = True            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Position = xlLabelPositionBelow                Next    'add a straight line y=x    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .ChartType = xlXYScatterLinesNoMarkers        .XValues = Array(1, 0)        .values = Array(1, 0)        .Format.line.ForeColor.RGB = RGB(128, 128, 128)    End With    End With'create the second graphmax_implied = -100For i = 1 To UBound(vResult, 1) - 1    If Sheets(sVResult).Range("d6").Offset(i, 0).Value / 100 > max_implied Then        max_implied = Sheets(sVResult).Range("d6").Offset(i, 0).Value / 100    End IfNext imax_realized = -100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 3) / 100 > max_realized Then        max_realized = vResult(i + 1, 3) / 100    End IfNext imin_implied = 100For i = 1 To UBound(vResult, 1) - 1    If Sheets(sVResult).Range("d6").Offset(i, 0).Value / 100 < min_implied Then        min_implied = Sheets(sVResult).Range("d6").Offset(i, 0).Value / 100    End IfNext imin_realized = 100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 3) / 100 < min_realized Then        min_realized = vResult(i + 1, 3) / 100    End IfNext imin_v = Application.Min(min_realized, min_implied)min_realized = min_vmin_implied = min_v' *********Add the Implied VS Realized Chart **********'chart creationSet chtChart = Sheets(sScatterPlot).ChartObjects.Add( _        left:=Sheets(sScatterPlot).Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthScatter_Plot, _        top:=Sheets(sScatterPlot).Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=iHeightScatter_Plot).Chart    With chtChart        .ChartType = xlXYScatterLines        .Parent.name = "Volatility_Spread_ScatterPlot_Value"    End With    'add points and formattingWith chtChart    iTop = .Parent.top    .Parent.left = iLeft + iWidth    .HasLegend = False    .Axes(xlCategory, xlPrimary).HasTitle = True    .Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = maturity & "_" & moneyness & "% Implied Volatility"    .Axes(xlCategory, xlPrimary).AxisTitle.Font.Bold = True    .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlCategory, xlPrimary).AxisTitle.Font.Size = iAxesTitleSize    .Axes(xlCategory, xlPrimary).MinimumScale = WorksheetFunction.Max(min_implied * 0.9, 0)    .Axes(xlCategory, xlPrimary).MaximumScale = max_implied * 1.1    .Axes(xlCategory, xlPrimary).TickLabels.NumberFormat = "0%"        .Axes(xlValue, xlPrimary).HasTitle = True    .Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = realized_vol_mat & " Realized Volatility"    .Axes(xlValue, xlPrimary).AxisTitle.Font.Bold = True    .Axes(xlValue, xlPrimary).AxisTitle.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).MinimumScale = WorksheetFunction.Max(min_realized * 0.9)    .Axes(xlValue, xlPrimary).MaximumScale = max_realized * 1.1    .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0%"    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    For iSrsIX = 0 To UBound(vResult, 1) - 2            '' Add each series            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = vResult(iSrsIX + 2, 1)                .values = vResult(iSrsIX + 2, 3) / 100 'Realized                .XValues = Application.VLookup(vResult(iSrsIX + 2, 1), Sheets(sVResult).Range("B7").Resize(UBound(vResult, 1) - 1, 7).Value, 3, False) / 100 'Implied value                .MarkerStyle = xlMarkerStyleSquare                .MarkerForegroundColorIndex = 29                .MarkerBackgroundColorIndex = 29                .Smooth = False                .MarkerSize = iMarkerSize - 2                .Shadow = False                                                            End With            .SeriesCollection(iSrsIX + 1).HasDataLabels = True            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Text = vResult(iSrsIX + 2, 1)            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Font.Size = iLabelSize            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Font.Bold = True            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Position = xlLabelPositionBelow                Next    'add a straight line y=x    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .ChartType = xlXYScatterLinesNoMarkers        .XValues = Array(1, 0)        .values = Array(1, 0)        .Format.line.ForeColor.RGB = RGB(128, 128, 128)    End With    End With'FormatCall Formating_IVR(sVResult, iOffset, vResult, vResult_Percentiles, vResult_Bis)iOffset = WorksheetFunction.Max(nb_vol, 8) + iOffset + 4'    '''' Term Structure Analysis '''''get parametersmoneyness = CStr(Replace(Range("term_structure_moneyness").Value, "%", "") * 100)maturity1 = CStr(Range("term_structure_mat_1").Value)fld = maturity1 & "_" & moneynessmaturity2 = CStr(Range("term_structure_mat_2").Value)fld = maturity1 & "_" & moneynesspercentile_days = Range("term_structure_percentile").Valuestart_date = CDate(Sh_InputVol.Range("m_date").Value - percentile_days)ReDim vResult(1 To nb_vol + 1, 1 To 9) As VariantvResult(1, 1) = "Ticker"vResult(1, 2) = "Name"vResult(1, 3) = "Current " & maturity1vResult(1, 4) = "Current " & maturity2vResult(1, 5) = maturity2 & " / " & maturity1vResult(1, 6) = "Daily Chg"vResult(1, 7) = "5D Chg"vResult(1, 8) = "MTD Chg"If percentile_days = 365 Then    vResult(1, 9) = "1Y %Rk"Else    vResult(1, 9) = percentile_days & " %Rk"End IfvResult(1, 9) = "Curr. Perc."i = 2For Each cell In Range("Underlyings", Range("Underlyings").End(xlDown))    If nb_TS = 0 Then        Exit For    End If        ' get ticker name    small_tick = CStr(cell)    vResult(i, 2) = cell.Offset(0, 1) 'ticker name    If Len(small_tick) > 7 Then        If Right(small_tick, 7) = " Equity" Then            vResult(i, 1) = left(small_tick, Len(small_tick) - 7)        Else            vResult(i, 1) = small_tick        End If    Else        vResult(i, 1) = small_tick    End If    vResult_Percentiles(1, i) = vResult(i, 1)    '''' SHORT TERM    Dim histo_threem() As Variant    fld = maturity1 & "_" & moneyness    histo_threem = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    '''' Long term    Dim histo_oney() As Variant    fld = maturity2 & "_" & moneyness    histo_oney = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    If UBound(histo_threem) > 0 And UBound(histo_oney) > 0 Then        Dim term_st_rs() As Variant        term_st_rs = term_structure_ratio_and_spread(histo_threem, histo_oney)        vResult(i, 3) = histo_threem(UBound(histo_threem, 1), 1)                vResult(i, 4) = histo_oney(UBound(histo_oney, 1), 1)        vResult(i, 5) = vResult(i, 4) / vResult(i, 3)                vResult(i, 6) = vResult(i, 5) - histo_threem(UBound(histo_threem, 1) - 1, 1) + histo_oney(UBound(histo_oney, 1) - 1, 1)                vResult(i, 7) = changes(term_st_rs(), nb_days_before(term_st_rs(), end_date, 5, dss), end_date, "level", dss)        vResult(i, 8) = changes(term_st_rs(), first_date_month(term_st_rs(), end_date, dss), end_date, "level", dss)                start_date = CDate(Sh_InputVol.Range("m_date").Value - percentile_days)        vResult(i, 9) = percent_rank(term_st_rs(), start_date, end_date, dss)        '''' Add percentile up and down ''''        vResult_Percentiles(2, i) = percentile_value(term_st_rs(), start_date, end_date, 0.05) '5%        vResult_Percentiles(3, i) = percentile_value(term_st_rs(), start_date, end_date, 0.25) '1Q        vResult_Percentiles(4, i) = percentile_value(term_st_rs(), start_date, end_date, 0.5) ' median        vResult_Percentiles(5, i) = percentile_value(term_st_rs(), start_date, end_date, 0.75) ' 3Q        vResult_Percentiles(6, i) = percentile_value(term_st_rs(), start_date, end_date, 0.95)  ' 95%        vResult_Percentiles(7, i) = term_st_rs(UBound(term_st_rs), 1)  'spot        vResult_Percentiles(8, i) = term_st_rs(UBound(term_st_rs) - 5, 1) 'last week        vResult_Percentiles(9, i) = Round(vResult(i, 9) * 100, 0)    Else        MsgBox "Error: No data for the following ticker: " & small_tick        GoTo 1    End If    i = i + 1Next            ' ***** write implied volatility resultsCall Write_TS_Results(sVResult, iOffset, maturity1, maturity2, moneyness, vResult(), vResult_Percentiles(), vResult_PercentilesT())' ***************** CREATE THE CHARTS *****************    Set range_min = Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(1, UBound(vResult_Percentiles, 2) - 1)Set range_max = Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 3).Resize(1, UBound(vResult_Percentiles, 2) - 1)Set range_tickers = Sheets(sVResult).Range("N6").Offset(iOffset, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1)ReDim vBoxPlotArray_spot(nb_vol - 1) As DoubleFor i = 0 To nb_vol - 1    vBoxPlotArray_spot(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).ValueNext iFor i = 0 To nb_vol - 1    vBoxPlotArray_lastweek(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).ValueNext iFor i = 0 To nb_vol - 1    vBoxPlotArray_median(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).ValueNext i  maxValue = -100minValue = 100Call min_maxValueTS(sVResult, iOffset, nb_vol, minValue, maxValue)   For i = 1 To nb_names    Array_names(i) = Sheets(sVResult).Range("N6").Offset(iOffset, i).ValueNext i' *********Add the Implied VS Realized Chart **********'chart creationiTop_BP = iTop_BP * 1.7Set chtChart = Sheets(sBoxPlot).ChartObjects.Add( _        left:=Sheets(sBoxPlot).Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=iTop_BP, _        Height:=iHeightBox_Plot).Chart    With chtChart        .ChartType = xlColumnStacked        .Parent.name = "Term_Structure_BoxPlot"    End With'add points and formattingWith chtChart    .HasLegend = False    .Axes(xlValue, xlPrimary).MajorGridlines.Delete    .Axes(xlCategory, xlPrimary).MajorGridlines.Delete    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    ' Add each series    For iSrsIX = 0 To 2                If iSrsIX = 0 Then ' Q25%                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value                    sName = "5% Percentile"                Next i            End If                            If iSrsIX = 1 Then  ' Box1: median -Q25                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value)                    sName = "Box1"                Next i            End If                        If iSrsIX = 2 Then ' Box2: Q75 -median                For i = 0 To nb_vol - 1                    vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 4, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value)                    sName = "Box2"                Next i            End If                        Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = sName                .values = vBoxPlotArray()                If iSrsIX = 0 Then                    .Interior.ColorIndex = xlNone                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                    Type:=xlCustom, Amount:=range_min, MinusValues:= _                    range_min                    .ErrorBars.Format.line.Weight = dLineWeight                End If                If iSrsIX = 1 Then                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If                If iSrsIX = 2 Then                           .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                    Type:=xlCustom, Amount:=range_max, MinusValues:= _                    range_max                    .ErrorBars.Format.line.Weight = dLineWeight                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If            End With                Next   .Axes(xlCategory, xlPrimary).CategoryNames = Array_names   .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00"   .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize      .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize    .Axes(xlValue).CrossesAt = minValue    .Axes(xlValue, xlPrimary).MaximumScale = maxValue    .Axes(xlValue, xlPrimary).MinimumScale = minValue        .ChartGroups(1).GapWidth = dGap   'add the spot    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Current Value"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_spot()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDiamond        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End With    'add the spot last week    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Last Week"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_lastweek()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDash        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End WithEnd WithiTop = 3.5 * iTop'chart creationSet chtChart = Sheets(sScatterPlot).ChartObjects.Add( _        left:=Sheets(sScatterPlot).Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthScatter_Plot, _        top:=iTop, _        Height:=iHeightScatter_Plot).Chart    With chtChart        .ChartType = xlXYScatterLines        .Parent.name = "Term_Structure_ScatterPlot"    End With    max_implied = -100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 3) > max_implied Then        max_implied = vResult(i + 1, 3)    End IfNext imax_realized = -100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 4) > max_realized Then        max_realized = vResult(i + 1, 4)    End IfNext imin_implied = 100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 3) < min_implied Then        min_implied = vResult(i + 1, 3)    End IfNext imin_realized = 100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 4) < min_realized Then        min_realized = vResult(i + 1, 4)    End IfNext imin_graph = Application.Min(min_realized, min_implied)    'add points and formattingWith chtChart'    .HasTitle = True    .HasLegend = False'    .ChartTitle.Text = Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value    .Axes(xlCategory, xlPrimary).HasTitle = True    .Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = maturity1 & "-" & moneyness & "% Implied Volatility"    .Axes(xlCategory, xlPrimary).AxisTitle.Font.Bold = True    .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlCategory, xlPrimary).AxisTitle.Font.Size = iAxesTitleSize    .Axes(xlCategory, xlPrimary).MinimumScale = 0.9 * min_graph / 100    .Axes(xlCategory, xlPrimary).MaximumScale = max_implied * 1.1 / 100    .Axes(xlCategory, xlPrimary).TickLabels.NumberFormat = "0.0%"    .Axes(xlValue, xlPrimary).HasTitle = True    .Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = maturity2 & "-" & moneyness & "% Implied Volatility"    .Axes(xlValue, xlPrimary).AxisTitle.Font.Bold = True    .Axes(xlValue, xlPrimary).AxisTitle.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).MinimumScale = 0.9 * min_graph / 100    .Axes(xlValue, xlPrimary).MaximumScale = max_realized * 1.1 / 100    .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.0%"        Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    For iSrsIX = 0 To UBound(vResult, 1) - 2            '' Add each series            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = vResult(iSrsIX + 2, 1)                .values = vResult(iSrsIX + 2, 4) / 100 'long term                .XValues = vResult(iSrsIX + 2, 3) / 100 'short term                                .MarkerStyle = xlMarkerStyleSquare                .MarkerForegroundColorIndex = 29                .MarkerBackgroundColorIndex = 29                .Smooth = False                .MarkerSize = iMarkerSize - 2                .Shadow = False                                                            End With            .SeriesCollection(iSrsIX + 1).HasDataLabels = True            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Text = vResult(iSrsIX + 2, 1)            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Font.Size = iLabelSize            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Font.Bold = True            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Position = xlLabelPositionBelow                Next    'add a straight line y=x    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .ChartType = xlXYScatterLinesNoMarkers        .XValues = Array(1, 0)        .values = Array(1, 0)        .Format.line.ForeColor.RGB = RGB(128, 128, 128)    End With    End WithCall Formating_TS(sVResult, iOffset, vResult, vResult_Percentiles)            iOffset = WorksheetFunction.Max(nb_vol, 8) + iOffset + 4                '******************* SMILE ANALYSIS'get parametersnormalized = Range("ATM_normalized").Valuematurity = CStr(Range("maturity_skew").Value)percentile_days = Range("percentile_skew").Valuestart_date = CDate(Sh_InputVol.Range("m_date").Value - percentile_days)ReDim vResult(1 To nb_vol + 1, 1 To 9)vResult(1, 1) = "Ticker"vResult(1, 2) = "Name"vResult(1, 3) = "Last " & CStr(Replace(Range("moneyness1").Value, "%", "") * 100) & "%"vResult(1, 4) = "Last " & CStr(Replace(Range("moneyness2").Value, "%", "") * 100) & "%"vResult(1, 5) = "Spread"vResult(1, 6) = "Daily Chg"vResult(1, 7) = "5D Chg"vResult(1, 8) = "MTD Chg"If percentile_days = 365 Then    vResult(1, 9) = "1Y %Rk"Else    vResult(1, 9) = percentile_days & " %Rk"End If    vResult(1, 9) = "Curr. Perc."    '''' Skew Analysis ''''    i = 2For Each cell In Range("Underlyings", Range("Underlyings").End(xlDown))    If nb_SK = 0 Then        Exit For    End If        ' get ticker name    small_tick = CStr(cell)    vResult(i, 2) = cell.Offset(0, 1) 'ticker name    If Len(small_tick) > 7 Then        If Right(small_tick, 7) = " Equity" Then            vResult(i, 1) = left(small_tick, Len(small_tick) - 7)        Else            vResult(i, 1) = small_tick        End If    Else        vResult(i, 1) = small_tick    End If    vResult_Percentiles(1, i) = vResult(i, 1)            Dim histo1() As Variant    moneyness1 = CStr(Replace(Range("moneyness1").Value, "%", "") * 100)    fld = maturity & "_" & moneyness1    histo1 = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    Dim histo2() As Variant    moneyness2 = CStr(Replace(Range("moneyness2").Value, "%", "") * 100)    fld = maturity & "_" & moneyness2    histo2 = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    ''''100    Dim histo_atm() As Variant    fld = maturity & "_" & "100"    histo_atm = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    If UBound(histo1) > 0 And UBound(histo2) > 0 And UBound(histo_atm) > 0 Then        Dim v_skew() As Variant        v_skew = skew(histo1, histo2, histo_atm, normalized)        'v_skew = term_structure_ratio_and_spread(histo2, histo1)            vResult(i, 3) = histo1(UBound(histo1, 1), 1)        vResult(i, 4) = histo2(UBound(histo2, 1), 1)        vResult(i, 5) = v_skew(UBound(v_skew, 1), 1)        vResult(i, 6) = changes(v_skew(), nb_days_before(v_skew(), end_date, 1, dss), end_date, "level", dss)        vResult(i, 7) = changes(v_skew(), nb_days_before(v_skew(), end_date, 5, dss), end_date, "level", dss)        vResult(i, 8) = changes(v_skew(), first_date_month(v_skew(), end_date, dss), end_date, "level", dss)                start_date = CDate(Sh_InputVol.Range("m_date").Value - percentile_days)        vResult(i, 9) = percent_rank(v_skew(), start_date, end_date, dss)        '''' Add percentile up and down ''''        vResult_Percentiles(2, i) = percentile_value(v_skew(), start_date, end_date, 0.05) '5%        vResult_Percentiles(3, i) = percentile_value(v_skew(), start_date, end_date, 0.25) '1Q        vResult_Percentiles(4, i) = percentile_value(v_skew(), start_date, end_date, 0.5) ' median        vResult_Percentiles(5, i) = percentile_value(v_skew(), start_date, end_date, 0.75) ' 3Q        vResult_Percentiles(6, i) = percentile_value(v_skew(), start_date, end_date, 0.95)  ' 95%        vResult_Percentiles(7, i) = v_skew(UBound(v_skew), 1)  'spot        vResult_Percentiles(8, i) = v_skew(UBound(v_skew) - 5, 1) 'last week        vResult_Percentiles(9, i) = Round(vResult(i, 9) * 100, 0)    Else        MsgBox "Error: No data for the following ticker: " & small_tick        GoTo 1    End If    i = i + 1Next' ***** write smile resultsCall Write_Smile_Results(sVResult, iOffset, moneyness1, moneyness2, maturity, vResult(), vResult_Percentiles(), vResult_PercentilesT(), normalized)' ***************** CREATE THE CHARTS *****************    Set range_min = Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(1, UBound(vResult_Percentiles, 2) - 1)Set range_max = Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 3).Resize(1, UBound(vResult_Percentiles, 2) - 1)Set range_tickers = Sheets(sVResult).Range("N6").Offset(iOffset, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1)ReDim vBoxPlotArray_spot(nb_vol - 1) As DoubleFor i = 0 To nb_vol - 1    vBoxPlotArray_spot(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).ValueNext iFor i = 0 To nb_vol - 1    vBoxPlotArray_lastweek(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).ValueNext iFor i = 0 To nb_vol - 1    vBoxPlotArray_median(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).ValueNext imaxValue = -100minValue = 100Call min_maxValue(sVResult, iOffset, nb_vol, minValue, maxValue)   For i = 1 To nb_names    Array_names(i) = Sheets(sVResult).Range("N6").Offset(iOffset, i).ValueNext i' *********Add the Implied VS Realized Chart **********'chart creationiTop_BP = iTop_BP * 1.4Set chtChart = Sheets(sBoxPlot).ChartObjects.Add( _        left:=Sheets(sBoxPlot).Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=iTop_BP, _        Height:=iHeightBox_Plot).Chart    With chtChart        .ChartType = xlColumnStacked        .Parent.name = "Smile_BoxPlot"    End With            Dim min_Q25 As Doublemin_Q25 = 100For i = 0 To nb_vol - 1    If Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value < min_Q25 Then        min_Q25 = Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value    End IfNext iDim Q5 As Doublemin_Q5 = 100For i = 0 To nb_vol - 1    If Sheets(sVResult).Range("N6").Offset(iOffset + 1, 1 + i).Value < min_Q5 Then        min_Q5 = Sheets(sVResult).Range("N6").Offset(iOffset + 1, 1 + i).Value    End IfNext i'min_Q5 = -(min_Q25 - min_Q5)If min_Q25 > 0 Then    'add points and formatting    With chtChart    '    .HasTitle = True        .HasLegend = False    '    .ChartTitle.Text = Sheets(sVResult).Range("N4").Offset(iOffset, 0).Value & " Box Plot"        .Axes(xlValue, xlPrimary).MajorGridlines.Delete        .Axes(xlCategory, xlPrimary).MajorGridlines.Delete        Do Until .SeriesCollection.Count = 0                .SeriesCollection(1).Delete        Loop        ' Add each series        For iSrsIX = 0 To 2                        If iSrsIX = 0 Then ' Q25%                    For i = 0 To nb_vol - 1                        vBoxPlotArray(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value                        sName = "5% Percentile"                    Next i                End If                                    If iSrsIX = 1 Then  ' Box1: median -Q25                    For i = 0 To nb_vol - 1                        vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value)                        sName = "Box1"                    Next i                End If                                If iSrsIX = 2 Then ' Box2: Q75 -median                    For i = 0 To nb_vol - 1                        vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 4, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value)                        sName = "Box2"                    Next i                End If                                Set srsNew = .SeriesCollection.NewSeries                With srsNew                    .name = sName                    .values = vBoxPlotArray()                    If iSrsIX = 0 Then                        .Interior.ColorIndex = xlNone                        .HasErrorBars = True    '                    .ErrorBar.MinusValues = vBoxPlotArray_min()    '                    .ErrorBar.Amount = vBoxPlotArray_min()                        .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                        Type:=xlCustom, Amount:=range_min, MinusValues:= _                        range_min                        .ErrorBars.Format.line.Weight = dLineWeight                    End If                    If iSrsIX = 1 Then                        .Border.LineStyle = xlLineStyleEn                        .Border.Color = RGB(0, 0, 0)                        .Interior.Color = RGB(252, 252, 252)                        .Format.line.Weight = dLineWeight                    End If                    If iSrsIX = 2 Then                                   .HasErrorBars = True    '                    .ErrorBar.MinusValues = vBoxPlotArray_min()    '                    .ErrorBar.Amount = vBoxPlotArray_min()                        .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                        Type:=xlCustom, Amount:=range_max, MinusValues:= _                        range_max                        .ErrorBars.Format.line.Weight = dLineWeight                        .Border.LineStyle = xlLineStyleEn                        .Border.Color = RGB(0, 0, 0)                        .Interior.Color = RGB(252, 252, 252)                        .Format.line.Weight = dLineWeight                    End If                End With                        Next        .Axes(xlCategory, xlPrimary).HasMajorGridlines = True        .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash        .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15        .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize                    .Axes(xlValue, xlPrimary).HasMajorGridlines = True        .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash        .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15       .Axes(xlCategory, xlPrimary).CategoryNames = Array_names       .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue       .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue       If Sheets("3. Volatilities").Range("ATM_normalized").Value = False Then            .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00%"       Else            .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.000"       End If       .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize       .Axes(xlCategory).TickLabelPosition = xlTickLabelPositionLow       .Axes(xlValue).CrossesAt = minValue       .Axes(xlValue, xlPrimary).MaximumScale = maxValue       .Axes(xlValue, xlPrimary).MinimumScale = minValue                     .ChartGroups(1).GapWidth = dGap                            'add the spot        Set srsNew = .SeriesCollection.NewSeries        With srsNew            .name = "Current Value"            .ChartType = xlXYScatterLines            .values = vBoxPlotArray_spot()            .Format.line.Visible = False            .MarkerStyle = xlMarkerStyleDiamond            .MarkerForegroundColorIndex = 29            .MarkerBackgroundColorIndex = 29            .MarkerSize = iMarkerSize        End With        'add the spot last week        Set srsNew = .SeriesCollection.NewSeries        With srsNew            .name = "Last Week"            .ChartType = xlXYScatterLines            .values = vBoxPlotArray_lastweek()            .Format.line.Visible = False            .MarkerStyle = xlMarkerStyleDash            .MarkerForegroundColorIndex = 29            .MarkerBackgroundColorIndex = 29            .MarkerSize = iMarkerSize        End With        End WithElse' This case is more complicated: we need to adapt the box plot beacause the Q25 is negative..    min_Q25 = -min_Q25    For i = 0 To nb_vol - 1        vBoxPlotArray_spot(i) = vBoxPlotArray_spot(i) '+ min_Q25    Next i        For i = 0 To nb_vol - 1        vBoxPlotArray_lastweek(i) = vBoxPlotArray_lastweek(i) ' + min_Q25    Next i    With chtChart    '    .HasTitle = True        .HasLegend = False    '    .ChartTitle.Text = Sheets(sVResult).Range("N4").Offset(iOffset, 0).Value & " Box Plot"        .Axes(xlValue, xlPrimary).MajorGridlines.Delete        .Axes(xlCategory, xlPrimary).MajorGridlines.Delete        Do Until .SeriesCollection.Count = 0                .SeriesCollection(1).Delete        Loop        ' Add each series        For iSrsIX = 0 To 3                        If iSrsIX = 0 Then ' Q25%                    For i = 0 To nb_vol - 1                        vBoxPlotArray(i) = Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value + min_Q25                        sName = "5% Percentile"                    Next i                End If                                    If iSrsIX = 1 Then  ' Box1: median -Q25                    For i = 0 To nb_vol - 1                        vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 2, 1 + i).Value)                        sName = "Box1"                    Next i                End If                                If iSrsIX = 2 Then ' Box2: Q75 -median                    For i = 0 To nb_vol - 1                        vBoxPlotArray(i) = (Sheets(sVResult).Range("N6").Offset(iOffset + 4, 1 + i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 3, 1 + i).Value)                        sName = "Box2"                    Next i                End If                                If iSrsIX = 3 Then ' dummy variable                    For i = 0 To nb_vol - 1                        vBoxPlotArray(i) = -min_Q25                        sName = "Dummy"                    Next i                End If                                Set srsNew = .SeriesCollection.NewSeries                With srsNew                    .name = sName                    .values = vBoxPlotArray()                    If iSrsIX = 0 Then                        .AxisGroup = 1                        .Interior.ColorIndex = xlNone                        .HasErrorBars = True                        .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                        Type:=xlCustom, Amount:=range_min, MinusValues:= _                        range_min                        .ErrorBars.Format.line.Weight = dLineWeight                                            End If                    If iSrsIX = 1 Then                        .AxisGroup = 1                        .Border.LineStyle = xlLineStyleEn                        .Border.Color = RGB(0, 0, 0)                        .Interior.Color = RGB(252, 252, 252)                        .Format.line.Weight = dLineWeight                                            End If                    If iSrsIX = 2 Then                        .AxisGroup = 1                        .HasErrorBars = True    '                    .ErrorBar.MinusValues = vBoxPlotArray_min()    '                    .ErrorBar.Amount = vBoxPlotArray_min()                        .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                        Type:=xlCustom, Amount:=range_max, MinusValues:= _                        range_max                        .ErrorBars.Format.line.Weight = dLineWeight                        .Border.LineStyle = xlLineStyleEn                        .Border.Color = RGB(0, 0, 0)                        .Interior.Color = RGB(252, 252, 252)                        .Format.line.Weight = dLineWeight                                            End If                    If iSrsIX = 3 Then                        .Interior.Color = RGB(0, 0, 0)                        .AxisGroup = 1                    End If                End With                        Next        .SeriesCollection(1).AxisGroup = 2        .SeriesCollection(2).AxisGroup = 2        .SeriesCollection(3).AxisGroup = 2        .Axes(xlCategory, xlPrimary).HasMajorGridlines = True        .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash        .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15        .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize                    .Axes(xlValue, xlPrimary).HasMajorGridlines = True        .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash        .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15       .Axes(xlCategory, xlPrimary).CategoryNames = Array_names       .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue       .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue       If Sheets("3. Volatilities").Range("ATM_normalized").Value = False Then            .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00%"       Else            .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.000"       End If              .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize              .Axes(xlValue, xlSecondary).TickLabels.Font.Background = xlTransparent       .Axes(xlValue, xlSecondary).TickLabels.Font.ColorIndex = 2              .Axes(xlCategory).TickLabelPosition = xlTickLabelPositionLow       .Axes(xlValue).CrossesAt = min_Q5 - min_Q25                     .Axes(xlValue, xlSecondary).MaximumScale = maxValue + min_Q25       .Axes(xlValue, xlSecondary).MinimumScale = min_Q5       .Axes(xlValue, xlPrimary).MaximumScale = maxValue       .Axes(xlValue, xlPrimary).MinimumScale = min_Q5 - min_Q25 ' minValue       '              .ChartGroups(2).GapWidth = dGap       .SeriesCollection(4).Interior.ColorIndex = xlNone                             '       'add the spot        Set srsNew = .SeriesCollection.NewSeries        With srsNew            .name = "Current Value"            .ChartType = xlXYScatterLines            .values = vBoxPlotArray_spot()            .Format.line.Visible = False            .MarkerStyle = xlMarkerStyleDiamond            .MarkerForegroundColorIndex = 29            .MarkerBackgroundColorIndex = 29            .MarkerSize = iMarkerSize            .AxisGroup = 1        End With'        'add the spot last week        Set srsNew = .SeriesCollection.NewSeries        With srsNew            .name = "Last Week"            .ChartType = xlXYScatterLines            .values = vBoxPlotArray_lastweek()            .Format.line.Visible = False            .MarkerStyle = xlMarkerStyleDash            .MarkerForegroundColorIndex = 29            .MarkerBackgroundColorIndex = 29            .MarkerSize = iMarkerSize            .AxisGroup = 1        End With                .Axes(xlValue, xlSecondary).Border.LineStyle = xlNone        .Axes(xlValue, xlSecondary).MajorTickMark = xlNone        .Axes(xlValue, xlSecondary).MinorTickMark = xlNone        .Axes(xlValue, xlSecondary).TickLabelPosition = xlNone        End WithEnd If'find the max inplied volmax_implied = -100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 3) > max_implied Then        max_implied = vResult(i + 1, 3)    End IfNext imax_realized = -100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 4) > max_realized Then        max_realized = vResult(i + 1, 4)    End IfNext imin_implied = 100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 3) < min_implied Then        min_implied = vResult(i + 1, 3)    End IfNext imin_realized = 100For i = 1 To UBound(vResult, 1) - 1    If vResult(i + 1, 4) < min_realized Then        min_realized = vResult(i + 1, 4)    End IfNext imin_graph = Application.Min(min_realized, min_implied)If min_graph < 0 Then    min_graph = 1.1 * min_graphElse    min_graph = 0.9 * min_graphEnd IfIf max_implied < 0 Then    max_implied = 0.9 * max_impliedElse    max_implied = 1.1 * max_impliedEnd If'chart creationiTop = 1.7 * iTopSet chtChart = Sheets(sScatterPlot).ChartObjects.Add( _        left:=Sheets(sScatterPlot).Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthScatter_Plot, _        top:=iTop, _        Height:=iHeightScatter_Plot).Chart    With chtChart        .ChartType = xlXYScatterLines        .Parent.name = "Smile_ScatterPlot"    End With'add points and formattingWith chtChart'    .HasTitle = True    .HasLegend = False'    .ChartTitle.Text = Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value    .Axes(xlCategory, xlPrimary).HasTitle = True    .Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = maturity & "-" & moneyness1 & "% Implied Volatility"    .Axes(xlCategory, xlPrimary).AxisTitle.Font.Bold = True    .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlCategory, xlPrimary).AxisTitle.Font.Size = iAxesTitleSize    .Axes(xlCategory, xlPrimary).MinimumScale = min_graph / 100    .Axes(xlCategory, xlPrimary).MaximumScale = max_implied * 1.1 / 100    .Axes(xlCategory, xlPrimary).TickLabels.NumberFormat = "0.00%"    .Axes(xlValue, xlPrimary).HasTitle = True    .Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = maturity & "-" & moneyness2 & "% Implied Volatility"    .Axes(xlValue, xlPrimary).AxisTitle.Font.Bold = True    .Axes(xlValue, xlPrimary).AxisTitle.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).MinimumScale = min_graph / 100    .Axes(xlValue, xlPrimary).MaximumScale = max_realized * 1.1 / 100    .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00%"           Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    For iSrsIX = 0 To UBound(vResult, 1) - 2            '' Add each series            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = vResult(iSrsIX + 2, 1)                .values = vResult(iSrsIX + 2, 4) / 100 'long term                .XValues = vResult(iSrsIX + 2, 3) / 100 'short term                                .MarkerStyle = xlMarkerStyleSquare                .MarkerForegroundColorIndex = 29                .MarkerBackgroundColorIndex = 29                .Smooth = False                .MarkerSize = iMarkerSize - 2                .Shadow = False                                                            End With            .SeriesCollection(iSrsIX + 1).HasDataLabels = True            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Text = vResult(iSrsIX + 2, 1)            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Font.Size = iLabelSize            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Font.Bold = True            .SeriesCollection(iSrsIX + 1).Points(1).DataLabel.Position = xlLabelPositionBelow                Next    'add a straight line y=x    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .ChartType = xlXYScatterLinesNoMarkers        .XValues = Array(1, 0)        .values = Array(1, 0)        .Format.line.ForeColor.RGB = RGB(128, 128, 128)    End With    End With    Call Formating_Smile(sVResult, iOffset, vResult, vResult_Percentiles)    Sheets("Vol Results").Activate1:    Sheets("3. Volatilities").ActivateEnd SubFunction changes(vec_datedata() As Variant, start_date As Date, end_date As Date, typ As String, _                    retur As String) As SingleDim begin_level As Single: begin_level = 0Dim end_level As Single: end_level = 0For i = 0 To UBound(vec_datedata, 1)If vec_datedata(i, 0) = start_date Thenbegin_level = vec_datedata(i, 1)Exit ForEnd IfNext iIf i = UBound(vec_datedata) + 1 Thenretur = "wrong dates"Exit FunctionEnd IfFor i = 0 To UBound(vec_datedata, 1)If vec_datedata(i, 0) = end_date Thenend_level = vec_datedata(i, 1)Exit ForEnd IfNext iIf i = UBound(vec_datedata) + 1 Thenretur = "wrong dates"Exit FunctionEnd IfIf typ = "variation" And begin_level <> 0 Thenchanges = end_level / begin_level - 1End IfIf typ = "level" Thenchanges = end_level - begin_levelEnd IfEnd FunctionFunction nb_days_before(vec_datedata() As Variant, my_date As Date, nb_days As Integer, retur As String) As DateFor i = 0 To UBound(vec_datedata, 1)If vec_datedata(i, 0) = my_date ThenExit ForEnd IfNext iIf i = UBound(vec_datedata) + 1 Thenretur = "wrong end date"Exit FunctionEnd Ifnb_days_before = CDate(vec_datedata(i - nb_days, 0))End FunctionFunction first_date_month(vec_datedata() As Variant, my_date As Date, retur As String) As DateDim f_date As Date: f_date = DateSerial(Year(my_date), Month(my_date), 1)For i = 0 To UBound(vec_datedata, 1)If vec_datedata(i, 0) = my_date ThenExit ForEnd IfNext iIf i = UBound(vec_datedata) + 1 Thenretur = "wrong end date"Exit FunctionEnd IfDo While vec_datedata(i, 0) >= f_datei = i - 1Loopfirst_date_month = CDate(vec_datedata(i + 1, 0))End FunctionFunction date_data(vec_datedata() As Variant, m_date As Date, column As Integer) As VariantFor i = 0 To UBound(vec_datedata, 1)If vec_datedata(i, 0) = m_date Thendate_data = vec_datedata(i, column)Exit FunctionEnd IfNext i'pick_data = -1End FunctionFunction percent_rank(vec_datedata() As Variant, start_date As Date, end_date As Date, retur As String) As Single    Dim end_level As Double: end_level = vec_datedata(UBound(vec_datedata, 1), 1)        Dim v_data() As Variant    ReDim v_data(0)    v_data(0) = ""        n = 0        For i = 0 To UBound(vec_datedata, 1)            If CDate(vec_datedata(i, 0)) <= end_date And CDate(vec_datedata(i, 0)) >= start_date Then                    If v_data(0) = "" Then                v_data(n) = vec_datedata(i, 1)                n = n + 1            Else                ReDim Preserve v_data(n)                v_data(n) = vec_datedata(i, 1)                n = n + 1            End If                End If            Next i        percent_rank = WorksheetFunction.PercentRank(v_data, end_level)End FunctionFunction percentile_value(vec_datedata() As Variant, start_date As Date, end_date As Date, level As Double) As Double    Dim end_level As Double: end_level = vec_datedata(UBound(vec_datedata, 1), 1)        Dim v_data() As Variant    ReDim v_data(0)    v_data(0) = ""        n = 0        For i = 0 To UBound(vec_datedata, 1)            If CDate(vec_datedata(i, 0)) <= end_date And CDate(vec_datedata(i, 0)) >= start_date Then                    If v_data(0) = "" Then                v_data(n) = vec_datedata(i, 1)                n = n + 1            Else                ReDim Preserve v_data(n)                v_data(n) = vec_datedata(i, 1)                n = n + 1            End If                End If            Next i        percentile_value = WorksheetFunction.percentile(v_data, level)End FunctionFunction mean_function(vec_datedata() As Variant, start_date As Date, end_date As Date) As DoubleDim end_level As Double: end_level = vec_datedata(UBound(vec_datedata, 1), 1)        Dim v_data() As Variant    ReDim v_data(0)    v_data(0) = ""        n = 0        For i = 0 To UBound(vec_datedata, 1)            If CDate(vec_datedata(i, 0)) <= end_date And CDate(vec_datedata(i, 0)) >= start_date Then                    If v_data(0) = "" Then                v_data(n) = vec_datedata(i, 1)                n = n + 1            Else                ReDim Preserve v_data(n)                v_data(n) = vec_datedata(i, 1)                n = n + 1            End If                End If            Next i        mean_function = WorksheetFunction.Average(v_data)End FunctionFunction returns(v_data() As Variant) As Variant()Dim Temp() As VariantReDim Temp(UBound(v_data, 1) - 1, 1)For i = 1 To UBound(v_data, 1)    Temp(i - 1, 0) = v_data(i, 0)    Temp(i - 1, 1) = WorksheetFunction.Ln(v_data(i, 1)) - WorksheetFunction.Ln(v_data(i - 1, 1))Next ireturns = TempEnd FunctionFunction real_vol(v_data() As Variant, nb_days As Integer) As VariantDim Temp() As VariantReDim Temp(UBound(v_data, 1) - nb_days, 1)For i = 0 To UBound(v_data, 1) - nb_days    Temp(i, 0) = v_data(i + nb_days, 0)Dim vc_rt() As VariantReDim vc_rt(nb_days)    For j = i + 1 To i + nb_days        vc_rt(j - i) = v_data(j, 1)    Next j    'temp(i, 1) = WorksheetFunction.StDev(vc_rt) * 260 ^ 0.5Temp(i, 1) = WorksheetFunction.StDev(vc_rt) * 252 ^ 0.5Next ireal_vol = TempEnd FunctionFunction impl_real_spread(real() As Variant, impl() As Variant) As Variant()n = 0For i = 0 To UBound(real, 1)    For j = 0 To UBound(impl, 1)        If real(i, 0) = impl(j, 0) Then    n = n + 1    Exit For    End If        Next j    Next iDim Temp() As VariantReDim Temp(n - 1, 1)n = 0         For i = 0 To UBound(real, 1)    For j = 0 To UBound(impl, 1)        If real(i, 0) = impl(j, 0) Then    Temp(n, 0) = real(i, 0)    Temp(n, 1) = impl(j, 1) - real(i, 1) * 100    n = n + 1    Exit For    End If        Next j    Next iimpl_real_spread = TempEnd FunctionFunction term_structure_ratio_and_spread(threem() As Variant, oney() As Variant) As Variant()n = 0For i = 0 To UBound(threem, 1)    For j = 0 To UBound(oney, 1)        If threem(i, 0) = oney(j, 0) Then    n = n + 1    Exit For    End If        Next j    Next iDim Temp() As VariantReDim Temp(n - 1, 2)n = 0For i = 0 To UBound(threem, 1)    For j = 0 To UBound(oney, 1)        If threem(i, 0) = oney(j, 0) Then    Temp(n, 0) = threem(i, 0)    Temp(n, 1) = oney(j, 1) / threem(i, 1)    Temp(n, 2) = oney(j, 1) - threem(i, 1)    n = n + 1    Exit For    End If        Next j    Next iterm_structure_ratio_and_spread = Temp    End FunctionFunction skew(ninety() As Variant, oneten() As Variant, atm() As Variant, normalized As Boolean) As Variant()n = 0Dim Temp() As VariantIf ninety(0, 0) = oneten(0, 0) And ninety(0, 0) = atm(0, 0) And _        ninety(UBound(ninety, 1), 0) = oneten(UBound(oneten, 1), 0) And _        ninety(UBound(ninety, 1), 0) = atm(UBound(atm, 1), 0) Then        n = WorksheetFunction.Min(UBound(ninety, 1), UBound(oneten, 1))    n = WorksheetFunction.Min(n, UBound(atm, 1))    n = UBound(ninety, 1)        ReDim Temp(n, 1)        n = 0    If normalized Then        For i = 0 To UBound(Temp)                    Temp(n, 0) = ninety(i, 0)            Temp(n, 1) = (ninety(i, 1) - oneten(i, 1)) / atm(i, 1)            n = n + 1                Next i    Else        For i = 0 To UBound(Temp)                    Temp(n, 0) = ninety(i, 0)            Temp(n, 1) = (ninety(i, 1) - oneten(i, 1))            n = n + 1                Next i    End If        skew = Temp        Exit FunctionElse    For i = 0 To UBound(ninety, 1)            For j = 0 To UBound(oneten, 1)                hey = 0                    For k = 0 To UBound(atm, 1)                    If ninety(i, 0) = oneten(j, 0) And ninety(i, 0) = atm(k, 0) Then            n = n + 1            hey = 1            Exit For            End If                        Next k                        If hey = 1 Then            Exit For            End If                Next j            Next iReDim Temp(n - 1, 1)n = 0         For i = 0 To UBound(ninety, 1)        For j = 0 To UBound(oneten, 1)            For k = 0 To UBound(atm, 1)            If ninety(i, 0) = oneten(j, 0) And ninety(i, 0) = atm(k, 0) Then            Temp(n, 0) = ninety(i, 0)            If normalized Then                Temp(n, 1) = (ninety(i, 1) - oneten(j, 1)) / atm(k, 1)            Else                Temp(n, 1) = (ninety(i, 1) - oneten(j, 1))            End If            n = n + 1            Exit For        End If                Next k            Next j    Next iskew = TempEnd IfEnd FunctionFunction bloom(ticker As String, field As String, start_date As Date, end_date As Date) As Variant()Dim histo() As Variant''' init bloomSet session = New blpapicomLib.sessionsession.Startsession.OpenService ("//blp/refdata")Dim fields(0) As Variant: fields(0) = fieldhisto_prices = M_BloomFunctions.M_GetHistoricalData(ticker, fields(), start_date, end_date, "DAILY", session)ReDim histo(UBound(histo_prices), 1)For j = 0 To UBound(histo_prices, 1)    histo(j, 0) = histo_prices(j, 0)    histo(j, 1) = histo_prices(j, 1)Next jbloom = histoEnd FunctionFunction order(myarray() As Variant, column As Integer, orderby As String)Dim Temp() As VariantReDim Temp(UBound(myarray, 2))If orderby = "asc" Then    For i = 2 To UBound(myarray) - 1        For j = i + 1 To UBound(myarray)            If IsEmpty(myarray(i, column)) Or IsEmpty(myarray(j, column)) Then                        Else                If myarray(i, column) > myarray(j, column) Then                                For k = 1 To UBound(Temp)                        Temp(k) = myarray(j, k)                    Next k                                    For k = 1 To UBound(Temp)                        myarray(j, k) = myarray(i, k)                    Next k                                        For k = 1 To UBound(Temp)                        myarray(i, k) = Temp(k)                    Next k                End If            End If        Next j    Next iElseIf orderby = "desc" Then    For i = 2 To UBound(myarray)        For j = i + 1 To UBound(myarray)            If IsEmpty(myarray(i, column)) Or IsEmpty(myarray(j, column)) Then                        Else                If myarray(i, column) < myarray(j, column) Then                                        For k = 1 To UBound(Temp)                            Temp(k) = myarray(j, k)                        Next k                                            For k = 1 To UBound(Temp)                            myarray(j, k) = myarray(i, k)                        Next k                                                For k = 1 To UBound(Temp)                            myarray(i, k) = Temp(k)                        Next k                End If            End If        Next j    Next iEnd IfEnd Function                Sub min_maxValue(sVResult As String, iOffset As Integer, nb_vol As Integer, minValue As Double, maxValue As Double)        For i = 0 To nb_vol - 1        If Sheets(sVResult).Range("N6").Offset(iOffset + 1, 1 + i).Value < minValue Then            minValue = Sheets(sVResult).Range("N6").Offset(iOffset + 1, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).Value < minValue Then            minValue = Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).Value < minValue Then            minValue = Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 5, 1 + i).Value > maxValue Then            maxValue = Sheets(sVResult).Range("N6").Offset(iOffset + 5, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).Value > maxValue Then            maxValue = Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).Value > maxValue Then            maxValue = Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).Value        End If    Next i        If maxValue > 0 Then        maxValue = WorksheetFunction.Min(maxValue * 1.1, 1.5)    Else        maxValue = 0    End If        If minValue > 0 Then        minValue = 0.9 * minValue    Else        minValue = minValue + 0.1 * minValue    End IfEnd SubSub min_maxValueTS(sVResult As String, iOffset As Integer, nb_vol As Integer, minValue As Double, maxValue As Double)        For i = 0 To nb_vol - 1        If Sheets(sVResult).Range("N6").Offset(iOffset + 1, 1 + i).Value < minValue Then            minValue = Sheets(sVResult).Range("N6").Offset(iOffset + 1, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).Value < minValue Then            minValue = Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).Value < minValue Then            minValue = Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 5, 1 + i).Value > maxValue Then            maxValue = Sheets(sVResult).Range("N6").Offset(iOffset + 5, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).Value > maxValue Then            maxValue = Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1 + i).Value        End If        If Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).Value > maxValue Then            maxValue = Sheets(sVResult).Range("N6").Offset(iOffset + 7, 1 + i).Value        End If    Next i        If maxValue > 0 Then        maxValue = WorksheetFunction.Min(maxValue * 1.1, 10)    Else        maxValue = 0    End If        If minValue > 0 Then        minValue = 0.9 * minValue    Else        minValue = minValue + 0.1 * minValue    End IfEnd SubSub Formating_IV(sVResult As String, iOffset As Integer, vResult() As Variant, vResult_Percentiles As Variant)    'delete previous format condition    Sheets(sVResult).Range("A1").Resize(1000, 500).FormatConditions.Delete        '    If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Alphabetic" Then        vResult(1, 1) = -1        vResult = SortArray(vResult, 1, True)        vResult(1, 1) = "Tickers"        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    End If    If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Percentile" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult(), 6, "asc")            Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            Call order(vResult(), 3, "asc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        Else            Call order(vResult(), 6, "asc")            Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            Call order(vResult(), 3, "asc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        End If               End If        If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Current Value" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult(), 3, "asc")            Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            Call order(vResult(), 6, "asc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        Else            Call order(vResult(), 3, "asc")            Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            Call order(vResult(), 6, "asc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        End If        End If            '1: IV result format (implied volatility moves)    With Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(1, UBound(vResult, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter    End With'    With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 1).Resize(UBound(vResult, 1) - 1, 1)        .HorizontalAlignment = xlLeft    End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 2).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .Font.Bold = True    End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 3).Resize(UBound(vResult, 1) - 1, 2)        .FormatConditions.Delete        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _            Formula1:="0"        .FormatConditions(1).Font.ColorIndex = 50        .FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _            Formula1:="0"        .FormatConditions(2).Font.ColorIndex = 3        .NumberFormat = "#,##0.00"    End With            With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 5).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "0%"    End With        ActiveWorkbook.Sheets(sVResult).Activate        'add the color scale       ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, 5).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddColorScale ColorScaleType:=3    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _        xlConditionValueLowestValue    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor        .Color = 8109667        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _        xlConditionValuePercentile    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor        .Color = 8711167        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _        xlConditionValueHighestValue    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor        .Color = 7039480        .TintAndShade = 0    End With            'add the color scale for pct rank    ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, 2).Resize(UBound(vResult, 1) - 1, 1).Select        Selection.FormatConditions.AddDatabar    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax    End With    With Selection.FormatConditions(1).BarColor        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).BarFillType = xlDataBarFillGradient    Selection.FormatConditions(1).Direction = xlContext    Selection.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor    Selection.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid    Selection.FormatConditions(1).NegativeBarFormat.BorderColorType = _        xlDataBarColor    With Selection.FormatConditions(1).BarBorder.Color        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic    With Selection.FormatConditions(1).AxisColor        .Color = 0        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.Color        .Color = 255        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.BorderColor        .Color = 255        .TintAndShade = 0    End With            ActiveWorkbook.Sheets("3. Volatilities").Activate                      '1 BIS : IV result format (implied volatility moves) FOR THE CURRENT VALUE    With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(1, UBound(vResult, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter    End With'    With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 1).Resize(UBound(vResult, 1) - 1, 1)        .HorizontalAlignment = xlLeft    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 2).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .Font.Bold = True    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 3).Resize(UBound(vResult, 1) - 1, 2)        .FormatConditions.Delete        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _            Formula1:="0"        .FormatConditions(1).Font.ColorIndex = 50        .FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _            Formula1:="0"        .FormatConditions(2).Font.ColorIndex = 3        .NumberFormat = "#,##0.00"    End With            With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 5).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "0%"    End With        ActiveWorkbook.Sheets(sVResult).Activate        'add the color scale    ActiveWorkbook.Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 2).Resize(UBound(vResult, 1) - 1, 1).Select        Selection.FormatConditions.AddColorScale ColorScaleType:=3    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _        xlConditionValueLowestValue    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor        .Color = 8109667        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _        xlConditionValuePercentile    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor        .Color = 8711167        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _        xlConditionValueHighestValue    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor        .Color = 7039480        .TintAndShade = 0    End With            'add the color scale for pct rank    ActiveWorkbook.Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 5).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddDatabar    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax    End With    With Selection.FormatConditions(1).BarColor        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).BarFillType = xlDataBarFillGradient    Selection.FormatConditions(1).Direction = xlContext    Selection.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor    Selection.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid    Selection.FormatConditions(1).NegativeBarFormat.BorderColorType = _        xlDataBarColor    With Selection.FormatConditions(1).BarBorder.Color        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic    With Selection.FormatConditions(1).AxisColor        .Color = 0        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.Color        .Color = 255        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.BorderColor        .Color = 255        .TintAndShade = 0    End With            ActiveWorkbook.Sheets("3. Volatilities").Activate                '2. implied volatility results Formating        For i = 2 To UBound(vResult_Percentiles, 1)        For j = 2 To UBound(vResult_Percentiles, 2)            vResult_Percentiles(i, j) = 0.01 * vResult_Percentiles(i, j)        Next j    Next i        Dim vResult_PercentilesT() As Variant    vResult_PercentilesT = Application.Transpose(vResult_Percentiles)    If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Alphabetic" Then        vResult_PercentilesT(1, 1) = -1        vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)        vResult_PercentilesT(1, 1) = "Tickers"        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If    If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Percentile" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult_PercentilesT(), 9, "desc")        Else            Call order(vResult_PercentilesT(), 9, "asc")        End If        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If        If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Current Value" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult_PercentilesT(), 7, "desc")        Else            Call order(vResult_PercentilesT(), 7, "asc")        End If        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If    With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(1, UBound(vResult_Percentiles, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter        .NumberFormat = "#,##0.00%"    End With        With Sheets(sVResult).Range("N6").Offset(iOffset, UBound(vResult_Percentiles, 2) + 2).Resize(1, UBound(vResult_Percentiles, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2).Resize(2, 1)        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(2, UBound(vResult_Percentiles, 2) - 1)        .NumberFormat = "#,##0.00%"        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 8, 0).Resize(2, UBound(vResult_Percentiles, 2))        .NumberFormat = "#,##0.0%"        .Borders(xlEdgeTop).Weight = xlThin    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 8, 0)         .Borders(xlEdgeRight).Weight = xlThin    End With        Dim k As Integer        For k = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.Size = 8        Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.Bold = True'        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Value < Sheets(sVResult).Range("N6").Offset(iOffset + 1, k).Value Then'            Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.ColorIndex = 50'        End If'        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Value > Sheets(sVResult).Range("N6").Offset(iOffset + 5, k).Value Then'            Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.ColorIndex = 3'        End If    Next k        'add the color scale    ActiveWorkbook.Sheets(sVResult).Activate    Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).NumberFormat = "0%"    Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).Select    Selection.FormatConditions.AddIconSetCondition    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .ReverseOrder = False        .ShowIconOnly = False        .IconSet = ActiveWorkbook.IconSets(xl3TrafficLights1)    End With    Selection.FormatConditions(1).IconCriteria(1).Icon = xlIconGreenCircle    With Selection.FormatConditions(1).IconCriteria(2)        .Type = xlConditionValueNumber        .Value = 0.33        .Operator = 7        .Icon = xlIconYellowCircle    End With    With Selection.FormatConditions(1).IconCriteria(3)        .Type = xlConditionValueNumber        .Value = 0.67        .Operator = 7        .Icon = xlIconRedCircleWithBorder    End With        ActiveWorkbook.Sheets("3. Volatilities").Activate'        ' short selection for powerpoint presentation        If UBound(vResult, 1) > 5 Then        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2)).Value = Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(6, UBound(vResult, 2)).Value        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(6, UBound(vResult, 2)).Copy        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2)).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _        SkipBlanks:=False, Transpose:=False        With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2))            .BorderAround Weight:=xlMedium            .Font.Size = 7        End With    Else        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Copy                Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2)).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _        SkipBlanks:=False, Transpose:=False                With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2))            .BorderAround Weight:=xlMedium            .Font.Size = 7        End With        End IfEnd SubSub Formating_IVR(sVResult As String, iOffset As Integer, vResult() As Variant, vResult_Percentiles As Variant, vResult_Bis() As Variant)    ' This function does the formating for the second row of results: realized vol and ratio    'vresult contains the realized vol results    'vResult_Bis contains the realized vol ratio        'vresult will be written twice in the sheet vol results because for the powerpoint we need to way of presenting the results    'vResult_Bis will also be written twice        'If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Percentile" Then    'the first time it is sorted by percentile, the second time by current value        'If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Current Value" Then    'it is the contrary            If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Alphabetic" Then        vResult(1, 1) = -1        vResult = SortArray(vResult, 1, True)        vResult(1, 1) = "Tickers"        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        'result bis (ratio)        vResult_Bis(1, 1) = -1        vResult_Bis = SortArray(vResult_Bis, 1, True)        vResult_Bis(1, 1) = "Tickers"        Sheets(sVResult).Range("B6").Offset(iOffset, UBound(vResult, 2) + 1).Resize(UBound(vResult_Bis, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis        'second part: results for current value        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        'second part result bis        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1).Resize(UBound(vResult_Bis, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis    End If        If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Percentile" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            'first r vol result            Call order(vResult(), 6, "desc")            Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            'result bis (ratio)            Call order(vResult_Bis, 3, "asc")            Sheets(sVResult).Range("B6").Offset(iOffset, UBound(vResult, 2) + 1).Resize(UBound(vResult_Bis, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis            'second r vol            Call order(vResult(), 3, "desc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            'second r vol bis            Call order(vResult_Bis(), 2, "asc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1).Resize(UBound(vResult, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis        Else             'first r vol result             Call order(vResult(), 6, "asc")             Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult             'result bis (ratio)             Call order(vResult_Bis, 3, "desc")             Sheets(sVResult).Range("B6").Offset(iOffset, UBound(vResult, 2) + 1).Resize(UBound(vResult_Bis, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis            'second r vol             Call order(vResult(), 3, "asc")             Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult             'second r vol bis             Call order(vResult_Bis(), 2, "desc")             Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1).Resize(UBound(vResult, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis        End If    End If        If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Current Value" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            'first r vol result            Call order(vResult(), 3, "desc")            Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            'result bis (ratio)            Call order(vResult_Bis, 2, "asc")            Sheets(sVResult).Range("B6").Offset(iOffset, UBound(vResult, 2) + 1).Resize(UBound(vResult_Bis, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis            'second r vol            Call order(vResult(), 6, "desc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            'second r vol bis            Call order(vResult_Bis(), 3, "asc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1).Resize(UBound(vResult, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis               Else            'first r vol result            Call order(vResult(), 3, "asc")            'result bis (ratio)            Call order(vResult_Bis, 2, "desc")            Sheets(sVResult).Range("B6").Offset(iOffset, UBound(vResult, 2) + 1).Resize(UBound(vResult_Bis, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis            'second r vol            Call order(vResult(), 6, "asc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult            'second r vol bis            Call order(vResult_Bis(), 3, "desc")            Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1).Resize(UBound(vResult, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis        End If    End If         '1 : realized volatility results Formating    With Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(1, UBound(vResult, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With            With Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter    End With                     With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 2).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .Font.Bold = True    End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 1).Resize(UBound(vResult, 1) - 1, 1)        .HorizontalAlignment = xlLeft    End With            With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 3).Resize(UBound(vResult, 1) - 1, 2)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _            Formula1:="0"        .FormatConditions(1).Font.ColorIndex = 50        .FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _            Formula1:="0"        .FormatConditions(2).Font.ColorIndex = 3            End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 5).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "0%"    End With        'ratio formatting    With Sheets(sVResult).Range("B6").Offset(iOffset, UBound(vResult, 2) + 1).Resize(1, UBound(vResult_Bis, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter    End With    With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 1 + UBound(vResult, 2)).Resize(UBound(vResult, 1) - 1, 3)        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 1 + UBound(vResult, 2) + 2).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0%"        .HorizontalAlignment = xlCenter    End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 1 + UBound(vResult, 2) + 1).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .HorizontalAlignment = xlCenter        .Font.Bold = True    End With            ActiveWorkbook.Sheets(sVResult).Activate        'add the color scale for pct rank        ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, 5).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddColorScale ColorScaleType:=3    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _        xlConditionValueLowestValue    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor        .Color = 7039480        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _        xlConditionValuePercentile    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor        .Color = 8711167        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _        xlConditionValueHighestValue    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor        .Color = 8109667        .TintAndShade = 0    End With        'add the color scale for current value vol ratio    ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, UBound(vResult, 2) + 3).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddColorScale ColorScaleType:=3    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _        xlConditionValueLowestValue    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor        .Color = 8109667        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _        xlConditionValuePercentile    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor        .Color = 8711167        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _        xlConditionValueHighestValue    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor        .Color = 7039480        .TintAndShade = 0    End With        'add the color scale for current value    ActiveWorkbook.Sheets(sVResult).Activate    ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, 2).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddDatabar    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax    End With    With Selection.FormatConditions(1).BarColor        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).BarFillType = xlDataBarFillGradient    Selection.FormatConditions(1).Direction = xlContext    Selection.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor    Selection.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid    Selection.FormatConditions(1).NegativeBarFormat.BorderColorType = _        xlDataBarColor    With Selection.FormatConditions(1).BarBorder.Color        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic    With Selection.FormatConditions(1).AxisColor        .Color = 0        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.Color        .Color = 255        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.BorderColor        .Color = 255        .TintAndShade = 0    End With        'color scale ratio    ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, UBound(vResult, 2) + 2).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddDatabar    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax    End With    With Selection.FormatConditions(1).BarColor        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).BarFillType = xlDataBarFillGradient    Selection.FormatConditions(1).Direction = xlContext    Selection.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor    Selection.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid    Selection.FormatConditions(1).NegativeBarFormat.BorderColorType = _        xlDataBarColor    With Selection.FormatConditions(1).BarBorder.Color        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic    With Selection.FormatConditions(1).AxisColor        .Color = 0        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.Color        .Color = 255        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.BorderColor        .Color = 255        .TintAndShade = 0    End With    ActiveWorkbook.Sheets("3. Volatilities").Activate                '1 BIS : IV result format (implied volatility moves) FOR THE CURRENT VALUE    With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(1, UBound(vResult, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter    End With'    With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 1).Resize(UBound(vResult, 1) - 1, 1)        .HorizontalAlignment = xlLeft    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 2).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .Font.Bold = True    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 3).Resize(UBound(vResult, 1) - 1, 2)        .FormatConditions.Delete        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _            Formula1:="0"        .FormatConditions(1).Font.ColorIndex = 50        .FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _            Formula1:="0"        .FormatConditions(2).Font.ColorIndex = 3        .NumberFormat = "#,##0.00"    End With            With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 5).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "0%"    End With        ActiveWorkbook.Sheets(sVResult).Activate        'add the color scale    ActiveWorkbook.Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 2).Resize(UBound(vResult, 1) - 1, 1).Select        Selection.FormatConditions.AddColorScale ColorScaleType:=3    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _        xlConditionValueLowestValue    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor        .Color = 7039480        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _        xlConditionValuePercentile    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor        .Color = 8711167        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _        xlConditionValueHighestValue    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor        .Color = 8109667        .TintAndShade = 0    End With            'add the color scale for pct rank    ActiveWorkbook.Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + 5).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddDatabar    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax    End With    With Selection.FormatConditions(1).BarColor        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).BarFillType = xlDataBarFillGradient    Selection.FormatConditions(1).Direction = xlContext    Selection.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor    Selection.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid    Selection.FormatConditions(1).NegativeBarFormat.BorderColorType = _        xlDataBarColor    With Selection.FormatConditions(1).BarBorder.Color        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic    With Selection.FormatConditions(1).AxisColor        .Color = 0        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.Color        .Color = 255        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.BorderColor        .Color = 255        .TintAndShade = 0    End With                    'ratio formatting    With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1).Resize(1, UBound(vResult_Bis, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter    End With    With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1).Resize(UBound(vResult, 1) - 1, 3)        .BorderAround Weight:=xlMedium    End With       With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 2).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .HorizontalAlignment = xlCenter        .Font.Bold = True    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1 + 2).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0%"        .HorizontalAlignment = xlCenter            End With        ActiveWorkbook.Sheets("3. Volatilities").Activate        'add the color scale for current value vol ratio    ActiveWorkbook.Sheets(sVResult).Activate    Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1 + 1).Resize(UBound(vResult, 1) - 1, 1).Select       Selection.FormatConditions.AddColorScale ColorScaleType:=3    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _        xlConditionValueLowestValue    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor        .Color = 8109667        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _        xlConditionValuePercentile    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor        .Color = 8711167        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _        xlConditionValueHighestValue    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor        .Color = 7039480        .TintAndShade = 0    End With    'add the color scale for ratio current value    ActiveWorkbook.Sheets(sVResult).Activate    Sheets(sVResult).Range("N6").Offset(iOffset + 1, 2 * UBound(vResult_Percentiles, 2) + 6 + 7 + UBound(vResult, 2) + 1 + 2).Resize(UBound(vResult, 1) - 1, 1).Select        Selection.FormatConditions.AddDatabar    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax    End With    With Selection.FormatConditions(1).BarColor        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).BarFillType = xlDataBarFillGradient    Selection.FormatConditions(1).Direction = xlContext    Selection.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor    Selection.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid    Selection.FormatConditions(1).NegativeBarFormat.BorderColorType = _        xlDataBarColor    With Selection.FormatConditions(1).BarBorder.Color        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic    With Selection.FormatConditions(1).AxisColor        .Color = 0        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.Color        .Color = 255        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.BorderColor        .Color = 255        .TintAndShade = 0    End With        ActiveWorkbook.Sheets("3. Volatilities").Activate            'implied volatility percentile results Formating    For i = 2 To UBound(vResult_Percentiles, 1)        For j = 2 To UBound(vResult_Percentiles, 2)            vResult_Percentiles(i, j) = 0.01 * vResult_Percentiles(i, j)        Next j    Next i       Dim vResult_PercentilesT() As Variant   vResult_PercentilesT = Application.Transpose(vResult_Percentiles)         If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Alphabetic" Then        vResult_PercentilesT(1, 1) = -1        vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)        vResult_PercentilesT(1, 1) = "Tickers"        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If    If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Percentile" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult_PercentilesT(), 9, "desc")        Else            Call order(vResult_PercentilesT(), 9, "asc")        End If        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If        If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Current Value" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult_PercentilesT(), 7, "desc")        Else            Call order(vResult_PercentilesT(), 7, "asc")        End If        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If              With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(1, UBound(vResult_Percentiles, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter        .NumberFormat = "#,##0.00%"    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(2, UBound(vResult_Percentiles, 2) - 1)        .NumberFormat = "#,##0.00%"        .BorderAround Weight:=xlMedium    End With    Dim k As Integer        For k = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.Size = 8        Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.Bold = True'        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Value < Sheets(sVResult).Range("N6").Offset(iOffset + 1, k).Value Then'            Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.ColorIndex = 50'        End If'        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Value > Sheets(sVResult).Range("N6").Offset(iOffset + 5, k).Value Then'            Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.ColorIndex = 3'        End If    Next k        'add the color scale    ActiveWorkbook.Sheets(sVResult).Activate    Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).NumberFormat = "0%"    Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).Select    Selection.FormatConditions.AddIconSetCondition    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .ReverseOrder = False        .ShowIconOnly = False        .IconSet = ActiveWorkbook.IconSets(xl3TrafficLights1)    End With    Selection.FormatConditions(1).IconCriteria(1).Icon = xlIconGreenCircle    With Selection.FormatConditions(1).IconCriteria(2)        .Type = xlConditionValueNumber        .Value = 0.33        .Operator = 7        .Icon = xlIconYellowCircle    End With    With Selection.FormatConditions(1).IconCriteria(3)        .Type = xlConditionValueNumber        .Value = 0.67        .Operator = 7        .Icon = xlIconRedCircleWithBorder    End With        ActiveWorkbook.Sheets("3. Volatilities").Activate''    ' short selection for powerpoint presentation    If UBound(vResult, 1) > 5 Then        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2)).Value = Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(6, UBound(vResult, 2)).Value        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(6, UBound(vResult, 2)).Copy        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2)).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _        SkipBlanks:=False, Transpose:=False        With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2))            .BorderAround Weight:=xlMedium            .Font.Size = 7        End With    Else        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Copy                Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2)).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _        SkipBlanks:=False, Transpose:=False                With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2))            .BorderAround Weight:=xlMedium            .Font.Size = 7        End With        End IfEnd SubSub Formating_TS(sVResult As String, iOffset As Integer, vResult() As Variant, vResult_Percentiles As Variant)            If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Alphabetic" Then        vResult(1, 1) = -1        vResult = SortArray(vResult, 1, True)        vResult(1, 1) = "Tickers"        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    End If    If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Percentile" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult(), 9, "desc")        Else             Call order(vResult(), 9, "asc")        End If        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    End If        If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Current Value" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult(), 5, "desc")        Else            Call order(vResult(), 5, "asc")        End If        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    End If        With Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(1, UBound(vResult, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter            End With    With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 1).Resize(UBound(vResult, 1) - 1, 1)        .HorizontalAlignment = xlLeft    End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 2).Resize(UBound(vResult, 1) - 1, 2)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"    End With            With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 4).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .Font.Bold = True    End With            With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 5).Resize(UBound(vResult, 1) - 1, 3)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _            Formula1:="0"        .FormatConditions(1).Font.ColorIndex = 50        .FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _            Formula1:="0"        .FormatConditions(2).Font.ColorIndex = 3            End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 8).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "0%"    End With        ActiveWorkbook.Sheets(sVResult).Activate        'add the color scale    ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, 8).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddColorScale ColorScaleType:=3    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _        xlConditionValueLowestValue    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor        .Color = 8109667        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _        xlConditionValuePercentile    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor        .Color = 8711167        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _        xlConditionValueHighestValue    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor        .Color = 7039480        .TintAndShade = 0    End With            ' add the color scale for pct rank    ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, 4).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddDatabar    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax    End With    With Selection.FormatConditions(1).BarColor        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).BarFillType = xlDataBarFillGradient    Selection.FormatConditions(1).Direction = xlContext    Selection.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor    Selection.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid    Selection.FormatConditions(1).NegativeBarFormat.BorderColorType = _        xlDataBarColor    With Selection.FormatConditions(1).BarBorder.Color        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic    With Selection.FormatConditions(1).AxisColor        .Color = 0        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.Color        .Color = 255        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.BorderColor        .Color = 255        .TintAndShade = 0    End With        ActiveWorkbook.Sheets("3. Volatilities").Activate        'implied volatility results Formating    For i = 2 To UBound(vResult_Percentiles, 2)        vResult_Percentiles(9, i) = 0.01 * vResult_Percentiles(9, i)    Next i        Dim vResult_PercentilesT() As Variant    vResult_PercentilesT = Application.Transpose(vResult_Percentiles)      If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Alphabetic" Then        vResult_PercentilesT(1, 1) = -1        vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)        vResult_PercentilesT(1, 1) = "Tickers"        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If    If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Percentile" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult_PercentilesT(), 9, "desc")        Else            Call order(vResult_PercentilesT(), 9, "asc")        End If        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If        If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Current Value" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult_PercentilesT(), 7, "desc")        Else            Call order(vResult_PercentilesT(), 7, "asc")        End If        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If        With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(1, UBound(vResult_Percentiles, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter        .NumberFormat = "#,##0.00"    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(2, UBound(vResult_Percentiles, 2) - 1)        .NumberFormat = "#,##0.00"        .BorderAround Weight:=xlMedium    End With        Dim k As Integer        For k = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.Size = 8        Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.Bold = True'        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Value < Sheets(sVResult).Range("N6").Offset(iOffset + 1, k).Value Then'            Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.ColorIndex = 50'        End If'        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Value > Sheets(sVResult).Range("N6").Offset(iOffset + 5, k).Value Then'            Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.ColorIndex = 3'        End If    Next k        With Sheets(sVResult).Range("N6").Offset(iOffset + 8, 0).Resize(2, UBound(vResult_Percentiles, 2))        .NumberFormat = "#,##0.0%"        .Borders(xlEdgeTop).Weight = xlThin    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 8, 0)         .Borders(xlEdgeRight).Weight = xlThin    End With        ActiveWorkbook.Sheets(sVResult).Activate        Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).NumberFormat = "0%"        Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).Select    Selection.FormatConditions.AddIconSetCondition    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .ReverseOrder = False        .ShowIconOnly = False        .IconSet = ActiveWorkbook.IconSets(xl3TrafficLights1)    End With    Selection.FormatConditions(1).IconCriteria(1).Icon = xlIconGreenCircle    With Selection.FormatConditions(1).IconCriteria(2)        .Type = xlConditionValueNumber        .Value = 0.33        .Operator = 7        .Icon = xlIconYellowCircle    End With    With Selection.FormatConditions(1).IconCriteria(3)        .Type = xlConditionValueNumber        .Value = 0.67        .Operator = 7        .Icon = xlIconRedCircleWithBorder    End With        ActiveWorkbook.Sheets("3. Volatilities").Activate        'add the color scale'    ActiveWorkbook.Sheets(sVResult).Activate'    If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Current Value" Then'        Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).Select'    Else'        Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).Select'    End If''    Selection.FormatConditions.AddColorScale ColorScaleType:=3'    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority'    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _'        xlConditionValueLowestValue'    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor'        .Color = 8109667'        .TintAndShade = 0'    End With'    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _'        xlConditionValuePercentile'    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50'    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor'        .Color = 8711167'        .TintAndShade = 0'    End With'    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _'        xlConditionValueHighestValue'    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor'        .Color = 7039480'        .TintAndShade = 0'    End With'     ActiveWorkbook.Sheets("3. Volatilities").Activate           ' short selection for powerpoint presentation    If UBound(vResult, 1) > 5 Then        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2)).Value = Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(6, UBound(vResult, 2)).Value        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(6, UBound(vResult, 2)).Copy        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2)).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _        SkipBlanks:=False, Transpose:=False        With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2))            .BorderAround Weight:=xlMedium            .Font.Size = 7        End With    Else        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Copy                Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2)).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _        SkipBlanks:=False, Transpose:=False                With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2))            .BorderAround Weight:=xlMedium            .Font.Size = 7        End With        End If                With Sheets(sVResult).Range("N6").Offset(iOffset, UBound(vResult_Percentiles, 2) + 2).Resize(1, UBound(vResult_Percentiles, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With                With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2).Resize(2, 1)        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End WithEnd SubSub Formating_Smile(sVResult As String, iOffset As Integer, vResult() As Variant, vResult_Percentiles As Variant)       If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Alphabetic" Then        vResult(1, 1) = -1        vResult = SortArray(vResult, 1, True)        vResult(1, 1) = "Tickers"        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    End If    If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Percentile" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult(), 9, "desc")        Else             Call order(vResult(), 9, "asc")        End If        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    End If        If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Current Value" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult(), 5, "desc")        Else            Call order(vResult(), 5, "asc")        End If        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    End If        With Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(1, UBound(vResult, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        With Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2))        .BorderAround Weight:=xlMedium        .HorizontalAlignment = xlCenter            End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 2).Resize(UBound(vResult, 1) - 1, 2)        .FormatConditions.Delete        .NumberFormat = "#,##0.00"            End With            With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 1).Resize(UBound(vResult, 1) - 1, 1)        .HorizontalAlignment = xlLeft    End With            With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 4).Resize(UBound(vResult, 1) - 1, 1)        .Font.Bold = True        .FormatConditions.Delete        .NumberFormat = "#,##0.00"    End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 5).Resize(UBound(vResult, 1) - 1, 3)            .FormatConditions.Delete        .NumberFormat = "#,##0.00"        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _            Formula1:="0"        .FormatConditions(1).Font.ColorIndex = 50        .FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _            Formula1:="0"        .FormatConditions(2).Font.ColorIndex = 3            End With        With Sheets(sVResult).Range("B6").Offset(1 + iOffset, 8).Resize(UBound(vResult, 1) - 1, 1)        .FormatConditions.Delete        .NumberFormat = "0%"    End With    If Sheets("3. Volatilities").Range("ATM_normalized").Value = True Then        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(2, UBound(vResult_Percentiles, 2) - 1)            .NumberFormat = "#,##0.00"            .BorderAround Weight:=xlMedium        End With    Else        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 3).Resize(2, UBound(vResult_Percentiles, 2) - 1)            .NumberFormat = "#,##0.00%"            .BorderAround Weight:=xlMedium        End With        End If    ActiveWorkbook.Sheets(sVResult).Activate    'add the color scale    ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, 8).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddColorScale ColorScaleType:=3    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _        xlConditionValueLowestValue    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor        .Color = 8109667        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _        xlConditionValuePercentile    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor        .Color = 8711167        .TintAndShade = 0    End With    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _        xlConditionValueHighestValue    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor        .Color = 7039480        .TintAndShade = 0    End With            'add the color scale for pct rank    ActiveWorkbook.Sheets(sVResult).Range("B6").Offset(1 + iOffset, 4).Resize(UBound(vResult, 1) - 1, 1).Select    Selection.FormatConditions.AddDatabar    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax    End With    With Selection.FormatConditions(1).BarColor        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).BarFillType = xlDataBarFillGradient    Selection.FormatConditions(1).Direction = xlContext    Selection.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor    Selection.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid    Selection.FormatConditions(1).NegativeBarFormat.BorderColorType = _        xlDataBarColor    With Selection.FormatConditions(1).BarBorder.Color        .Color = 13012579        .TintAndShade = 0    End With    Selection.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic    With Selection.FormatConditions(1).AxisColor        .Color = 0        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.Color        .Color = 255        .TintAndShade = 0    End With    With Selection.FormatConditions(1).NegativeBarFormat.BorderColor        .Color = 255        .TintAndShade = 0    End With        ActiveWorkbook.Sheets("3. Volatilities").Activate        'implied volatility results Formating    If Sheets("3. Volatilities").Range("ATM_normalized").Value = False Then        For i = 2 To UBound(vResult_Percentiles, 1)            For j = 2 To UBound(vResult_Percentiles, 2)                vResult_Percentiles(i, j) = 0.01 * vResult_Percentiles(i, j)            Next j        Next i    Else        For j = 2 To UBound(vResult_Percentiles, 2)            vResult_Percentiles(9, j) = 0.01 * vResult_Percentiles(9, j)        Next j    End If        Dim vResult_PercentilesT() As Variant    vResult_PercentilesT = Application.Transpose(vResult_Percentiles)       If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Alphabetic" Then        vResult_PercentilesT(1, 1) = -1        vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)        vResult_PercentilesT(1, 1) = "Tickers"        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If    If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Percentile" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult_PercentilesT(), 9, "desc")        Else            Call order(vResult_PercentilesT(), 9, "asc")        End If        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If        If Sheets("3. Volatilities").Range("Percentile_OrderBy").Value = "Current Value" Then        If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then            Call order(vResult_PercentilesT(), 7, "desc")        Else            Call order(vResult_PercentilesT(), 7, "asc")        End If        Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)    End If                With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(1, UBound(vResult_Percentiles, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        If Sheets("3. Volatilities").Range("ATM_normalized").Value = True Then            With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2))            .BorderAround Weight:=xlMedium            .HorizontalAlignment = xlCenter            .NumberFormat = "#,##0.00"        End With    Else        With Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2))            .BorderAround Weight:=xlMedium            .HorizontalAlignment = xlCenter            .NumberFormat = "#,##0.00%"        End With    End If    With Sheets(sVResult).Range("N6").Offset(iOffset + 8, 0).Resize(2, UBound(vResult_Percentiles, 2))        .NumberFormat = "#,##0.0%"        .Borders(xlEdgeTop).Weight = xlThin    End With        With Sheets(sVResult).Range("N6").Offset(iOffset + 8, 0)         .Borders(xlEdgeRight).Weight = xlThin    End With        ActiveWorkbook.Sheets(sVResult).Activate        Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).NumberFormat = "0%"    Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).Select    Selection.FormatConditions.AddIconSetCondition    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority    With Selection.FormatConditions(1)        .ReverseOrder = False        .ShowIconOnly = False        .IconSet = ActiveWorkbook.IconSets(xl3TrafficLights1)    End With    Selection.FormatConditions(1).IconCriteria(1).Icon = xlIconGreenCircle    With Selection.FormatConditions(1).IconCriteria(2)        .Type = xlConditionValueNumber        .Value = 0.33        .Operator = 7        .Icon = xlIconYellowCircle            End With    With Selection.FormatConditions(1).IconCriteria(3)        .Type = xlConditionValueNumber        .Value = 0.67        .Operator = 7        .Icon = xlIconRedCircleWithBorder    End With        ActiveWorkbook.Sheets("3. Volatilities").Activate        'add the color scale'    ActiveWorkbook.Sheets(sVResult).Activate'    If Sheets("3. Volatilities").Range("Summary_OrderBy").Value = "Current Value" Then'        Sheets(sVResult).Range("N6").Offset(iOffset + 6, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).Select'    Else'        Sheets(sVResult).Range("N6").Offset(iOffset + 8, 1).Resize(1, UBound(vResult_Percentiles, 2) - 1).Select'    End If''    Selection.FormatConditions.AddColorScale ColorScaleType:=3'    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority'    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _'        xlConditionValueLowestValue'    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor'        .Color = 8109667'        .TintAndShade = 0'    End With'    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _'        xlConditionValuePercentile'    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50'    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor'        .Color = 8711167'        .TintAndShade = 0'    End With'    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _'        xlConditionValueHighestValue'    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor'        .Color = 7039480'        .TintAndShade = 0'    End With'     ActiveWorkbook.Sheets("3. Volatilities").Activate'            Dim k As Integer        For k = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.Size = 8        Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.Bold = True'        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Value < Sheets(sVResult).Range("N6").Offset(iOffset + 1, k).Value Then'            Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.ColorIndex = 50'        End If'        If Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Value > Sheets(sVResult).Range("N6").Offset(iOffset + 5, k).Value Then'            Sheets(sVResult).Range("N6").Offset(iOffset + 6, k).Font.ColorIndex = 3'        End If    Next k        'data for graph            With Sheets(sVResult).Range("N6").Offset(iOffset, UBound(vResult_Percentiles, 2) + 2).Resize(1, UBound(vResult_Percentiles, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With            With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2).Resize(2, 1)        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        ' short selection for powerpoint presentation        If UBound(vResult, 1) > 5 Then        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2)).Value = Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(6, UBound(vResult, 2)).Value        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(6, UBound(vResult, 2)).Copy                Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2)).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _        SkipBlanks:=False, Transpose:=False        With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(6, UBound(vResult, 2))            .BorderAround Weight:=xlMedium            .Font.Size = 7        End With    Else        Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Copy                Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2)).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _        SkipBlanks:=False, Transpose:=False                With Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 4).Resize(UBound(vResult, 1), UBound(vResult, 2))            .BorderAround Weight:=xlMedium            .Font.Size = 7        End With        End IfEnd SubSub Write_IV_Results(sVResult As String, iOffset As Integer, maturity As String, moneyness1 As String, vResult() As Variant, vResult_Percentiles() As Variant, vResult_PercentilesT() As Variant)        'transpose the percentile results in order to sort the table    vResult_PercentilesT = Application.Transpose(vResult_Percentiles)        ' ***** write title    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value = maturity & "_" & moneyness1 & "% IMPLIED VOLATILITY"    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Font.Bold = True    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Font.Size = 12        ' ***** order IV Results    If Sheets("3. Volatilities").Range("Select_IV").Value = "Top" Then        If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Alphabetic" Then            vResult(1, 1) = -1            vResult = SortArray(vResult, 1, True)            vResult(1, 1) = "Tickers"            vResult_PercentilesT(1, 1) = -1            vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)            vResult_PercentilesT(1, 1) = "Tickers"        Else            If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Percentile" Then                Call order(vResult(), 6, "desc")                Call order(vResult_PercentilesT(), 9, "desc")            Else                If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Current Value" Then                    Call order(vResult(), 3, "desc")                    Call order(vResult_PercentilesT(), 7, "desc")                End If            End If        End If    Else        If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Alphabetic" Then            vResult(1, 1) = -1            vResult = SortArray(vResult, 1, True)            vResult(1, 1) = "Tickers"            vResult_PercentilesT(1, 1) = -1            vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)            vResult_PercentilesT(1, 1) = "Tickers"        Else                    If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Percentile" Then                Call order(vResult(), 6, "asc")                Call order(vResult_PercentilesT(), 7, "asc")            Else                If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Current Value" Then                    Call order(vResult(), 3, "asc")                    Call order(vResult_PercentilesT(), 9, "asc")                End If            End If        End If    End If        ' ***** write IV Results        'first part: for the percentiles    Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    'second part: for the current value    Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        ' ***** write implied volatility percentile results    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Value = maturity & "_" & moneyness1 & "% IMPLIED VOLATILITY"    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Font.Bold = True    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Font.Size = 12    Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)        ' tranform in percentage    For i = 1 To UBound(vResult_Percentiles, 2) - 1        For j = 1 To 8            Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value = 0.01 * Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value        Next j    Next i        'data for graph: min and max for error bars        Sheets(sVResult).Range("N6").Offset(iOffset, UBound(vResult_Percentiles, 2) + 2).Resize(1, UBound(vResult_Percentiles, 2)).Value = Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(1, UBound(vResult_Percentiles, 2)).Value    Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2).Value = "Graph Min Value"        For i = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 2, i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 1, i).Value        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value    Next i        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2).Value = "Graph Max Value"        For i = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 5, i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 4, i).Value        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value    Next iEnd SubSub Write_IVR_Results(sVResult As String, iOffset As Integer, maturity As String, realized_vol_maturity As String, moneyness As String, vResult() As Variant, vResult_Percentiles() As Variant, vResult_PercentilesT() As Variant, vResult_Bis() As Variant)        vResult_PercentilesT = Application.Transpose(vResult_Percentiles)        'Write volatility ratio results    'title    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value = maturity & "_" & moneyness & "% IMPLIED / " & realized_vol_maturity & " REALIZED VOLATILITY SPREAD"    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Font.Bold = True    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Font.Size = 12    'order    If Sheets("3. Volatilities").Range("Select_IVRV").Value = "Top" Then            If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Alphabetic" Then            vResult(1, 1) = -1            vResult = SortArray(vResult, 1, True)            vResult(1, 1) = "Tickers"            vResult_PercentilesT(1, 1) = -1            vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)            vResult_PercentilesT(1, 1) = "Tickers"        Else            If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Percentile" Then                Call order(vResult(), 6, "desc")                Call order(vResult_PercentilesT(), 9, "desc")                Call order(vResult_Bis(), 3, "desc")            Else                If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Current Value" Then                    Call order(vResult(), 3, "desc")                    Call order(vResult_PercentilesT(), 7, "desc")                    Call order(vResult_Bis(), 2, "desc")                End If            End If        End If    Else        If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Alphabetic" Then            vResult(1, 1) = -1            vResult = SortArray(vResult, 1, True)            vResult(1, 1) = "Tickers"            vResult_PercentilesT(1, 1) = -1            vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)            vResult_PercentilesT(1, 1) = "Tickers"        Else            If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Percentile" Then                Call order(vResult(), 6, "asc")                Call order(vResult_PercentilesT(), 9, "asc")                Call order(vResult_Bis(), 3, "asc")            Else                If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Current Value" Then                    Call order(vResult(), 3, "asc")                    Call order(vResult_PercentilesT(), 7, "asc")                    Call order(vResult_Bis(), 2, "asc")                End If            End If        End If    End If    'write results    Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult    'second part: for the current value    Sheets(sVResult).Range("N6").Offset(iOffset, 2 * UBound(vResult_Percentiles, 2) + 6 + 7).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        Sheets(sVResult).Range("B6").Offset(iOffset, UBound(vResult, 2) + 1).Resize(UBound(vResult_Bis, 1), UBound(vResult_Bis, 2)).Value = vResult_Bis            ' ***** write implied volatility percentile results    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Value = maturity & "_" & moneyness & "% IMPLIED -  REALIZED VOLATILITY SPREAD"    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Font.Bold = True    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Font.Size = 12    Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)        ' tranform in percentage    For i = 1 To UBound(vResult_Percentiles, 2) - 1        For j = 1 To 8            Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value = 0.01 * Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value        Next j    Next i        'data for graph    Sheets(sVResult).Range("N6").Offset(iOffset, UBound(vResult_Percentiles, 2) + 2).Resize(1, UBound(vResult_Percentiles, 2)).Value = Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(1, UBound(vResult_Percentiles, 2)).Value    With Sheets(sVResult).Range("N6").Offset(iOffset, UBound(vResult_Percentiles, 2) + 2).Resize(1, UBound(vResult_Percentiles, 2))        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End With        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2).Value = "Graph Min Value"        For i = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 2, i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 1, i).Value        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value    Next i        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2).Value = "Graph Max Value"        For i = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 5, i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 4, i).Value        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value    Next i        With Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2).Resize(2, 1)        .Interior.ColorIndex = 13        .Font.ColorIndex = 2        .Font.Bold = True        .BorderAround Weight:=xlMedium    End WithEnd SubSub Write_TS_Results(sVResult As String, iOffset As Integer, maturity1 As String, maturity2 As String, moneyness As String, vResult() As Variant, vResult_Percentiles() As Variant, vResult_PercentilesT() As Variant)        vResult_PercentilesT = Application.Transpose(vResult_Percentiles)        'write Term Structure results    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value = maturity1 & "-" & maturity2 & "_" & moneyness & "% TERM STRUCTURE (" & maturity2 & " Vol / " & maturity1 & ")"    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Font.Bold = True    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Font.Size = 12        If Sheets("3. Volatilities").Range("Select_IVRV").Value = "Top" Then        If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Alphabetic" Then            vResult(1, 1) = -1            vResult = SortArray(vResult, 1, True)            vResult(1, 1) = "Tickers"            vResult_PercentilesT(1, 1) = -1            vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)            vResult_PercentilesT(1, 1) = "Tickers"        Else            If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Percentile" Then                Call order(vResult(), 9, "desc")                Call order(vResult_PercentilesT(), 9, "desc")            Else                If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Current Value" Then                    Call order(vResult(), 5, "desc")                    Call order(vResult_PercentilesT(), 7, "desc")                End If            End If        End If    Else        If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Alphabetic" Then            vResult(1, 1) = -1            vResult = SortArray(vResult, 1, True)            vResult(1, 1) = "Tickers"            vResult_PercentilesT(1, 1) = -1            vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)            vResult_PercentilesT(1, 1) = "Tickers"        Else            If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Percentile" Then                Call order(vResult(), 8, "asc")                Call order(vResult_PercentilesT(), 9, "asc")            Else                If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Current Value" Then                    Call order(vResult(), 5, "asc")                    Call order(vResult_PercentilesT(), 7, "asc")                End If            End If        End If    End If        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        ' ***** write implied volatility percentile results    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Value = maturity1 & "-" & maturity2 & "_" & moneyness & "% TERM STRUCTURE (" & maturity2 & " Vol / " & maturity1 & ")"    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Font.Bold = True    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Font.Size = 12    Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)        ' tranform in percentage    For i = 1 To UBound(vResult_Percentiles, 2) - 1        For j = 1 To 8            Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value        Next j    Next i    'data for graph    Sheets(sVResult).Range("N6").Offset(iOffset, UBound(vResult_Percentiles, 2) + 2).Resize(1, UBound(vResult_Percentiles, 2)).Value = Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(1, UBound(vResult_Percentiles, 2)).Value    Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2).Value = "Graph Min Value"    For i = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 2, i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 1, i).Value        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value    Next i        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2).Value = "Graph Max Value"        For i = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 5, i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 4, i).Value        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value    Next iEnd SubSub Write_Smile_Results(sVResult As String, iOffset As Integer, moneyness1 As String, moneyness2 As String, maturity As String, vResult() As Variant, vResult_Percentiles() As Variant, vResult_PercentilesT() As Variant, normalized As Boolean)    vResult_PercentilesT = Application.Transpose(vResult_Percentiles)    'Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value = "SMILE (" & maturity & ", " & moneyness1 & "% / " & moneyness2 & "%)"    If normalized Then        Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value = "SMILE ( " & maturity & ", (" & moneyness1 & "% - " & moneyness2 & "%) / 100% Normalized Smile)"    Else        Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value = "SMILE (" & maturity & ", " & moneyness1 & "% - " & moneyness2 & "% Smile)"    End If            Sheets(sVResult).Range("B4").Offset(iOffset, 0).Font.Bold = True    Sheets(sVResult).Range("B4").Offset(iOffset, 0).Font.Size = 12        'order    If Sheets("3. Volatilities").Range("Select_IVRV").Value = "Top" Then        If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Alphabetic" Then            vResult(1, 1) = -1            vResult = SortArray(vResult, 1, True)            vResult(1, 1) = "Tickers"            vResult_PercentilesT(1, 1) = -1            vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)            vResult_PercentilesT(1, 1) = "Tickers"        Else            If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Percentile" Then                Call order(vResult(), 9, "desc")                Call order(vResult_PercentilesT(), 9, "desc")            Else                If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Current Value" Then                    Call order(vResult(), 5, "desc")                    Call order(vResult_PercentilesT(), 7, "desc")                End If            End If        End If    Else        If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Alphabetic" Then            vResult(1, 1) = -1            vResult = SortArray(vResult, 1, True)            vResult(1, 1) = "Tickers"            vResult_PercentilesT(1, 1) = -1            vResult_PercentilesT = SortArray(vResult_PercentilesT, 1, True)            vResult_PercentilesT(1, 1) = "Tickers"        Else            If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Percentile" Then                Call order(vResult(), 8, "asc")                Call order(vResult_PercentilesT(), 9, "asc")            Else                If Sheets("3. Volatilities").Range("BoxPlot_OrderBy").Value = "Current Value" Then                    Call order(vResult(), 5, "asc")                    Call order(vResult_PercentilesT(), 7, "asc")                End If            End If        End If    End If        Sheets(sVResult).Range("B6").Offset(iOffset, 0).Resize(UBound(vResult, 1), UBound(vResult, 2)).Value = vResult        ' ***** write implied volatility percentile results    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Value = Sheets(sVResult).Range("B4").Offset(iOffset, 0).Value    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Font.Bold = True    Sheets(sVResult).Range("N4").Offset(iOffset, 0).Font.Size = 12    Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(UBound(vResult_Percentiles, 1), UBound(vResult_Percentiles, 2)).Value = Application.Transpose(vResult_PercentilesT)        ' tranform in percentage    If Not normalized Then        For i = 1 To UBound(vResult_Percentiles, 2) - 1            For j = 1 To 8                Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value = 0.01 * Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value            Next j        Next i    Else        j = 8        For i = 1 To UBound(vResult_Percentiles, 2) - 1            Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value = 0.01 * Sheets(sVResult).Range("N6").Offset(iOffset + j, i).Value        Next i    End If        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2).Value = "Graph Min Value"    Sheets(sVResult).Range("N6").Offset(iOffset, UBound(vResult_Percentiles, 2) + 2).Resize(1, UBound(vResult_Percentiles, 2)).Value = Sheets(sVResult).Range("N6").Offset(iOffset, 0).Resize(1, UBound(vResult_Percentiles, 2)).Value        For i = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 2, i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 1, i).Value        Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 1, UBound(vResult_Percentiles, 2) + 2 + i).Value    Next i        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2).Value = "Graph Max Value"        For i = 1 To UBound(vResult_Percentiles, 2) - 1        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 5, i).Value - Sheets(sVResult).Range("N6").Offset(iOffset + 4, i).Value        Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value = Sheets(sVResult).Range("N6").Offset(iOffset + 2, UBound(vResult_Percentiles, 2) + 2 + i).Value    Next iEnd SubFunction SortArray(myarray, iPivot As Integer, bIncreasing As Boolean)    Dim vInput As Variant    Dim left, Right As Long        vInput = myarray    left = LBound(vInput)    Right = UBound(vInput)    Call QuickSort(vInput, iPivot, left, Right, bIncreasing)    SortArray = vInputEnd FunctionFunction swap(ByRef values As Variant, ByVal i As Long, ByVal j As Long) As Variant  Dim Temp As Variant  Dim k As Integer  For k = 1 To UBound(values, 2)    Temp = values(i, k)    values(i, k) = values(j, k)    values(j, k) = Temp  Next k  swap = valuesEnd FunctionPrivate Function QuickSort(ByRef vInput, ByVal iPivot As Integer, Optional ByVal left As Long, Optional ByVal Right As Long, Optional ByVal bIncreasing As Boolean) As Variant  Dim i As Long  Dim j As Long  Dim k As Long  Dim Item1 As Variant  Dim Item2 As Variant  If IsMissing(left) Or left = 0 Then left = LBound(vInput)  If IsMissing(Right) Or Right = 0 Then Right = UBound(vInput)  If IsMissing(bIncreasing) Then bIncreasing = True  i = left  j = Right  If bIncreasing Then        Item1 = vInput((left + Right) \ 2, iPivot)          While i < j              While vInput(i, iPivot) < Item1 And i < Right                  i = i + 1              Wend              While vInput(j, iPivot) > Item1 And j > left                  j = j - 1              Wend              If i < j Then                  Call swap(vInput, i, j)              End If              If i <= j Then                  i = i + 1                  j = j - 1              End If         Wend                If j > left Then Call QuickSort(vInput, iPivot, left, j, bIncreasing)        If i < Right Then Call QuickSort(vInput, iPivot, i, Right, bIncreasing)          QuickSort = vInput          Exit Function  Else        Item1 = vInput((left + Right) \ 2, iPivot)          While i < j              While vInput(i, iPivot) > Item1 And i < Right                  i = i + 1              Wend              While vInput(j, iPivot) < Item1 And j > left                  j = j - 1              Wend              If i < j Then                  Call swap(vInput, i, j)              End If              If i <= j Then                  i = i + 1                  j = j - 1              End If         Wend                If j > left Then Call QuickSort(vInput, iPivot, left, j, bIncreasing)        If i < Right Then Call QuickSort(vInput, iPivot, i, Right, bIncreasing)          QuickSort = vInput          Exit Function  End IfQuickSort = vInputEnd Function
