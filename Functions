Private session As blpapicomLib.sessionSub px_OI_analysis(main_results As Variant, end_date As Date, start_date As Date, v_mavg() As Long)Dim ticker As StringDim v_prices() As SingleDim v_OI() As Single'''' database connection'Dim opt_DB As Database'Set opt_DB = OpenDatabase(Sh_InputTech.Range(CStr("D14")))'''' for each name in listFor i = 0 To UBound(main_results, 1)ticker = CStr(main_results(i, 0))Dim retur As String: retur = ""''''' historical prices via database'histo_prices = DB_Functions.get_histo_datas(ticker, "PX_LAST", start_date, end_date, Opt_DB, retur)''' init bloom Set session = New blpapicomLib.session session.Start session.OpenService ("//blp/refdata")Dim histo_prices As VariantDim fields(0) As Variant: fields(0) = "PX_LAST"histo_prices = M_BloomFunctions.M_GetHistoricalData(ticker, fields(), start_date, end_date, "DAILY", session)Dim histo_OI_call As Variantfields(0) = "OPEN_INT_TOTAL_CALL"histo_OI_call = M_BloomFunctions.M_GetHistoricalData(ticker, fields(), start_date, end_date, "DAILY", session)Dim histo_OI_put As Variantfields(0) = "OPEN_INT_TOTAL_PUT"histo_OI_put = M_BloomFunctions.M_GetHistoricalData(ticker, fields(), start_date, end_date, "DAILY", session)'''' retreats data'''' if historical range is nothing or too shortDim no_load As Boolean: no_load = False'If retur = "No data" Or retur = "Ticker not found" Then'no_load = True'GoTo 1'End IfIf UBound(histo_prices, 1) < 50 Thenno_load = TrueGoTo 1End If'''' if last historical date <> last date from selected rangeIf histo_prices(UBound(histo_prices, 1), 0) <> end_date Thenretur = "Last date not loaded"no_load = TrueGoTo 1End If'''' else continueReDim v_prices(UBound(histo_prices)) As SingleFor j = 0 To UBound(histo_prices, 1)v_prices(j) = CSng(histo_prices(j, 1))Next j'''' change current to last prices, OI call/in main resultsmain_results(i, 1) = "$" & Format(CStr(v_prices(UBound(v_prices))), "#,##0.00")'''''''' statistical analysis on prices'''' 52 weeks highs/lowsDim Week_HL As StringCall Weeks_hilo(v_prices(), Week_HL)main_results(i, 2) = Format(CStr(Week_HL), "#,##0.00") ''& "%"'''''''' Relative Strenght IndexDim rsi As StringCall RSI_level(v_prices(), 14, rsi)main_results(i, 3) = Format(CStr(rsi), "#,##0.00") ''& "%"'''''''' moving average analysis on pricesDim upbound0 As IntegerIf i = 0 Thenupbound0 = 3ReDim Preserve main_results(UBound(main_results, 1), upbound0 + (UBound(v_mavg) + 2) * 3)End IfFor k = 0 To UBound(v_mavg)Dim each_mavg() As Singleeach_mavg = mavg(v_prices(), v_mavg(k), main_results(i, upbound0 + 3 * k + 1), main_results(i, upbound0 + 3 * k + 2), _    main_results(i, upbound0 + 3 * k + 3))'''' mavg comparisonIf k = UBound(v_mavg) ThenDim each_mavg1() As Singleeach_mavg = mavg(v_prices(), v_mavg(0), t1, t2, t3)each_mavg1 = mavg(v_prices(), v_mavg(1), t1, t2, t3)Call compare_mavg(each_mavg, each_mavg1, main_results(i, upbound0 + 3 * (k + 1) + 1), main_results(i, upbound0 + 3 * (k + 1) + 2), _    main_results(i, upbound0 + 3 * (k + 1) + 3))    End If    Next k'''' statistical analysis on open interest'''' if historical range too shortIf UBound(histo_OI_call, 1) < 50 Or UBound(histo_OI_put, 1) < 50 Then'If IsEmpty(histo_OI_call) ThenGoTo 1End If'''' size the arrayIf UBound(histo_OI_call, 1) > UBound(histo_OI_put, 1) ThenReDim v_OI(UBound(histo_OI_put, 1), 1) As SingleElseIf UBound(histo_OI_call, 1) < UBound(histo_OI_put, 1) ThenReDim v_OI(UBound(histo_OI_call, 1), 1) As SingleElseReDim v_OI(UBound(histo_OI_put, 1), 1) As SingleEnd IfFor j = 0 To UBound(v_OI)v_OI(j, 0) = CSng(histo_OI_call(j, 1))v_OI(j, 1) = CSng(histo_OI_put(j, 1))Next j'''' size main arrayDim upbound1 As IntegerIf i = 0 Thenupbound1 = UBound(main_results, 2)ReDim Preserve main_results(UBound(main_results, 1), UBound(main_results, 2) + 10)End If'''' OI on callCall OI_volume(v_OI(), 5, "call", main_results(i, upbound1 + 1), main_results(i, upbound1 + 2), main_results(i, upbound1 + 3))'''' OI on putCall OI_volume(v_OI(), 5, "put", main_results(i, upbound1 + 4), main_results(i, upbound1 + 5), main_results(i, upbound1 + 6))'''' OI RatioCall call_put_ratio(v_OI(), main_results(i, upbound1 + 7), main_results(i, upbound1 + 8), main_results(i, upbound1 + 9))Dim tickers(0) As String: tickers(0) = tickerDim m_fi(1) As Variant: m_fi(0) = "EXPECTED_REPORT_DT": m_fi(1) = "BDVD_PROJ_DIV_AMT"'''' earningsmain_results(i, upbound1 + 10) = M_BloomFunctions.M_GetStaticData(tickers, m_fi, session)1:If no_load = True Thenmain_results(i, 1) = returEnd IfIf UBound(main_results) <> 0 Then    '''' display progress    If i < UBound(main_results, 1) Then    Application.StatusBar = Format(CStr((i + 1) / UBound(main_results, 1) * 100), "#,##0.00") & "% Progress"    Else    Application.StatusBar = Format(CStr(i / UBound(main_results, 1) * 100), "#,##0.00") & "% Progress"    End IfEnd IfNext iEnd SubSub Weeks_hilo(v_prices() As Single, level As String)Dim high As SingleDim low As Singlehigh = WorksheetFunction.Max(v_prices())low = WorksheetFunction.Min(v_prices())level = (v_prices(UBound(v_prices)) - low) / (high - low) ''* 100End SubSub RSI_level(v_prices() As Single, nb_d As Integer, level As String)Dim sumUp As Double: sumUp = 0Dim avgUp As Double: avgUp = 0Dim sumDown As Double: sumDown = 0Dim avgDown As Double: avgDown = 0For i = nb_d To UBound(v_prices)    If i = nb_d Then        '''' if first        For j = i - nb_d + 1 To i            If v_prices(j) > v_prices(j - 1) Then            sumUp = sumUp + v_prices(j) - v_prices(j - 1)            ElseIf v_prices(j) < v_prices(j - 1) Then            sumDown = sumDown + v_prices(j - 1) - v_prices(j)            End If        Next j                avgUp = sumUp / nb_d        avgDown = sumDown / nb_d            Else        '''' if next        If v_prices(i) > v_prices(i - 1) Then        avgUp = (avgUp * (nb_d - 1) + (v_prices(i) - v_prices(i - 1))) / nb_d        avgDown = (avgDown * (nb_d - 1)) / nb_d        ElseIf v_prices(i) < v_prices(i - 1) Then        avgDown = (avgDown * (nb_d - 1) + (v_prices(i - 1) - v_prices(i))) / nb_d        avgUp = (avgUp * (nb_d - 1)) / nb_d        Else        avgUp = (avgUp * (nb_d - 1)) / nb_d        avgDown = (avgDown * (nb_d - 1)) / nb_d        End If        End If    Next ilevel = 1 - 1 / (1 + avgUp / avgDown)End SubFunction mavg(v_prices() As Single, days As Long, trends, level, trends_lenght) As Single()Dim output() As SingleDim arr_mavg() As SingleIf UBound(v_prices) > days ThenReDim arr_mavg(UBound(v_prices) - days + 1, 1)Elsetrends = "N/A"relative_level = "N/A"trends_lenght = "N/A"ReDim output(UBound(v_prices) + 1)mavg = outputExit FunctionEnd IfReDim output(UBound(v_prices) - days + 1)'''' compute moving averageFor i = days To UBound(v_prices) + 1m_sum = 0m_average = 0    For j = i - days To i - 1    m_sum = m_sum + v_prices(j)    Next j        m_average = m_sum / days        '''' output    output(i - days) = m_average        '''' analyse    arr_mavg(i - days, 0) = v_prices(i - 1)    arr_mavg(i - days, 1) = m_average    Next i'''''''' determine wether last price is above or below mavg and for how many daysIf arr_mavg(UBound(arr_mavg), 0) > arr_mavg(UBound(arr_mavg), 1) Then''' means price > mavgtrends = "up"'relative_level = Format(CStr((arr_mavg(UBound(arr_mavg), 0) / arr_mavg(UBound(arr_mavg), 1) - 1) * 100), "#,##0.00") ''& "%"level = Format(CStr(arr_mavg(UBound(arr_mavg), 1)), "#,##0.00")trends_lenght = 0Do While arr_mavg(UBound(arr_mavg) - trends_lenght, 0) > arr_mavg(UBound(arr_mavg) - trends_lenght, 1)trends_lenght = trends_lenght + 1If trends_lenght > UBound(arr_mavg) ThenGoTo 1End IfLoopElseIf arr_mavg(UBound(arr_mavg), 0) < arr_mavg(UBound(arr_mavg), 1) Then''' means price < mavgtrends = "down"'relative_level = Format(CStr((arr_mavg(UBound(arr_mavg), 0) / arr_mavg(UBound(arr_mavg), 1) - 1) * 100), "#,##0.00") ''& "%"level = Format(CStr(arr_mavg(UBound(arr_mavg), 1)), "#,##0.00")trends_lenght = 0Do While arr_mavg(UBound(arr_mavg) - trends_lenght, 0) < arr_mavg(UBound(arr_mavg) - trends_lenght, 1)trends_lenght = trends_lenght + 1If trends_lenght > UBound(arr_mavg) ThenGoTo 1End IfLoopElse''' means price = mavgtrends = "equal"level = Format(CStr(arr_mavg(UBound(arr_mavg), 1)), "#,##0.00")trends_lenght = 0End If1:mavg = outputEnd FunctionSub compare_mavg(mavg20() As Single, mavg50() As Single, trends, level, trends_lenght)'''' check zerosFor i = 0 To UBound(mavg50)If mavg50(i) = 0 Thentrends = "N/A"relative_level = "N/A"trends_lenght = "N/A"Exit SubEnd IfNext iIf mavg20(UBound(mavg20)) > mavg50(UBound(mavg50)) Then''' means mavg20 > mavg50trends = "up"'relative_level = Format(CStr((mavg20(UBound(mavg20)) / mavg50(UBound(mavg50)) - 1) * 100), "#,##0.00") ''& "%"level = Format(mavg20(UBound(mavg20)) - mavg50(UBound(mavg50)), "#,##0.00")trends_lenght = 0Do While mavg20(UBound(mavg20) - trends_lenght) > mavg50(UBound(mavg50) - trends_lenght)trends_lenght = trends_lenght + 1If trends_lenght > UBound(mavg50) ThenExit SubEnd IfLoopElseIf mavg20(UBound(mavg20)) < mavg50(UBound(mavg50)) Then''' means mavg20 < mavg50trends = "down"'relative_level = Format(CStr((mavg20(UBound(mavg20)) / mavg50(UBound(mavg50)) - 1) * 100), "#,##0.00") ''& "%"level = Format(mavg20(UBound(mavg20)) - mavg50(UBound(mavg50)), "#,##0.00")trends_lenght = 0Do While mavg20(UBound(mavg20) - trends_lenght) < mavg50(UBound(mavg50) - trends_lenght)trends_lenght = trends_lenght + 1If trends_lenght > UBound(mavg50) ThenExit SubEnd IfLoopElse''' means price = mavgtrends = "equal"level = Format(mavg20(UBound(mavg20)) - mavg50(UBound(mavg50)), "#,##0.00")trends_lenght = 0End IfEnd SubSub OI_volume(v_OI() As Single, nbdays As Integer, tipe As String, last_OI, average_OI, level)Dim to_day As Single: to_day = 0Dim sum As Single: sum = 0Dim ratio_average As Single: ratio_average = 0Dim t As IntegerIf tipe = "call" Thent = 0ElseIf tipe = "put" Thent = 1End IfFor i = UBound(v_OI, 1) - nbdays To UBound(v_OI, 1) - 1'to_day = v_OI(i, 0) + v_OI(i, 1)sum = sum + v_OI(i, t)Next ilast_OI = v_OI(UBound(v_OI), t) ''+ v_OI(UBound(v_OI), 1)average_OI = sum / nbdayslevel = last_OI / average_OIlast_OI = Format(CStr(last_OI), "###,###,##0")average_OI = Format(CStr(average_OI), "###,###,##0")level = Format(CStr(level), "#,##0.00") ''& "%"End SubSub call_put_ratio(v_OI() As Single, last_ratio_cp, average_ratio_cp, spread)Dim ratio As Single: ratio = 0Dim sum As Single: sum = 0Dim ratio_average As Single: ratio_average = 0For i = 0 To UBound(v_OI, 1)ratio = v_OI(i, 0) / v_OI(i, 1)sum = sum + ratioNext ilast_ratio_cp = v_OI(UBound(v_OI), 0) / v_OI(UBound(v_OI), 1) ''* 100average_ratio_cp = sum / (UBound(v_OI) + 1) ''* 100spread = last_ratio_cp - average_ratio_cplast_ratio_cp = Format(CStr(last_ratio_cp), "#,##0.00") ''& "%"average_ratio_cp = Format(CStr(average_ratio_cp), "#,##0.00") ''& "%"spread = Format(CStr(spread), "#,##0.00") ''& "%"End SubSub IV_analysis(v_IV() As Single, v_inputs() As Long, v_outputs() As String)ReDim v_outputs(UBound(v_inputs))Dim variation As SingleFor i = 0 To UBound(v_inputs)If v_inputs(i) <= UBound(v_IV) Thenvariation = (v_IV(UBound(v_IV)) / v_IV(UBound(v_IV) - v_inputs(i)) - 1) * 100v_outputs(i) = Format(CStr(variation), "#,##0.00") ''& "%"Elsev_outputs(i) = "N/A"End IfNext iEnd Sub
