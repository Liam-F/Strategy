Private session As blpapicomLib.sessionSub m_analyse2()Dim start_date As Datestart_date = Sheets("4. Single Stock Report").Range("startdate").ValueDim end_date As Dateend_date = Sheets("4. Single Stock Report").Range("enddate").ValuedGap = 500dLineWeight = 0.75iMarkerSize = 4iLabelSize = 6iAxesTitleSize = 7iHeightBox_Plot = 200iWidthBox_Plot = 380iHeightScatter_Plot = 200iWidthScatter_Plot = 380Dim start_date_perc As DateDim strOpenPwd As String: strOpenPwd = ";pwd=123456"Dim opt_db As DatabaseSet opt_db = OpenDatabase(Sheets("1. Fill DB").Range("FillDB_path").Value, _                            Options:=True, _                            ReadOnly:=False, _                            Connect:=strOpenPwd)Dim lft As DoubleDim global_results() As VariantReDim global_results(1, 23)Dim small_tick As StringDim dss As Stringsmall_tick = Cells(3, 2)If Len(small_tick) > 7 Then    If Right(small_tick, 7) = " Equity" Then        small_tick = left(small_tick, Len(small_tick) - 7)    End IfEnd If'user parametersDim maturity, maturity1, maturity2 As StringDim moneyness As StringDim moneyness1, moneyness2 As StringDim realized_vol_maturity As IntegerDim percentile_days As IntegerDim fld As StringDim vResult_Percentiles(1 To 9, 1 To 6) As VariantvResult_Percentiles(1, 1) = "Ticker"vResult_Percentiles(2, 1) = "5% Percentile"vResult_Percentiles(3, 1) = "25% Percentile"vResult_Percentiles(4, 1) = "Median"vResult_Percentiles(5, 1) = "75% Percentile"vResult_Percentiles(6, 1) = "95% Percentile"vResult_Percentiles(7, 1) = "Current Value"vResult_Percentiles(8, 1) = "Last Week"vResult_Percentiles(9, 1) = "Current Percentile"'''' Add percentile up and down ''''global_results(0, 0) = "Ticker"global_results(1, 0) = small_tickvResult_Percentiles(1, 2) = small_tickvResult_Percentiles(1, 3) = small_tickvResult_Percentiles(1, 4) = small_tickvResult_Percentiles(1, 5) = small_tickvResult_Percentiles(1, 6) = small_tick''''' Implied volatility analysis''''        Dim histo_vM() As Variant    maturity = Sheets("4. Single Stock Report").Range("implied_maturity").Value    moneyness = Sheets("4. Single Stock Report").Range("implied_moneyness").Value * 100    percentile_days = Sheets("4. Single Stock Report").Range("implied_percentile").Value    start_date_perc = CDate(end_date - percentile_days)        fld = maturity & "_" & moneyness        histo_vM = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)        If dss = 1 Then    MsgBox ("Error: no data for this ticker")    Exit Sub    End If        '''' changes over 1D    global_results(0, 1) = "1D Change"    global_results(1, 1) = changes(histo_vM(), nb_days_before(histo_vM(), end_date, 1, dss), end_date, "level", dss)        '''' last vol    global_results(0, 2) = "Last Level"    global_results(1, 2) = date_data(histo_vM(), end_date, 1)        '''' changes over 5D    global_results(0, 3) = "5D Change"    global_results(1, 3) = changes(histo_vM(), nb_days_before(histo_vM(), end_date, 5, dss), end_date, "level", dss)        '''' changes MTD    global_results(0, 4) = "MTD Change"    global_results(1, 4) = changes(histo_vM(), first_date_month(histo_vM(), end_date, dss), end_date, "level", dss)        '''' percentrank(last) over one year    global_results(0, 5) = "PercentRank"    global_results(1, 5) = percent_rank(histo_vM(), start_date_perc, end_date, dss)                vResult_Percentiles(2, 2) = percentile_value(histo_vM(), start_date_perc, end_date, 0.05) '5%    vResult_Percentiles(3, 2) = percentile_value(histo_vM(), start_date_perc, end_date, 0.25) '1Q    vResult_Percentiles(4, 2) = percentile_value(histo_vM(), start_date_perc, end_date, 0.5) ' median    vResult_Percentiles(5, 2) = percentile_value(histo_vM(), start_date_perc, end_date, 0.75) ' 3Q    vResult_Percentiles(6, 2) = percentile_value(histo_vM(), start_date_perc, end_date, 0.95)  ' 95%    vResult_Percentiles(7, 2) = histo_vM(UBound(histo_vM), 1)  'spot    vResult_Percentiles(8, 2) = histo_vM(UBound(histo_vM) - 5, 1) 'last week    vResult_Percentiles(9, 2) = Round(percent_rank(histo_vM(), start_date_perc, end_date, dss) * 100, 0)        '''' Implied-Realized Analysis ''''    Dim histo_prices() As Variant        histo_prices = get_histo_datas(small_tick, "PX_LAST", #1/1/2009#, end_date, opt_db, dss)        Dim rsi As Double        rsi = stock_rsi(histo_prices(), 1, 14)    maturity = Sheets("4. Single Stock Report").Range("maturity_implied_realized").Value    moneyness = Sheets("4. Single Stock Report").Range("moneyness_implied_realized").Value * 100    percentile_days = Sheets("4. Single Stock Report").Range("implied_realized_perc").Value    start_date_perc = CDate(end_date - percentile_days)    realized_vol_maturity = Sheets("4. Single Stock Report").Range("maturity_realized").Value    debut = debut + 1    fld = maturity & "_" & moneyness    If UBound(histo_prices) > 0 Then        Dim m_returns() As Variant        m_returns = returns(histo_prices)        Dim histo_real() As Variant        If (UBound(m_returns) > realized_vol_maturity) Then            histo_real = real_vol(m_returns, realized_vol_maturity)                       Dim histo_impl() As Variant                        histo_impl = get_histo_datas(small_tick, fld, #1/1/2009#, end_date, opt_db, dss)            If UBound(histo_real) > 0 And UBound(histo_impl) > 0 Then                Dim spread_IR() As Variant                spread_IR = term_structure_ratio_and_spread(histo_real, histo_impl)                                For t = 0 To UBound(spread_IR, 1)                    spread_IR(t, 1) = spread_IR(t, 1) / 100                Next t                                        '''' last implied vol                global_results(0, 6) = "IR Spread"                global_results(1, 6) = date_data(spread_IR(), end_date, 1)                            '''' last realized vol                global_results(0, 7) = "1D Change"                global_results(1, 7) = changes(spread_IR(), nb_days_before(spread_IR(), end_date, 1, dss), end_date, "level", dss)                            '''' Imp-Real spread 5D move                global_results(0, 8) = "5D Change"                global_results(1, 8) = changes(spread_IR(), nb_days_before(spread_IR(), end_date, 5, dss), end_date, "level", dss)                            '''' Imp-Real spread MTD move                global_results(0, 9) = "MTD Change"                global_results(1, 9) = changes(spread_IR(), first_date_month(spread_IR(), end_date, dss), end_date, "level", dss)                            '''' Imp-Real spread percentrank(last) over one year                global_results(0, 10) = "PercentRank"                global_results(1, 10) = percent_rank(spread_IR(), start_date_perc, end_date, dss)                                                vResult_Percentiles(2, 3) = percentile_value(histo_real(), start_date_perc, end_date, 0.05) '5%                vResult_Percentiles(3, 3) = percentile_value(histo_real(), start_date_perc, end_date, 0.25) '1Q                vResult_Percentiles(4, 3) = percentile_value(histo_real(), start_date_perc, end_date, 0.5) ' median                vResult_Percentiles(5, 3) = percentile_value(histo_real(), start_date_perc, end_date, 0.75) ' 3Q                vResult_Percentiles(6, 3) = percentile_value(histo_real(), start_date_perc, end_date, 0.95)  ' 95%                vResult_Percentiles(7, 3) = histo_real(UBound(histo_real), 1)  'spot                vResult_Percentiles(8, 3) = histo_real(UBound(histo_real) - 5, 1) 'last week                vResult_Percentiles(9, 3) = Round(percent_rank(histo_real(), start_date_perc, end_date, dss) * 100, 0)                                vResult_Percentiles(2, 4) = percentile_value(spread_IR(), start_date_perc, end_date, 0.05) '5%                vResult_Percentiles(3, 4) = percentile_value(spread_IR(), start_date_perc, end_date, 0.25) '1Q                vResult_Percentiles(4, 4) = percentile_value(spread_IR(), start_date_perc, end_date, 0.5) ' median                vResult_Percentiles(5, 4) = percentile_value(spread_IR(), start_date_perc, end_date, 0.75) ' 3Q                vResult_Percentiles(6, 4) = percentile_value(spread_IR(), start_date_perc, end_date, 0.95)  ' 95%                vResult_Percentiles(7, 4) = spread_IR(UBound(spread_IR), 1)  'spot                vResult_Percentiles(8, 4) = spread_IR(UBound(spread_IR) - 5, 1) 'last week                vResult_Percentiles(9, 4) = Round(percent_rank(spread_IR(), start_date_perc, end_date, dss) * 100, 0)            End If        End If    End If            ''''' Term Structure Analysis ''''    '''' 1st mat    percentile_days = Sheets("4. Single Stock Report").Range("TS_percentiles").Value    start_date_perc = CDate(end_date - percentile_days)    Dim histo_1() As Variant    moneyness = Sheets("4. Single Stock Report").Range("TS_moneyness").Value * 100    maturity1 = Sheets("4. Single Stock Report").Range("TS_maturity_short").Value    fld = maturity1 & "_" & moneyness    histo_1 = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    '''' 2nd mat    Dim histo_2() As Variant    maturity2 = Sheets("4. Single Stock Report").Range("TS_maturity_long").Value    fld = maturity2 & "_" & moneyness    histo_2 = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    Dim term_st_rs() As Variant    term_st_rs = term_structure_ratio_and_spread(histo_1, histo_2)    global_results(0, 12) = maturity1 & " / " & maturity2    global_results(1, 12) = date_data(term_st_rs(), end_date, 1)    global_results(0, 13) = maturity1 & " - " & maturity2    global_results(1, 13) = date_data(term_st_rs(), end_date, 2)    global_results(0, 14) = "1D Change"    global_results(1, 14) = changes(term_st_rs(), nb_days_before(term_st_rs(), end_date, 1, dss), end_date, "level", dss)    global_results(0, 15) = "5D Change"    global_results(1, 15) = changes(term_st_rs(), nb_days_before(term_st_rs(), end_date, 5, dss), end_date, "level", dss)    global_results(0, 16) = "MTD Change"    global_results(1, 16) = changes(term_st_rs(), first_date_month(term_st_rs(), end_date, dss), end_date, "level", dss)    global_results(0, 17) = "PercentRank"    global_results(1, 17) = percent_rank(term_st_rs(), start_date, end_date, dss)        vResult_Percentiles(2, 5) = percentile_value(term_st_rs(), start_date_perc, end_date, 0.05) '5%    vResult_Percentiles(3, 5) = percentile_value(term_st_rs(), start_date_perc, end_date, 0.25) '1Q    vResult_Percentiles(4, 5) = percentile_value(term_st_rs(), start_date_perc, end_date, 0.5) ' median    vResult_Percentiles(5, 5) = percentile_value(term_st_rs(), start_date_perc, end_date, 0.75) ' 3Q    vResult_Percentiles(6, 5) = percentile_value(term_st_rs(), start_date_perc, end_date, 0.95)  ' 95%    vResult_Percentiles(7, 5) = term_st_rs(UBound(term_st_rs), 1)  'spot    vResult_Percentiles(8, 5) = term_st_rs(UBound(term_st_rs) - 5, 1) 'last week    vResult_Percentiles(9, 5) = Round(percent_rank(term_st_rs(), start_date_perc, end_date, dss) * 100, 0)''''''' Skew Analysis ''''    percentile_days = Sheets("4. Single Stock Report").Range("smile_percentile").Value    start_date_perc = CDate(end_date - percentile_days)    maturity = Sheets("4. Single Stock Report").Range("smile_maturity").Value    '''' 90    moneyness1 = Sheets("4. Single Stock Report").Range("moneyness_low").Value * 100    fld = maturity & "_" & moneyness1    Dim histo_ninety() As Variant    histo_ninety = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    '''' 110    Dim histo_oneten() As Variant    moneyness2 = Sheets("4. Single Stock Report").Range("moneyness_high").Value * 100    fld = maturity & "_" & moneyness2    histo_oneten = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    ''''100    Dim histo_atm() As Variant    histo_atm = get_histo_datas(small_tick, maturity & "_100", start_date, end_date, opt_db, dss)    Dim v_skew() As Variant        If Sheets("4. Single Stock Report").Range("Smile_normalized").Value = True Then        v_skew = skew(histo_ninety, histo_oneten, histo_atm, True)    Else        v_skew = skew(histo_ninety, histo_oneten, histo_atm, False)    End If    global_results(0, 18) = "Last Smile"    global_results(1, 18) = date_data(v_skew(), end_date, 1)    global_results(0, 19) = "1D Change"    global_results(1, 19) = changes(v_skew(), nb_days_before(v_skew(), end_date, 1, dss), end_date, "level", dss)    global_results(0, 20) = "5D Change"    global_results(1, 20) = changes(v_skew(), nb_days_before(v_skew(), end_date, 5, dss), end_date, "level", dss)    global_results(0, 21) = "MTD Change"    global_results(1, 21) = changes(v_skew(), first_date_month(v_skew(), end_date, dss), end_date, "level", dss)    global_results(0, 22) = "PercentRank"    global_results(1, 22) = percent_rank(v_skew(), start_date_perc, end_date, dss)    vResult_Percentiles(2, 6) = percentile_value(v_skew(), start_date_perc, end_date, 0.05) '5%    vResult_Percentiles(3, 6) = percentile_value(v_skew(), start_date_perc, end_date, 0.25) '1Q    vResult_Percentiles(4, 6) = percentile_value(v_skew(), start_date_perc, end_date, 0.5) ' median    vResult_Percentiles(5, 6) = percentile_value(v_skew(), start_date_perc, end_date, 0.75) ' 3Q    vResult_Percentiles(6, 6) = percentile_value(v_skew(), start_date_perc, end_date, 0.95)  ' 95%    vResult_Percentiles(7, 6) = v_skew(UBound(v_skew), 1)  'spot    vResult_Percentiles(8, 6) = v_skew(UBound(v_skew) - 5, 1) 'last week    vResult_Percentiles(9, 6) = Round(percent_rank(v_skew(), start_date_perc, end_date, dss) * 100, 0)'''''' MAVGDim mav_d(3) As Long:mav_d(0) = Sheets("4. Single Stock Report").Range("MA_1").Valuemav_d(1) = Sheets("4. Single Stock Report").Range("MA_2").Valuemav_d(2) = Sheets("4. Single Stock Report").Range("MA_3").Valuemav_d(3) = Sheets("4. Single Stock Report").Range("MA_4").ValueDim mav() As Variant: mav = mavg(histo_prices, mav_d)Dim main_results As VariantReDim main_results(0, 3)main_results(0, 0) = small_tick'Call Functions.px_OI_analysis(main_results, end_date, start_date, mav_d)'main_results(0, 0) = DB_Functions.get_name_db(small_tick, opt_db)'Call single_stock_rpt(small_tick, global_results, main_results, histo_vM, spread_IR, term_st_rs, v_skew, volmat)opt_db.CloseSh_SingleStockRes.ActivateRange("A1").SelectCells.ClearContentsCells.Font.ColorIndex = 1'Dim name As StringDim Technical_date As Datename = Sheets("4. Single Stock Report").Range("Name").ValueRange("B1") = main_results(0, 0) & " - " & nameRange("B4") = "TECHNICAL ANALYSIS"'PriceTechnical_date = CDate(Sheets("4. Single Stock Report").Range("enddate").Value)Spot = date_data(histo_prices(), Technical_date, 1)Range("B6") = "Last Price": Range("C6") = SpotTechnical_date = CDate(Sheets("4. Single Stock Report").Range("enddate").Value - 365)Range("B7") = "52-Week Level": Range("C7") = histo_prices(UBound(histo_prices, 1) - 52 * 5, 1)Technical_date = CDate(Sheets("4. Single Stock Report").Range("enddate").Value - 14)Range("B8") = "RSI 14D": Range("C8") = rsi / 100'Moving Average'1Technical_date = CDate(Sheets("4. Single Stock Report").Range("enddate").Value)MA_Value = Round(date_data(mav(), Technical_date, 2), 2)If MA_Value < Spot Then    Status = "Up"Else:    Status = "Down"End IfRange("B10") = "MAVG " & mav_d(0) & "D": Range("C10") = StatusRange("B11") = "Level " & mav_d(0) & "D": Range("C11") = MA_ValueRange("B12") = "For (#days)": Range("C12") = for_how_long_up_or_down(mav(), 1, 2)'2Technical_date = CDate(Sheets("4. Single Stock Report").Range("enddate").Value)MA_Value = Round(date_data(mav(), Technical_date, 3), 2)If MA_Value < Spot Then    Status = "Up"Else:    Status = "Down"End IfRange("B14") = "MAVG " & mav_d(1) & "D": Range("C14") = StatusRange("B15") = "Level " & mav_d(1) & "D": Range("C15") = MA_ValueRange("B16") = "For (#days)": Range("C16") = for_how_long_up_or_down(mav(), 1, 3)'3Technical_date = CDate(Sheets("4. Single Stock Report").Range("enddate").Value)MA_Value = Round(date_data(mav(), Technical_date, 4), 2)If MA_Value < Spot Then    Status = "Up"Else:    Status = "Down"End IfRange("B18") = "MAVG " & mav_d(2) & "D": Range("C18") = StatusRange("B19") = "Level " & mav_d(2) & "D": Range("C19") = MA_ValueRange("B20") = "For (#days)": Range("C20") = for_how_long_up_or_down(mav(), 1, 4)'4Technical_date = CDate(Sheets("4. Single Stock Report").Range("enddate").Value)MA_Value = Round(date_data(mav(), Technical_date, 5), 2)If MA_Value < Spot Then    Status = "Up"Else:    Status = "Down"End IfRange("B22") = "MAVG " & mav_d(3) & "D": Range("C22") = StatusRange("B23") = "Level " & mav_d(3) & "D": Range("C23") = MA_ValueRange("B24") = "For (#days)": Range("C24") = for_how_long_up_or_down(mav(), 1, 5)'ratioIf Range("B15") < Range("B19") Then    Status = "Down"Else:    Status = "Up"End IfRange("B26") = mav_d(2) & "D / " & mav_d(3) & "D": Range("C26") = StatusRange("B27") = "Level " & mav_d(2) & "D / " & mav_d(3) & "D": Range("C27") = Range("C19") / Range("C23")Range("B28") = "For (#days)": Range("C28") = for_how_long_up_or_down(mav(), 3, 5)'IMPLIED VOL RESULTSmaturity = Sheets("4. Single Stock Report").Range("implied_maturity").Valuemoneyness = Sheets("4. Single Stock Report").Range("implied_moneyness").Value * 100Range("B46") = "IMPLIED VOLATILIY " & maturity & "_" & moneyness & "%"Cells(1 + 46, 2) = "Last level"Cells(2 + 46, 2) = "1D Change"Cells(3 + 46, 2) = "5D Change"Cells(4 + 46, 2) = "MTD Change"Cells(5 + 46, 2) = "Current Percentile"Cells(1 + 46, 3) = global_results(1, 2)Cells(2 + 46, 3) = global_results(1, 1)Cells(3 + 46, 3) = global_results(1, 3)Cells(4 + 46, 3) = global_results(1, 4)Cells(5 + 46, 3) = global_results(1, 5)'IMPLIED-REALIZED RESULTSmaturity = Sheets("4. Single Stock Report").Range("maturity_implied_realized").Valuemoneyness = Sheets("4. Single Stock Report").Range("moneyness_implied_realized").Value * 100realized_vol_maturity = Sheets("4. Single Stock Report").Range("maturity_realized").ValueRange("B64") = "IMPLIED VOLATILIY " & maturity & "_" & moneyness & "% / " & realized_vol_maturity & "D REALIZED VOLATILITY"Cells(6 + 59, 2) = "Last IV/RV"Cells(7 + 59, 2) = "1D Change"Cells(8 + 59, 2) = "5D Change"Cells(9 + 59, 2) = "MTD Change"Cells(10 + 59, 2) = "Current Percentile"Cells(6 + 59, 3) = Round(global_results(1, 6), 2)Cells(7 + 59, 3) = Round(global_results(1, 7), 2)Cells(8 + 59, 3) = Round(global_results(1, 8), 2)Cells(9 + 59, 3) = Round(global_results(1, 9), 2)Cells(10 + 59, 3) = Round(global_results(1, 10), 2)'REALIZED RESULTSRange("B83") = realized_vol_maturity & "D REALIZED VOLATILITY"Range("B84") = "Last realized"Range("B85") = "1D Change"Range("B86") = "5D Change"Range("B87") = "MTD Change"Range("B88") = "Current Percentile"Range("C84") = date_data(histo_real(), end_date, 1)Range("C85") = 100 * changes(histo_real(), nb_days_before(histo_real(), end_date, 1, dss), end_date, "level", dss)Range("C86") = 100 * changes(histo_real(), nb_days_before(histo_real(), end_date, 5, dss), end_date, "level", dss)Range("C87") = 100 * changes(histo_real(), first_date_month(histo_real(), end_date, dss), end_date, "level", dss)percentile_days = Sheets("4. Single Stock Report").Range("implied_realized_perc").Valuestart_date_perc = CDate(end_date - percentile_days)    Range("C88") = Round(percent_rank(histo_real(), start_date_perc, end_date, dss), 2)'term structuremoneyness = Sheets("4. Single Stock Report").Range("TS_moneyness").Value * 100maturity1 = Sheets("4. Single Stock Report").Range("TS_maturity_short").Valuematurity2 = Sheets("4. Single Stock Report").Range("TS_maturity_long").ValueRange("L46") = maturity1 & "-" & maturity2 & "_" & moneyness & "% TERM STRUCTURE (" & maturity2 & "/" & maturity1 & ")"'Cells(12 + 35, 12) = maturity2 & "/" & maturity1Cells(13 + 35, 12) = maturity2 & "-" & maturity1Cells(14 + 35, 12) = "1D Change"Cells(15 + 35, 12) = "5D Change"Cells(16 + 35, 12) = "MTD Change"Cells(17 + 35, 12) = "Current Percentile"Cells(12 + 35, 13) = Round(global_results(1, 12), 2)Cells(13 + 35, 13) = Round(global_results(1, 13), 2)Cells(14 + 35, 13) = Round(global_results(1, 14), 2)Cells(15 + 35, 13) = Round(global_results(1, 15), 2)Cells(16 + 35, 13) = Round(global_results(1, 16), 2)Cells(17 + 35, 13) = Round(global_results(1, 17), 2)'smilematurity = Sheets("4. Single Stock Report").Range("smile_maturity").Valuemoneyness1 = Sheets("4. Single Stock Report").Range("moneyness_low").Value * 100moneyness2 = Sheets("4. Single Stock Report").Range("moneyness_high").Value * 100If Sheets("4. Single Stock Report").Range("Smile_normalized").Value = True Then    Range("L64") = "SMILE ( " & maturity & ", (" & moneyness1 & "%-" & moneyness2 & "%) / 100% Normalized  Smile)"Else    Range("L64") = "SMILE ( " & maturity & ", (" & moneyness1 & "%-" & moneyness2 & "%) )"End IfCells(18 + 47, 12) = "Last Smile"Cells(19 + 47, 12) = "1D Change"Cells(20 + 47, 12) = "5D Change"Cells(21 + 47, 12) = "MTD Change"Cells(22 + 47, 12) = "Current Percentile"Cells(18 + 47, 13) = Round(global_results(1, 18), 2)Cells(19 + 47, 13) = Round(global_results(1, 19), 2)Cells(20 + 47, 13) = Round(global_results(1, 20), 2)Cells(21 + 47, 13) = Round(global_results(1, 21), 2)Cells(22 + 47, 13) = Round(global_results(1, 22), 2)'box plot data'implied volRange("B102").Value = Range("B46").Valuecolumn = 2For i = 1 To UBound(vResult_Percentiles, 1) - 1    Range("B102").Offset(i, 0).Value = vResult_Percentiles(i, 1)    Range("B102").Offset(i, 1).Value = vResult_Percentiles(i, column)    If i >= 2 Then        Range("B102").Offset(i, 1).Value = Range("B102").Offset(i, 1).Value / 100    End IfNext iRange("B102").Offset(i, 0).Value = vResult_Percentiles(i, 1)Range("B102").Offset(i, 1).Value = vResult_Percentiles(i, column) / 100i = i + 1Range("B102").Offset(i, 0).Value = "Error Min"Range("B102").Offset(i, 1).Value = Range("B102").Offset(i - 7, 1).Value - Range("B102").Offset(i - 8, 1).Valuei = i + 1Range("B102").Offset(i, 0).Value = "Error Max"Range("B102").Offset(i, 1).Value = Range("B102").Offset(i - 5, 1).Value - Range("B102").Offset(i - 6, 1).Value'create the box plot graphDim range_min As RangeSet range_min = Range("B102").Offset(i - 1, 1)Dim range_max As RangeSet range_max = Range("B102").Offset(i, 1)Dim range_tickers As RangeSet range_tickers = Range("B102").Offset(i - 10, 1)Dim vBoxPlotArray_spot(0) As DoublevBoxPlotArray_spot(0) = vResult_Percentiles(7, column) / 100Dim vBoxPlotArray_lastweek(0) As DoublevBoxPlotArray_lastweek(0) = vResult_Percentiles(8, column) / 100Dim vBoxPlotArray_median(0) As DoublevBoxPlotArray_median(0) = vResult_Percentiles(4, column) / 100Dim minValue As DoubleDim maxValue As DoubleminValue = 0.95 * vResult_Percentiles(2, column) / 100maxValue = 1.05 * vResult_Percentiles(6, column) / 100    Dim Array_names() As StringReDim Array_names(0) As StringArray_names(0) = vResult_Percentiles(1, column)Dim ch As ChartSet ch = ActiveSheet.ChartObjects("I_BP").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd Withch.Parent.Delete'chart creationSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=500).Chart            With chtChart        .ChartType = xlColumnStacked        .Parent.name = "I_BP"        .Parent.Height = hgt        .Parent.width = wdt        .Parent.top = top        .Parent.left = lft    End With    Dim sName As StringDim vBoxPlotArray(0) As Double'add points and formattingWith chtChart    iTop_BP = .Parent.top    .HasLegend = False    .Axes(xlValue, xlPrimary).MajorGridlines.Delete    .Axes(xlCategory, xlPrimary).MajorGridlines.Delete    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    ' Add each series    For iSrsIX = 0 To 2                If iSrsIX = 0 Then ' Q25%                vBoxPlotArray(0) = vResult_Percentiles(3, column) / 100                sName = "5% Percentile"            End If                            If iSrsIX = 1 Then  ' Box1: median -Q25                vBoxPlotArray(0) = (vResult_Percentiles(4, column) - vResult_Percentiles(3, column)) / 100                sName = "Box1"            End If                        If iSrsIX = 2 Then ' Box2: Q75 -median                vBoxPlotArray(0) = (vResult_Percentiles(5, column) - vResult_Percentiles(4, column)) / 100                sName = "Box2"            End If            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = sName                .values = vBoxPlotArray()                If iSrsIX = 0 Then                    .Interior.ColorIndex = xlNone                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                    Type:=xlCustom, Amount:=range_min, MinusValues:= _                    range_min                    .ErrorBars.Format.line.Weight = dLineWeight                End If                If iSrsIX = 1 Then                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If                If iSrsIX = 2 Then                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                    Type:=xlCustom, Amount:=range_max, MinusValues:= _                    range_max                    .ErrorBars.Format.line.Weight = dLineWeight                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If            End With    Next   .Axes(xlCategory, xlPrimary).CategoryNames = Array_names   .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0%"   .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize   .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).MaximumScale = maxValue    .Axes(xlValue, xlPrimary).MinimumScale = minValue    .Axes(xlValue).CrossesAt = minValue    .ChartGroups(1).GapWidth = dGap   'add the spot    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Current Value"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_spot()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDiamond        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End With    'add the spot last week    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Last Week"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_lastweek()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDash        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End WithEnd With'tsRange("l102").Value = Range("l46").Valuecolumn = 5For i = 1 To UBound(vResult_Percentiles, 1) - 1    Range("l102").Offset(i, 0).Value = vResult_Percentiles(i, 1)    Range("l102").Offset(i, 1).Value = vResult_Percentiles(i, column)Next iRange("l102").Offset(i, 0).Value = vResult_Percentiles(i, 1)Range("l102").Offset(i, 1).Value = vResult_Percentiles(i, column) / 100i = i + 1Range("l102").Offset(i, 0).Value = "Error Min"Range("l102").Offset(i, 1).Value = Range("l102").Offset(i - 7, 1).Value - Range("l102").Offset(i - 8, 1).Valuei = i + 1Range("l102").Offset(i, 0).Value = "Error Max"Range("l102").Offset(i, 1).Value = Range("l102").Offset(i - 5, 1).Value - Range("l102").Offset(i - 6, 1).ValueSet range_min = Range("l102").Offset(i - 1, 1)Set range_max = Range("l102").Offset(i, 1)Set range_tickers = Range("l102").Offset(i - 10, 1)vBoxPlotArray_spot(0) = vResult_Percentiles(7, column)vBoxPlotArray_lastweek(0) = vResult_Percentiles(8, column)vBoxPlotArray_median(0) = vResult_Percentiles(4, column)minValue = 0.95 * vResult_Percentiles(2, column)maxValue = 1.05 * vResult_Percentiles(6, column)    Array_names(0) = vResult_Percentiles(1, column)Set ch = ActiveSheet.ChartObjects("TS_BP").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd Withch.Parent.Delete'chart creationSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=500).Chart            With chtChart        .ChartType = xlColumnStacked        .Parent.name = "TS_BP"        .Parent.Height = hgt        .Parent.width = wdt        .Parent.top = top        .Parent.left = lft    End With'add points and formattingWith chtChart    iTop_BP = .Parent.top    .HasLegend = False    .Axes(xlValue, xlPrimary).MajorGridlines.Delete    .Axes(xlCategory, xlPrimary).MajorGridlines.Delete    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    ' Add each series    For iSrsIX = 0 To 2                If iSrsIX = 0 Then ' Q25%                vBoxPlotArray(0) = vResult_Percentiles(3, column)                sName = "5% Percentile"            End If                            If iSrsIX = 1 Then  ' Box1: median -Q25                vBoxPlotArray(0) = (vResult_Percentiles(4, column) - vResult_Percentiles(3, column))                sName = "Box1"            End If                        If iSrsIX = 2 Then ' Box2: Q75 -median                vBoxPlotArray(0) = (vResult_Percentiles(5, column) - vResult_Percentiles(4, column))                sName = "Box2"            End If            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = sName                .values = vBoxPlotArray()                If iSrsIX = 0 Then                    .Interior.ColorIndex = xlNone                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                    Type:=xlCustom, Amount:=range_min, MinusValues:= _                    range_min                    .ErrorBars.Format.line.Weight = dLineWeight                End If                If iSrsIX = 1 Then                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If                If iSrsIX = 2 Then                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                    Type:=xlCustom, Amount:=range_max, MinusValues:= _                    range_max                    .ErrorBars.Format.line.Weight = dLineWeight                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If            End With    Next   .Axes(xlCategory, xlPrimary).CategoryNames = Array_names   .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00"   .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize   .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).MaximumScale = maxValue    .Axes(xlValue, xlPrimary).MinimumScale = minValue    .Axes(xlValue).CrossesAt = minValue    .ChartGroups(1).GapWidth = dGap   'add the spot    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Current Value"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_spot()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDiamond        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End With    'add the spot last week    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Last Week"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_lastweek()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDash        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End WithEnd With'ratioRange("B120").Value = Range("B64").Valuecolumn = 4For i = 1 To UBound(vResult_Percentiles, 1) - 1    Range("B120").Offset(i, 0).Value = vResult_Percentiles(i, 1)    Range("B120").Offset(i, 1).Value = vResult_Percentiles(i, column)Next iRange("B120").Offset(i, 0).Value = vResult_Percentiles(i, 1)Range("B120").Offset(i, 1).Value = vResult_Percentiles(i, column) / 100i = i + 1Range("B120").Offset(i, 0).Value = "Error Min"Range("B120").Offset(i, 1).Value = Range("B120").Offset(i - 7, 1).Value - Range("B120").Offset(i - 8, 1).Valuei = i + 1Range("B120").Offset(i, 0).Value = "Error Max"Range("B120").Offset(i, 1).Value = Range("B120").Offset(i - 5, 1).Value - Range("B120").Offset(i - 6, 1).ValueSet range_min = Range("B120").Offset(i - 1, 1)Set range_max = Range("B120").Offset(i, 1)Set range_tickers = Range("B120").Offset(i - 10, 1)vBoxPlotArray_spot(0) = vResult_Percentiles(7, column)vBoxPlotArray_lastweek(0) = vResult_Percentiles(8, column)vBoxPlotArray_median(0) = vResult_Percentiles(4, column)minValue = 0.95 * vResult_Percentiles(2, column)maxValue = 1.05 * vResult_Percentiles(6, column)    Array_names(0) = vResult_Percentiles(1, column)Set ch = ActiveSheet.ChartObjects("IR_BP").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd Withch.Parent.Delete'chart creationSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=500).Chart            With chtChart        .ChartType = xlColumnStacked        .Parent.name = "IR_BP"        .Parent.Height = hgt        .Parent.width = wdt        .Parent.top = top        .Parent.left = lft    End With'add points and formattingWith chtChart    iTop_BP = .Parent.top    .HasLegend = False    .Axes(xlValue, xlPrimary).MajorGridlines.Delete    .Axes(xlCategory, xlPrimary).MajorGridlines.Delete    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    ' Add each series    For iSrsIX = 0 To 2                If iSrsIX = 0 Then ' Q25%                vBoxPlotArray(0) = vResult_Percentiles(3, column)                sName = "5% Percentile"            End If                            If iSrsIX = 1 Then  ' Box1: median -Q25                vBoxPlotArray(0) = (vResult_Percentiles(4, column) - vResult_Percentiles(3, column))                sName = "Box1"            End If                        If iSrsIX = 2 Then ' Box2: Q75 -median                vBoxPlotArray(0) = (vResult_Percentiles(5, column) - vResult_Percentiles(4, column))                sName = "Box2"            End If            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = sName                .values = vBoxPlotArray()                If iSrsIX = 0 Then                    .Interior.ColorIndex = xlNone                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                    Type:=xlCustom, Amount:=range_min, MinusValues:= _                    range_min                    .ErrorBars.Format.line.Weight = dLineWeight                End If                If iSrsIX = 1 Then                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If                If iSrsIX = 2 Then                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                    Type:=xlCustom, Amount:=range_max, MinusValues:= _                    range_max                    .ErrorBars.Format.line.Weight = dLineWeight                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If            End With    Next   .Axes(xlCategory, xlPrimary).CategoryNames = Array_names   .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00"   .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize   .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).MaximumScale = maxValue    .Axes(xlValue, xlPrimary).MinimumScale = minValue    .Axes(xlValue).CrossesAt = minValue    .ChartGroups(1).GapWidth = dGap   'add the spot    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Current Value"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_spot()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDiamond        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End With    'add the spot last week    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Last Week"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_lastweek()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDash        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End WithEnd With'smileRange("l120").Value = Range("l64").Valuecolumn = 6For i = 1 To UBound(vResult_Percentiles, 1) - 1    Range("l120").Offset(i, 0).Value = vResult_Percentiles(i, 1)     Range("l120").Offset(i, 1).Value = vResult_Percentiles(i, column)    If Sheets("4. Single Stock Report").Range("Smile_normalized").Value = False Then        If i >= 2 Then            Range("l120").Offset(i, 1).Value = Range("l120").Offset(i, 1).Value / 100        End If    End If   Next iRange("l120").Offset(i, 0).Value = vResult_Percentiles(i, 1)Range("l120").Offset(i, 1).Value = vResult_Percentiles(i, column) / 100If Sheets("4. Single Stock Report").Range("Smile_normalized").Value = False Then    coef = 0.01Else    coef = 1End Ifi = i + 1Range("l120").Offset(i, 0).Value = "Error Min"Range("l120").Offset(i, 1).Value = Range("l120").Offset(i - 7, 1).Value - Range("l120").Offset(i - 8, 1).Valuei = i + 1Range("l120").Offset(i, 0).Value = "Error Max"Range("l120").Offset(i, 1).Value = Range("l120").Offset(i - 5, 1).Value - Range("l120").Offset(i - 6, 1).ValueSet range_min = Range("l120").Offset(i - 1, 1)Set range_max = Range("l120").Offset(i, 1)Set range_tickers = Range("l120").Offset(i - 10, 1)vBoxPlotArray_spot(0) = vResult_Percentiles(7, column) * coefvBoxPlotArray_lastweek(0) = vResult_Percentiles(8, column) * coefvBoxPlotArray_median(0) = vResult_Percentiles(4, column) * coefIf vResult_Percentiles(2, column) < 0 Then    minValue = 1.1 * vResult_Percentiles(2, column) * coefElse    minValue = 0.95 * vResult_Percentiles(2, column) * coefEnd IfIf vResult_Percentiles(6, column) < 0 Then    maxValue = 0.95 * vResult_Percentiles(6, column) * coefElse    maxValue = 1.05 * vResult_Percentiles(6, column) * coefEnd If    Array_names(0) = vResult_Percentiles(1, column)Set ch = ActiveSheet.ChartObjects("S_BP").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd Withch.Parent.Delete'chart creationSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=500).Chart            With chtChart        .ChartType = xlColumnStacked        .Parent.name = "S_BP"        .Parent.Height = hgt        .Parent.width = wdt        .Parent.top = top        .Parent.left = lft    End With'add points and formattingWith chtChart    iTop_BP = .Parent.top    .HasLegend = False    .Axes(xlValue, xlPrimary).MajorGridlines.Delete    .Axes(xlCategory, xlPrimary).MajorGridlines.Delete    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop        If vResult_Percentiles(3, column) > 0 Then         ' Add each series         For iSrsIX = 0 To 2                          If iSrsIX = 0 Then ' Q25%                     vBoxPlotArray(0) = vResult_Percentiles(3, column) * coef                     sName = "5% Percentile"                 End If                                      If iSrsIX = 1 Then  ' Box1: median -Q25                     vBoxPlotArray(0) = (vResult_Percentiles(4, column) - vResult_Percentiles(3, column)) * coef                     sName = "Box1"                 End If                                  If iSrsIX = 2 Then ' Box2: Q75 -median                     vBoxPlotArray(0) = (vResult_Percentiles(5, column) - vResult_Percentiles(4, column)) * coef                     sName = "Box2"                 End If                 Set srsNew = .SeriesCollection.NewSeries                 With srsNew                     .name = sName                     .values = vBoxPlotArray()                     If iSrsIX = 0 Then                         .Interior.ColorIndex = xlNone                         .HasErrorBars = True                         .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                         Type:=xlCustom, Amount:=range_min, MinusValues:= _                         range_min                         .ErrorBars.Format.line.Weight = dLineWeight                     End If                     If iSrsIX = 1 Then                         .Border.LineStyle = xlLineStyleEn                         .Border.Color = RGB(0, 0, 0)                         .Interior.Color = RGB(252, 252, 252)                         .Format.line.Weight = dLineWeight                     End If                     If iSrsIX = 2 Then                         .HasErrorBars = True                         .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                         Type:=xlCustom, Amount:=range_max, MinusValues:= _                         range_max                         .ErrorBars.Format.line.Weight = dLineWeight                         .Border.LineStyle = xlLineStyleEn                         .Border.Color = RGB(0, 0, 0)                         .Interior.Color = RGB(252, 252, 252)                         .Format.line.Weight = dLineWeight                     End If                 End With         Next        .Axes(xlCategory, xlPrimary).CategoryNames = Array_names        .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue        .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue        If Sheets("4. Single Stock Report").Range("Smile_normalized").Value = False Then                .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00%"           Else                .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.000"        End If        .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize        .Axes(xlCategory, xlPrimary).HasMajorGridlines = True         .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash         .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15         .Axes(xlValue, xlPrimary).HasMajorGridlines = True         .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash         .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15         .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize         .Axes(xlValue, xlPrimary).MaximumScale = maxValue         .Axes(xlValue, xlPrimary).MinimumScale = minValue         .Axes(xlValue).CrossesAt = minValue         .ChartGroups(1).GapWidth = dGap        'add the spot         Set srsNew = .SeriesCollection.NewSeries         With srsNew             .name = "Current Value"             .ChartType = xlXYScatterLines             .values = vBoxPlotArray_spot()             .Format.line.Visible = False             .MarkerStyle = xlMarkerStyleDiamond             .MarkerForegroundColorIndex = 29             .MarkerBackgroundColorIndex = 29             .MarkerSize = iMarkerSize         End With         'add the spot last week         Set srsNew = .SeriesCollection.NewSeries         With srsNew             .name = "Last Week"             .ChartType = xlXYScatterLines             .values = vBoxPlotArray_lastweek()             .Format.line.Visible = False             .MarkerStyle = xlMarkerStyleDash             .MarkerForegroundColorIndex = 29             .MarkerBackgroundColorIndex = 29             .MarkerSize = iMarkerSize         End With    Else            min_Q25 = -vResult_Percentiles(3, column) * coef        With chtChart            .HasLegend = False            .Axes(xlValue, xlPrimary).MajorGridlines.Delete            .Axes(xlCategory, xlPrimary).MajorGridlines.Delete                        Do Until .SeriesCollection.Count = 0                    .SeriesCollection(1).Delete            Loop            ' Add each series            For iSrsIX = 0 To 3                                If iSrsIX = 0 Then ' Q25%                        vBoxPlotArray(0) = vResult_Percentiles(3, column) * coef + min_Q25                        sName = "5% Percentile"                    End If                                            If iSrsIX = 1 Then  ' Box1: median -Q25                        vBoxPlotArray(0) = (vResult_Percentiles(4, column) - vResult_Percentiles(3, column)) * coef                        sName = "Box1"                    End If                                        If iSrsIX = 2 Then ' Box2: Q75 -median                        vBoxPlotArray(0) = (vResult_Percentiles(5, column) - vResult_Percentiles(4, column)) * coef                        sName = "Box2"                    End If                                        If iSrsIX = 3 Then ' dummy variable                        vBoxPlotArray(0) = -min_Q25                        sName = "Dummy"                    End If                                        Set srsNew = .SeriesCollection.NewSeries                    With srsNew                        .name = sName                        .values = vBoxPlotArray()                        If iSrsIX = 0 Then                            .AxisGroup = 1                            .Interior.ColorIndex = xlNone                            .HasErrorBars = True                            .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                            Type:=xlCustom, Amount:=range_min, MinusValues:= _                            range_min                            .ErrorBars.Format.line.Weight = dLineWeight                                                    End If                        If iSrsIX = 1 Then                            .AxisGroup = 1                            .Border.LineStyle = xlLineStyleEn                            .Border.Color = RGB(0, 0, 0)                            .Interior.Color = RGB(252, 252, 252)                            .Format.line.Weight = dLineWeight                                                    End If                        If iSrsIX = 2 Then                            .AxisGroup = 1                            .HasErrorBars = True                            .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                            Type:=xlCustom, Amount:=range_max, MinusValues:= _                            range_max                            .ErrorBars.Format.line.Weight = dLineWeight                            .Border.LineStyle = xlLineStyleEn                            .Border.Color = RGB(0, 0, 0)                            .Interior.Color = RGB(252, 252, 252)                            .Format.line.Weight = dLineWeight                                                    End If                        If iSrsIX = 3 Then                            .Interior.Color = RGB(0, 0, 0)                            .AxisGroup = 1                        End If                    End With                                Next            .SeriesCollection(1).AxisGroup = 2            .SeriesCollection(2).AxisGroup = 2            .SeriesCollection(3).AxisGroup = 2            .Axes(xlCategory, xlPrimary).HasMajorGridlines = True            .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash            .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15            .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize                                .Axes(xlValue, xlPrimary).HasMajorGridlines = True            .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash            .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15           .Axes(xlCategory, xlPrimary).CategoryNames = Array_names           .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue           .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue           If Sheets("4. Single Stock Report").Range("Smile_normalized").Value = False Then                .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.00%"           Else                .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0.000"           End If                      .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize                      .Axes(xlValue, xlSecondary).TickLabels.Font.Background = xlTransparent           .Axes(xlValue, xlSecondary).TickLabels.Font.ColorIndex = 2                      .Axes(xlCategory).TickLabelPosition = xlTickLabelPositionLow           .Axes(xlValue).CrossesAt = vResult_Percentiles(2, column) * coef - min_Q25                             .Axes(xlValue, xlSecondary).MaximumScale = maxValue + min_Q25           .Axes(xlValue, xlSecondary).MinimumScale = minValue + min_Q25 ' vResult_Percentiles(2, column) * coef               .Axes(xlValue, xlPrimary).MaximumScale = maxValue           .Axes(xlValue, xlPrimary).MinimumScale = minValue 'vResult_Percentiles(2, column) * coef - min_Q25 ' minValue               '                      .ChartGroups(2).GapWidth = dGap           .SeriesCollection(4).Interior.ColorIndex = xlNone                                                 '       'add the spot            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = "Current Value"                .ChartType = xlXYScatterLines                .values = vBoxPlotArray_spot()                .Format.line.Visible = False                .MarkerStyle = xlMarkerStyleDiamond                .MarkerForegroundColorIndex = 29                .MarkerBackgroundColorIndex = 29                .MarkerSize = iMarkerSize                .AxisGroup = 1            End With    '        'add the spot last week            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = "Last Week"                .ChartType = xlXYScatterLines                .values = vBoxPlotArray_lastweek()                .Format.line.Visible = False                .MarkerStyle = xlMarkerStyleDash                .MarkerForegroundColorIndex = 29                .MarkerBackgroundColorIndex = 29                .MarkerSize = iMarkerSize                .AxisGroup = 1            End With                        .Axes(xlValue, xlSecondary).Border.LineStyle = xlNone            .Axes(xlValue, xlSecondary).MajorTickMark = xlNone            .Axes(xlValue, xlSecondary).MinorTickMark = xlNone            .Axes(xlValue, xlSecondary).TickLabelPosition = xlNone                End With    End IfEnd With'realizedRange("B138").Value = Range("B83").Valuecolumn = 3For i = 1 To UBound(vResult_Percentiles, 1) - 1    Range("B138").Offset(i, 0).Value = vResult_Percentiles(i, 1)    Range("B138").Offset(i, 1).Value = vResult_Percentiles(i, column)Next iRange("B138").Offset(i, 0).Value = vResult_Percentiles(i, 1)Range("B138").Offset(i, 1).Value = vResult_Percentiles(i, column) / 100i = i + 1Range("B138").Offset(i, 0).Value = "Error Min"Range("B138").Offset(i, 1).Value = Range("B138").Offset(i - 7, 1).Value - Range("B138").Offset(i - 8, 1).Valuei = i + 1Range("B138").Offset(i, 0).Value = "Error Max"Range("B138").Offset(i, 1).Value = Range("B138").Offset(i - 5, 1).Value - Range("B138").Offset(i - 6, 1).ValueSet range_min = Range("B138").Offset(i - 1, 1)Set range_max = Range("B138").Offset(i, 1)Set range_tickers = Range("B138").Offset(i - 10, 1)vBoxPlotArray_spot(0) = vResult_Percentiles(7, column)vBoxPlotArray_lastweek(0) = vResult_Percentiles(8, column)vBoxPlotArray_median(0) = vResult_Percentiles(4, column)minValue = 0.95 * vResult_Percentiles(2, column)maxValue = 1.05 * vResult_Percentiles(6, column)    Array_names(0) = vResult_Percentiles(1, column)Set ch = ActiveSheet.ChartObjects("R_BP").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd Withch.Parent.Delete'chart creationSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=500).Chart            With chtChart        .ChartType = xlColumnStacked        .Parent.name = "R_BP"        .Parent.Height = hgt        .Parent.width = wdt        .Parent.top = top        .Parent.left = lft    End With'add points and formattingWith chtChart    iTop_BP = .Parent.top    .HasLegend = False    .Axes(xlValue, xlPrimary).MajorGridlines.Delete    .Axes(xlCategory, xlPrimary).MajorGridlines.Delete    Do Until .SeriesCollection.Count = 0            .SeriesCollection(1).Delete    Loop    ' Add each series    For iSrsIX = 0 To 2                If iSrsIX = 0 Then ' Q25%                vBoxPlotArray(0) = vResult_Percentiles(3, column)                sName = "5% Percentile"            End If                            If iSrsIX = 1 Then  ' Box1: median -Q25                vBoxPlotArray(0) = (vResult_Percentiles(4, column) - vResult_Percentiles(3, column))                sName = "Box1"            End If                        If iSrsIX = 2 Then ' Box2: Q75 -median                vBoxPlotArray(0) = (vResult_Percentiles(5, column) - vResult_Percentiles(4, column))                sName = "Box2"            End If            Set srsNew = .SeriesCollection.NewSeries            With srsNew                .name = sName                .values = vBoxPlotArray()                If iSrsIX = 0 Then                    .Interior.ColorIndex = xlNone                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlMinusValues, _                    Type:=xlCustom, Amount:=range_min, MinusValues:= _                    range_min                    .ErrorBars.Format.line.Weight = dLineWeight                End If                If iSrsIX = 1 Then                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If                If iSrsIX = 2 Then                    .HasErrorBars = True                    .ErrorBar Direction:=xlY, Include:=xlPlusValues, _                    Type:=xlCustom, Amount:=range_max, MinusValues:= _                    range_max                    .ErrorBars.Format.line.Weight = dLineWeight                    .Border.LineStyle = xlLineStyleEn                    .Border.Color = RGB(0, 0, 0)                    .Interior.Color = RGB(252, 252, 252)                    .Format.line.Weight = dLineWeight                End If            End With    Next   .Axes(xlCategory, xlPrimary).CategoryNames = Array_names   .Axes(xlCategory, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.Font.Bold = msoTrue   .Axes(xlValue, xlPrimary).TickLabels.NumberFormat = "0%"   .Axes(xlCategory, xlPrimary).TickLabels.Font.Size = iAxesTitleSize   .Axes(xlCategory, xlPrimary).HasMajorGridlines = True    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlCategory, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    .Axes(xlValue, xlPrimary).TickLabels.Font.Size = iAxesTitleSize    .Axes(xlValue, xlPrimary).MaximumScale = maxValue    .Axes(xlValue, xlPrimary).MinimumScale = minValue    .Axes(xlValue).CrossesAt = minValue    .ChartGroups(1).GapWidth = dGap   'add the spot    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Current Value"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_spot()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDiamond        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End With    'add the spot last week    Set srsNew = .SeriesCollection.NewSeries    With srsNew        .name = "Last Week"        .ChartType = xlXYScatterLines        .values = vBoxPlotArray_lastweek()        .Format.line.Visible = False        .MarkerStyle = xlMarkerStyleDash        .MarkerForegroundColorIndex = 29        .MarkerBackgroundColorIndex = 29        .MarkerSize = iMarkerSize    End WithEnd With'''''' VOLATILITY LEVEL ************** CREATE THE IMPLIED VOL CHARTRange("AA:AA,AB:AB").ClearContentsRange("AA1") = "Dates"Range("AB1") = "[" & small_tick & "] " & Range("B46").ValueDim rngX As RangeDim rngY As RangeSet rngX = Range(Cells(2, 27), Cells(2 + UBound(histo_vM, 1), 27)) 'current range of cells that hold array valuesSet rngY = Range(Cells(2, 28), Cells(2 + UBound(histo_vM, 1), 28))min_value = 1000max_value = -1000For n = 1 To UBound(histo_vM, 1) + 1    rngX(n).Value = histo_vM(n - 1, 0)    rngY(n).Value = histo_vM(n - 1, 1) / 100    If histo_vM(n - 1, 0) >= Sheets("4. Single Stock Report").Range("min_date").Value Then        If histo_vM(n - 1, 1) / 100 > max_value Then            max_value = histo_vM(n - 1, 1) / 100        End If        If histo_vM(n - 1, 1) / 100 < min_value Then            min_value = histo_vM(n - 1, 1) / 100        End If    End If    Nextmax_value = 1.05 * max_valuemin_value = min_value * 0.95Set ch = ActiveSheet.ChartObjects("IV").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd WithActiveSheet.ChartObjects("IV").DeleteSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=100).Chart                With chtChart    .ChartType = xlLine     chtChart.SeriesCollection.NewSeries    .SeriesCollection(1).XValues = rngX    .SeriesCollection(1).values = rngY    '.SeriesCollection(1).name = Range("AB1")    .SeriesCollection(1).Border.ColorIndex = 21    .Parent.top = top    .Parent.left = lft    .Parent.width = wdt    .Parent.Height = hgt    .Parent.name = "IV"    .HasLegend = False    .HasTitle = False        .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15End WithWith chtChart.Axes(xlValue)        .MinimumScale = Round(min_value, 2)        .MaximumScale = Round(max_value, 2)        .MinorUnitIsAuto = True        .MajorUnitIsAuto = True        .Crosses = xlAutomatic        .ReversePlotOrder = False        .ScaleType = xlLinear        .DisplayUnit = xlNone        .TickLabels.NumberFormat = "0.00%"End WithWith chtChart.Axes(xlCategory)    .MinimumScale = Sheets("4. Single Stock Report").Range("min_date").Value    .MajorUnit = 2End With'create the realized vol graphRange("Ai:Ai,Aj:Aj").ClearContentsRange("Ai1") = "Dates"Range("Aj1") = "[" & small_tick & "] " & Range("B83").ValueSet rngX = Range(Cells(2, 35), Cells(2 + UBound(histo_real, 1), 35)) 'current range of cells that hold array valuesSet rngY = Range(Cells(2, 36), Cells(2 + UBound(histo_real, 1), 36))min_value = 1000max_value = -1000For n = 1 To UBound(histo_real, 1) + 1    rngX(n).Value = histo_real(n - 1, 0)    rngY(n).Value = histo_real(n - 1, 1)    If histo_real(n - 1, 0) >= Sheets("4. Single Stock Report").Range("min_date").Value Then        If histo_real(n - 1, 1) > max_value Then            max_value = histo_real(n - 1, 1)        End If        If histo_real(n - 1, 1) < min_value Then            min_value = histo_real(n - 1, 1)        End If    End If    Nextmax_value = 1.05 * max_valuemin_value = min_value * 0.95Set ch = ActiveSheet.ChartObjects("REAL").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd WithActiveSheet.ChartObjects("REAL").DeleteSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=100).Chart                With chtChart    .ChartType = xlLine     chtChart.SeriesCollection.NewSeries    .SeriesCollection(1).XValues = rngX    .SeriesCollection(1).values = rngY    '.SeriesCollection(1).name = Range("Aj1")    .SeriesCollection(1).Border.ColorIndex = 21    .Parent.top = top    .Parent.left = lft    .Parent.width = wdt    .Parent.Height = hgt    .Parent.name = "REAL"    .HasLegend = False    .HasTitle = False        .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15End WithWith chtChart.Axes(xlValue)        .MinimumScale = Round(min_value, 2)        .MaximumScale = Round(max_value, 2)        .MinorUnitIsAuto = True        .MajorUnitIsAuto = True        .Crosses = xlAutomatic        .ReversePlotOrder = False        .ScaleType = xlLinear        .DisplayUnit = xlNone        .TickLabels.NumberFormat = "0.00%"End WithWith chtChart.Axes(xlCategory)    .MinimumScale = Sheets("4. Single Stock Report").Range("min_date").Value    .MajorUnit = 2End With''''' VOLATILITY LEVEL ************** CREATE THE IMPLIED vs REALIZED VOL CHART'''' IRRange("AC:AC,AD:AD").ClearContentsRange("A1").SelectRange("AC1") = "Dates"Range("AD1") = "[" & small_tick & "] " & Range("B64").ValueSet rngX = Range(Cells(2, 29), Cells(2 + UBound(spread_IR, 1), 29)) 'current range of cells that hold array valuesSet rngY = Range(Cells(2, 30), Cells(2 + UBound(spread_IR, 1), 30))min_value = 1000max_value = -1000For n = 1 To UBound(spread_IR, 1) + 1    rngX(n).Value = spread_IR(n - 1, 0)    rngY(n).Value = spread_IR(n - 1, 1)    If spread_IR(n - 1, 0) >= Sheets("4. Single Stock Report").Range("min_date").Value Then        If spread_IR(n - 1, 1) > max_value Then            max_value = spread_IR(n - 1, 1)        End If        If spread_IR(n - 1, 1) < min_value Then            min_value = spread_IR(n - 1, 1)        End If    End IfNextIf max_value > 0 Then    max_value = 1.05 * max_valueElse    max_value = 0.95 * max_valueEnd IfIf min_value < 0 Then    min_value = 1.05 * min_valueElse    min_value = 0.95 * min_valueEnd IfSet ch = ActiveSheet.ChartObjects("IVR").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd WithActiveSheet.ChartObjects("IVR").DeleteSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=100).Chart                With chtChart    .ChartType = xlLine     chtChart.SeriesCollection.NewSeries    .SeriesCollection(1).XValues = rngX    .SeriesCollection(1).values = rngY    '.SeriesCollection(1).name = Range("AD1")    .SeriesCollection(1).Border.ColorIndex = 21    .Parent.top = top    .Parent.left = lft    .Parent.width = wdt    .Parent.Height = hgt    .Parent.name = "IVR"    .HasLegend = False    .HasTitle = False    .HasTitle = False        .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15End WithWith chtChart.Axes(xlValue)        .MinimumScale = Round(min_value, 2)        .MaximumScale = Round(max_value, 2)        .MinorUnitIsAuto = True        .MajorUnitIsAuto = True        .CrossesAt = Round(min_value, 2)        .ReversePlotOrder = False        .ScaleType = xlLinear        .DisplayUnit = xlNone        End WithWith chtChart.Axes(xlCategory)    .MinimumScale = Sheets("4. Single Stock Report").Range("min_date").Value    .MajorUnit = 2End With''''' TSRange("AE:AE,AF:AF").ClearContentsRange("A1").SelectRange("AE1") = "Dates"Range("AF1") = "[" & small_tick & "] " & Range("L46").ValueSet rngX = Range(Cells(2, 31), Cells(2 + UBound(term_st_rs, 1), 31)) 'current range of cells that hold array valuesSet rngY = Range(Cells(2, 32), Cells(2 + UBound(term_st_rs, 1), 32))min_value = 1000max_value = -1000For n = 1 To UBound(term_st_rs, 1) + 1    rngX(n).Value = term_st_rs(n - 1, 0)    rngY(n).Value = term_st_rs(n - 1, 1)    If term_st_rs(n - 1, 0) >= Sheets("4. Single Stock Report").Range("min_date").Value Then        If term_st_rs(n - 1, 1) > max_value Then            max_value = term_st_rs(n - 1, 1)        End If        If term_st_rs(n - 1, 1) < min_value Then            min_value = term_st_rs(n - 1, 1)        End If    End IfNextmax_value = 1.05 * max_valuemin_value = min_value * 0.95Set ch = ActiveSheet.ChartObjects("TS").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd WithActiveSheet.ChartObjects("TS").DeleteSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=100).Chart                With chtChart    .ChartType = xlLine     chtChart.SeriesCollection.NewSeries    .SeriesCollection(1).XValues = rngX    .SeriesCollection(1).values = rngY    '.SeriesCollection(1).name = Range("AF1")    .SeriesCollection(1).Border.ColorIndex = 21    .Parent.top = top    .Parent.left = lft    .Parent.width = wdt    .Parent.Height = hgt    .Parent.name = "TS"    .HasLegend = False    .HasTitle = False        .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15End WithWith chtChart.Axes(xlValue)        .MinimumScale = Round(min_value, 2)        .MaximumScale = Round(max_value, 2)        .MinorUnitIsAuto = True        .MajorUnitIsAuto = True        .CrossesAt = Round(min_value, 2)        .ReversePlotOrder = False        .ScaleType = xlLinear        .DisplayUnit = xlNone        .TickLabels.NumberFormat = "0.00"        End WithWith chtChart.Axes(xlCategory)    .MinimumScale = Sheets("4. Single Stock Report").Range("min_date").Value    .MajorUnit = 2End With''''' SKEWRange("AG:AG,AH:AH").ClearContentsRange("AG1") = "Dates"Range("AH1") = "[" & small_tick & "] " & Range("L64").ValueSet rngX = Range(Cells(2, 33), Cells(2 + UBound(v_skew, 1), 33)) 'current range of cells that hold array valuesSet rngY = Range(Cells(2, 34), Cells(2 + UBound(v_skew, 1), 34))min_value = 1000max_value = -1000For n = 1 To UBound(v_skew, 1) + 1    rngX(n).Value = v_skew(n - 1, 0)    rngY(n).Value = v_skew(n - 1, 1)    If v_skew(n - 1, 0) >= Sheets("4. Single Stock Report").Range("min_date").Value Then        If v_skew(n - 1, 1) > max_value Then            max_value = v_skew(n - 1, 1)        End If        If v_skew(n - 1, 1) < min_value Then            min_value = v_skew(n - 1, 1)        End If    End IfNextIf max_value > 0 Then    max_value = 1.05 * max_valueElse    max_value = 0.95 * max_valueEnd IfIf min_value < 0 Then    min_value = 1.05 * min_valueElse    min_value = 0.95 * min_valueEnd IfSet ch = ActiveSheet.ChartObjects("Smile").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd WithActiveSheet.ChartObjects("Smile").DeleteSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=100).Chart                With chtChart    .ChartType = xlLine     chtChart.SeriesCollection.NewSeries    .SeriesCollection(1).XValues = rngX    .SeriesCollection(1).values = rngY    '.SeriesCollection(1).name = Range("AH1")    .SeriesCollection(1).Border.ColorIndex = 21    .Parent.top = top    .Parent.left = lft    .Parent.width = wdt    .Parent.Height = hgt    .Parent.name = "Smile"    .HasLegend = False    .HasTitle = False        .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15    End WithWith chtChart.Axes(xlValue)        .MinimumScale = Round(min_value, 2)        .MaximumScale = Round(max_value, 2)        .MinorUnitIsAuto = True        .MajorUnitIsAuto = True        .CrossesAt = Round(min_value, 2)        .ReversePlotOrder = False        .ScaleType = xlLinear        .DisplayUnit = xlNoneEnd WithWith chtChart.Axes(xlCategory)    .MinimumScale = Sheets("4. Single Stock Report").Range("min_date").Value    .MajorUnit = 2End WithSh_SingleStockRes.Calculate'''' MAVGRange("A1").SelectRange("BA1") = "Dates"Range("BB1").Value = "[" & small_tick & "] PRICE"Range("Bc1").Value = "[" & small_tick & "] MOVING AVERAGE " & mav_d(0) & "D"Range("Bd1").Value = "[" & small_tick & "] MOVING AVERAGE " & mav_d(1) & "D"Range("Be1").Value = "[" & small_tick & "] MOVING AVERAGE " & mav_d(2) & "D"Range("Bf1").Value = "[" & small_tick & "] MOVING AVERAGE " & mav_d(3) & "D"Set ch = ActiveSheet.ChartObjects("MA").Chart 'existing chart on worksheetWith ch.Parent    hgt = .Height    wdt = .width    top = .top    lft = .leftEnd WithDim rngZ As RangeDim rngW As RangeDim rngV As RangeDim rngU As RangeSet rngX = Range(Cells(2, 53), Cells(2 + UBound(mav, 1) - 251, 53)) 'current range of cells that hold array valuesSet rngY = Range(Cells(2, 54), Cells(2 + UBound(mav, 1) - 251, 54))Set rngZ = Range(Cells(2, 55), Cells(2 + UBound(mav, 1) - 251, 55))Set rngW = Range(Cells(2, 56), Cells(2 + UBound(mav, 1) - 251, 56))Set rngV = Range(Cells(2, 57), Cells(2 + UBound(mav, 1) - 251, 57))Set rngU = Range(Cells(2, 58), Cells(2 + UBound(mav, 1) - 251, 58))min_value = 1000max_value = -1000min_temp = 0max_temp = 0For n = 252 To UBound(mav, 1) + 1    rngX(n - 251).Value = mav(n - 1, 0)    rngY(n - 251).Value = mav(n - 1, 1)    rngZ(n - 251).Value = mav(n - 1, 2)    rngW(n - 251).Value = mav(n - 1, 3)    rngV(n - 251).Value = mav(n - 1, 4)    rngU(n - 251).Value = mav(n - 1, 5)    If mav(n - 1, 0) >= Sheets("4. Single Stock Report").Range("min_date").Value Then        min_value = WorksheetFunction.Min(mav(n - 1, 1), mav(n - 1, 2), mav(n - 1, 3), mav(n - 1, 4), mav(n - 1, 5), min_value)        max_value = WorksheetFunction.Max(mav(n - 1, 1), mav(n - 1, 2), mav(n - 1, 3), mav(n - 1, 4), mav(n - 1, 5), max_value)    End IfNextmax_value = 1.05 * max_valuemin_value = min_value * 0.95ActiveSheet.ChartObjects("MA").DeleteSet chtChart = Sheets("Single Stock Results").ChartObjects.Add( _        left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _            ActiveWindow.width / 4, _        width:=iWidthBox_Plot, _        top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _            ActiveWindow.Height / 4, _        Height:=100).Chart                With chtChart    .ChartType = xlLine    .Parent.top = top    .Parent.left = lft    .Parent.width = wdt    .Parent.Height = hgt    .Parent.name = "MA"         chtChart.SeriesCollection.NewSeries    .SeriesCollection(1).XValues = rngX    .SeriesCollection(1).values = rngY    .SeriesCollection(1).name = Range("BB1")    .SeriesCollection(1).Border.ColorIndex = 21    .SeriesCollection(1).Border.Weight = xlMedium        chtChart.SeriesCollection.NewSeries    .SeriesCollection(2).XValues = rngX    .SeriesCollection(2).values = rngZ    .SeriesCollection(2).name = Range("BC1")    .SeriesCollection(2).Border.ColorIndex = 46    .SeriesCollection(2).Border.Weight = xlThin        chtChart.SeriesCollection.NewSeries    .SeriesCollection(3).XValues = rngX    .SeriesCollection(3).values = rngW    .SeriesCollection(3).name = Range("BD1")    .SeriesCollection(3).Border.ColorIndex = 17    .SeriesCollection(3).Border.Weight = xlThin        chtChart.SeriesCollection.NewSeries    .SeriesCollection(4).XValues = rngX    .SeriesCollection(4).values = rngV    .SeriesCollection(4).name = Range("BE1")    .SeriesCollection(4).Border.ColorIndex = 47    .SeriesCollection(4).Border.Weight = xlThin        chtChart.SeriesCollection.NewSeries    .SeriesCollection(5).XValues = rngX    .SeriesCollection(5).values = rngU    .SeriesCollection(5).name = Range("BF1")    .SeriesCollection(5).Border.ColorIndex = 43    .SeriesCollection(5).Border.Weight = xlThin    .HasTitle = False        .Legend.Position = xlLegendPositionBottom        .Axes(xlValue, xlPrimary).HasMajorGridlines = True    .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash    .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15        End WithWith chtChart.Axes(xlValue)        .MinimumScale = min_value        .MaximumScale = max_value        .MinorUnitIsAuto = True        .MajorUnitIsAuto = True        .Crosses = xlAutomatic        .ReversePlotOrder = False        .ScaleType = xlLinear        .DisplayUnit = xlNone        .TickLabels.NumberFormat = "0.00"End WithWith chtChart.Axes(xlCategory)    .MinimumScale = Sheets("4. Single Stock Report").Range("min_date").ValueEnd With' create the historical volatility coneDim vResult_Cone() As VariantDim idays As Integeridays = 252vResult_Cone = volatility_cone(m_returns, idays)For i = 0 To 4    For j = 0 To 4        Sheets("Single Stock Results").Range("Ao1").Offset(i, j).Value = vResult_Cone(i, j)    Next jNext iCall Historical_Volatility_Cone(vResult_Cone)' create the implied volatility coneDim vResult_Cone_implied() As Variantmoneyness = Sheets("4. Single Stock Report").Range("implied_moneyness").Value * 100vResult_Cone_implied = volatility_cone_implied(moneyness, small_tick, start_date, end_date, idays)    Call Historical_Volatility_Cone_implied(vResult_Cone_implied)End Sub  Sub Historical_Volatility_Cone(vResult_Cone() As Variant)        Set ch = ActiveSheet.ChartObjects("Cone").Chart 'existing chart on worksheet        minval = 1000        maxval = -1000        Dim lft, wdt, hgt, top As Double                With ch            lft = Parent.left            wdt = .Parent.width            hgt = .Parent.Height            top = .Parent.top        End With                ch.Parent.Delete                Dim values(1 To 4) As Double        Set chtChart = Sheets("Single Stock Results").ChartObjects.Add( _                left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _                    ActiveWindow.width / 4, _                width:=iWidthBox_Plot, _                top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _                    ActiveWindow.Height / 4, _                Height:=100).Chart                                        With chtChart            .ChartType = xlLine            .Parent.left = lft            .Parent.width = wdt            .Parent.Height = hgt            .Parent.name = "Cone"                        For i = 1 To 4                values(i) = vResult_Cone(i, 1)                If values(i) <= minval Then                    minval = values(i)                End If                            Next i            chtChart.SeriesCollection.NewSeries            .SeriesCollection(1).XValues = Array("1M", "3M", "6M", "12M")            .SeriesCollection(1).values = values            .SeriesCollection(1).name = "Min*"            .SeriesCollection(1).MarkerStyle = xlMarkerStyleX            .SeriesCollection(1).MarkerSize = 5            .SeriesCollection(1).Format.line.ForeColor.RGB = RGB(0, 128, 0)            .SeriesCollection(1).Smooth = True            For i = 1 To 4                values(i) = vResult_Cone(i, 2)                If values(i) >= maxval Then                    maxval = values(i)                End If            Next i            chtChart.SeriesCollection.NewSeries            .SeriesCollection(2).XValues = Array("1M", "3M", "6M", "12M")            .SeriesCollection(2).values = values            .SeriesCollection(2).name = "Max*"            .SeriesCollection(2).MarkerStyle = xlMarkerStyleX            .SeriesCollection(2).MarkerSize = 5            .SeriesCollection(2).Format.line.ForeColor.RGB = RGB(255, 0, 0)            .SeriesCollection(2).Smooth = True                        For i = 1 To 4                values(i) = vResult_Cone(i, 3)            Next i            chtChart.SeriesCollection.NewSeries            .SeriesCollection(3).XValues = Array("1M", "3M", "6M", "12M")            .SeriesCollection(3).values = values            .SeriesCollection(3).name = "Average*"            .SeriesCollection(3).MarkerStyle = xlMarkerStyleX            .SeriesCollection(3).MarkerSize = 5            .SeriesCollection(3).Format.line.ForeColor.RGB = RGB(255, 153, 0)            .SeriesCollection(3).Smooth = True            For i = 1 To 4                values(i) = vResult_Cone(i, 4)            Next i            chtChart.SeriesCollection.NewSeries            .SeriesCollection(4).XValues = Array("1M", "3M", "6M", "12M")            .SeriesCollection(4).values = values            .SeriesCollection(4).name = "Current Value"            .SeriesCollection(4).MarkerStyle = xlMarkerStyleX            .SeriesCollection(4).MarkerSize = 5            .SeriesCollection(4).Format.line.ForeColor.RGB = RGB(102, 0, 102)            .SeriesCollection(4).Smooth = True            .Axes(xlValue).TickLabels.NumberFormat = "0.00%"            .Axes(xlCategory).AxisBetweenCategories = False            .Legend.Position = xlLegendPositionBottom                        .Axes(xlValue).MinimumScale = minval * 0.95            .Axes(xlValue).MaximumScale = maxval * 1.05                        .Axes(xlValue, xlPrimary).HasMajorGridlines = True            .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash            .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15                                            End With                    End Sub Sub Historical_Volatility_Cone_implied(vResult_Cone() As Variant)        Set ch = ActiveSheet.ChartObjects("Cone_implied").Chart 'existing chart on worksheet        minval = 1000        maxval = -1000        Dim lft, wdt, hgt, top As Double                With ch            lft = Parent.left            wdt = .Parent.width            hgt = .Parent.Height            top = .Parent.top        End With                ch.Parent.Delete                Dim values(1 To 4) As Double        Set chtChart = Sheets("Single Stock Results").ChartObjects.Add( _                left:=Sheets("Single Stock Results").Columns(ActiveWindow.ScrollColumn).left + _                    ActiveWindow.width / 4, _                width:=iWidthBox_Plot, _                top:=Sheets("Single Stock Results").Rows(ActiveWindow.ScrollRow).top + _                    ActiveWindow.Height / 4, _                Height:=100).Chart                                        With chtChart            .ChartType = xlLine            .Parent.left = lft            .Parent.width = wdt            .Parent.Height = hgt            .Parent.name = "Cone_Implied"            .Parent.top = top                        For i = 1 To 4                values(i) = vResult_Cone(i, 1)                If values(i) <= minval Then                    minval = values(i)                End If                            Next i            chtChart.SeriesCollection.NewSeries            .SeriesCollection(1).XValues = Array("1M", "3M", "6M", "12M")            .SeriesCollection(1).values = values            .SeriesCollection(1).name = "Min*"            .SeriesCollection(1).MarkerStyle = xlMarkerStyleX            .SeriesCollection(1).MarkerSize = 5            .SeriesCollection(1).Format.line.ForeColor.RGB = RGB(0, 128, 0)            .SeriesCollection(1).Smooth = True                        For i = 1 To 4                values(i) = vResult_Cone(i, 2)                If values(i) >= maxval Then                    maxval = values(i)                End If            Next i            chtChart.SeriesCollection.NewSeries            .SeriesCollection(2).XValues = Array("1M", "3M", "6M", "12M")            .SeriesCollection(2).values = values            .SeriesCollection(2).name = "Max*"            .SeriesCollection(2).MarkerStyle = xlMarkerStyleX            .SeriesCollection(2).MarkerSize = 5            .SeriesCollection(2).Format.line.ForeColor.RGB = RGB(255, 0, 0)            .SeriesCollection(2).Smooth = True            For i = 1 To 4                values(i) = vResult_Cone(i, 3)            Next i            chtChart.SeriesCollection.NewSeries            .SeriesCollection(3).XValues = Array("1M", "3M", "6M", "12M")            .SeriesCollection(3).values = values            .SeriesCollection(3).name = "Average*"            .SeriesCollection(3).MarkerStyle = xlMarkerStyleX            .SeriesCollection(3).MarkerSize = 5            .SeriesCollection(3).Format.line.ForeColor.RGB = RGB(255, 153, 0)            .SeriesCollection(3).Smooth = True            For i = 1 To 4                values(i) = vResult_Cone(i, 4)            Next i            chtChart.SeriesCollection.NewSeries            .SeriesCollection(4).XValues = Array("1M", "3M", "6M", "12M")            .SeriesCollection(4).values = values            .SeriesCollection(4).name = "Current Value"            .SeriesCollection(4).MarkerStyle = xlMarkerStyleX            .SeriesCollection(4).MarkerSize = 5            .SeriesCollection(4).Format.line.ForeColor.RGB = RGB(102, 0, 102)            .SeriesCollection(4).Smooth = True            .Axes(xlValue).TickLabels.NumberFormat = "0.00%"            .Axes(xlCategory).AxisBetweenCategories = False            .Legend.Position = xlLegendPositionBottom                        .Axes(xlValue).MinimumScale = minval * 0.95            .Axes(xlValue).MaximumScale = maxval * 1.05                        .Axes(xlValue, xlPrimary).HasMajorGridlines = True            .Axes(xlValue, xlPrimary).MajorGridlines.Border.LineStyle = xlDash            .Axes(xlValue, xlPrimary).MajorGridlines.Border.ColorIndex = 15        End With                    End Sub Function volatility_cone(m_returns() As Variant, idays As Integer) As Variant    histo_real_30 = real_vol(m_returns, 30)    histo_real_90 = real_vol(m_returns, 90)    histo_real_180 = real_vol(m_returns, 180)    histo_real_360 = real_vol(m_returns, 360)                    Dim vResult_Cone(0 To 4, 0 To 4)            vResult_Cone(1, 0) = "1M"    vResult_Cone(2, 0) = "3M"    vResult_Cone(3, 0) = "6M"    vResult_Cone(4, 0) = "12M"        vResult_Cone(0, 1) = "Min"    vResult_Cone(0, 2) = "Max"    vResult_Cone(0, 3) = "Average"    vResult_Cone(0, 4) = "Spot"    Dim vExtract() As Double        ReDim vExtract(1 To idays) As Double               '1m    For i = 1 To idays        vExtract(i) = histo_real_30(UBound(histo_real_30) - i + 1, 1)    Next i    vResult_Cone(1, 1) = WorksheetFunction.Min(vExtract())    vResult_Cone(1, 2) = WorksheetFunction.Max(vExtract())    vResult_Cone(1, 3) = WorksheetFunction.Average(vExtract())    vResult_Cone(1, 4) = vExtract(1)            '3m    For i = 1 To idays        vExtract(i) = histo_real_90(UBound(histo_real_90) - i + 1, 1)    Next i    vResult_Cone(2, 1) = WorksheetFunction.Min(vExtract())    vResult_Cone(2, 2) = WorksheetFunction.Max(vExtract())    vResult_Cone(2, 3) = WorksheetFunction.Average(vExtract())    vResult_Cone(2, 4) = vExtract(1)        '6m    For i = 1 To idays        vExtract(i) = histo_real_180(UBound(histo_real_180) - i + 1, 1)    Next i    vResult_Cone(3, 1) = WorksheetFunction.Min(vExtract())    vResult_Cone(3, 2) = WorksheetFunction.Max(vExtract())    vResult_Cone(3, 3) = WorksheetFunction.Average(vExtract())    vResult_Cone(3, 4) = vExtract(1)        '12m    For i = 1 To idays        vExtract(i) = histo_real_360(UBound(histo_real_360) - i + 1, 1)    Next i    vResult_Cone(4, 1) = WorksheetFunction.Min(vExtract())    vResult_Cone(4, 2) = WorksheetFunction.Max(vExtract())    vResult_Cone(4, 3) = WorksheetFunction.Average(vExtract())    vResult_Cone(4, 4) = vExtract(1)        volatility_cone = vResult_Cone End Function  Function volatility_cone_implied(moneyness As String, small_tick As String, start_date As Date, end_date As Date, idays As Integer) As Variant    Dim fld As String    Dim strOpenPwd As String: strOpenPwd = ";pwd=123456"    Dim opt_db As Database    Set opt_db = OpenDatabase(Sheets("1. Fill DB").Range("FillDB_path").Value, _                            Options:=True, _                            ReadOnly:=False, _                            Connect:=strOpenPwd)    Dim dss As String    fld = "30D" & "_" & moneyness    histo_1M = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    fld = "3M" & "_" & moneyness    histo_3M = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    fld = "6M" & "_" & moneyness    histo_6M = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)    fld = "12M" & "_" & moneyness    histo_12M = get_histo_datas(small_tick, fld, start_date, end_date, opt_db, dss)                         Dim vResult_Cone(0 To 4, 0 To 4)            vResult_Cone(1, 0) = "1M"    vResult_Cone(2, 0) = "3M"    vResult_Cone(3, 0) = "6M"    vResult_Cone(4, 0) = "12M"        vResult_Cone(0, 1) = "Min"    vResult_Cone(0, 2) = "Max"    vResult_Cone(0, 3) = "Average"    vResult_Cone(0, 4) = "Spot"    Dim vExtract() As Double        ReDim vExtract(1 To idays) As Double               '1m    For i = 1 To idays        vExtract(i) = histo_1M(UBound(histo_1M) - i + 1, 1) / 100    Next i    vResult_Cone(1, 1) = WorksheetFunction.Min(vExtract())    vResult_Cone(1, 2) = WorksheetFunction.Max(vExtract())    vResult_Cone(1, 3) = WorksheetFunction.Average(vExtract())    vResult_Cone(1, 4) = vExtract(1)            '3m    For i = 1 To idays        vExtract(i) = histo_3M(UBound(histo_3M) - i + 1, 1) / 100    Next i    vResult_Cone(2, 1) = WorksheetFunction.Min(vExtract())    vResult_Cone(2, 2) = WorksheetFunction.Max(vExtract())    vResult_Cone(2, 3) = WorksheetFunction.Average(vExtract())    vResult_Cone(2, 4) = vExtract(1)        '6m    For i = 1 To idays        vExtract(i) = histo_6M(UBound(histo_6M) - i + 1, 1) / 100    Next i    vResult_Cone(3, 1) = WorksheetFunction.Min(vExtract())    vResult_Cone(3, 2) = WorksheetFunction.Max(vExtract())    vResult_Cone(3, 3) = WorksheetFunction.Average(vExtract())    vResult_Cone(3, 4) = vExtract(1)        '12m    For i = 1 To idays        vExtract(i) = histo_12M(UBound(histo_12M) - i + 1, 1) / 100    Next i    vResult_Cone(4, 1) = WorksheetFunction.Min(vExtract())    vResult_Cone(4, 2) = WorksheetFunction.Max(vExtract())    vResult_Cone(4, 3) = WorksheetFunction.Average(vExtract())    vResult_Cone(4, 4) = vExtract(1)        volatility_cone_implied = vResult_Cone End FunctionFunction mavg(v_prices As Variant, days() As Long) As Variant()Dim output As VariantDim min_d As Integer: min_d = WorksheetFunction.Min(days)ReDim output(UBound(v_prices, 1), UBound(days, 1) + 2)'''' compute moving average    For i = 0 To UBound(v_prices, 1)            output(i, 0) = v_prices(i, 0)        output(i, 1) = v_prices(i, 1)                For M = 0 To UBound(days)                    If days(M) > i Then                        output(i, M + 2) = Empty            Else                                m_sum = 0                m_average = 0                                For j = i - days(M) + 1 To i                    m_sum = m_sum + v_prices(j, 1)                Next j                                m_average = m_sum / days(M)                                '''' output                output(i, 0) = v_prices(i, 0)                output(i, M + 2) = m_average                    End If                Next M                    Next i''''mavg = outputEnd FunctionFunction for_how_long_up_or_down(histo_prices() As Variant, icolprice1 As Integer, icolprice2 As Integer) As Integer    Dim icount As Integer    icount = 1    bstill = True    If histo_prices(UBound(histo_prices), icolprice1) >= histo_prices(UBound(histo_prices) - 1, icolprice2) Then        While icount <= UBound(histo_prices) And bstill            bstill = histo_prices(UBound(histo_prices) - icount, icolprice1) > histo_prices(UBound(histo_prices) - icount, icolprice2)            If bstill Then                icount = icount + 1            End If        Wend    Else        While icount <= UBound(histo_prices) And bstill            bstill = histo_prices(UBound(histo_prices) - icount, icolprice1) < histo_prices(UBound(histo_prices) - icount, icolprice2)            If bstill Then                icount = icount + 1            End If        Wend        End If    for_how_long_up_or_down = icountEnd FunctionFunction stock_rsi(histo_prices() As Variant, icolprice As Integer, idays As Integer) As Double    Dim average_down As Double    Dim icount_down  As Double    Dim average_up As Double    Dim icount_up  As Double    average_down = 0    average_up = 0    Dim i As Integer    Dim dreturn As Double    For i = 0 To idays        dreturn = histo_prices(UBound(histo_prices) - i, icolprice) - histo_prices(UBound(histo_prices) - i - 1, icolprice)        If dreturn < 0 Then            average_down = average_down + histo_prices(UBound(histo_prices) - i, icolprice)        Else            average_up = average_up + histo_prices(UBound(histo_prices) - i, icolprice)        End If    Next i    stock_rsi = 100 - 100 / (1 + average_up / average_down)End FunctionSub Ppt_Single_Stock()    Application.ScreenUpdating = False    Call m_analyse2    Dim wCurrentWbk As Workbook    Set wCurrentWbk = ActiveWorkbook        Dim sStock As String    sStock = wCurrentWbk.Sheets("4. Single Stock Report").Range("B3").Value        If Len(sStock) > 7 Then        If Application.Right(sStock, 7) = " Equity" Then            sStock = left(sStock, Len(sStock) - 7)        End If    End If            Dim sClientName As String    sClientName = wCurrentWbk.Sheets("4. Single Stock Report").Range("SS_client").Value    Dim sUniverse As String    sUniverse = sStock & " - " & wCurrentWbk.Sheets("4. Single Stock Report").Range("name").Value            Dim iSlideWidth As Double    Dim iSlideHeight As Double            Path = wCurrentWbk.Sheets("3. Volatilities").Range("Path_ppt").Value    File = "Template_SingleStock_Report.pptx"    Location = Path & File        'Open the generic one pager powerpoint    Dim genericPowerPoint As Object    Set genericPowerPoint = CreateObject("PowerPoint.Application")    genericPowerPoint.Visible = True    genericPowerPoint.Presentations.Open Location    iSlideWidth = genericPowerPoint.Presentations(File).PageSetup.Slidewidth    iSlideHeight = genericPowerPoint.Presentations(File).PageSetup.SlideHeight        k = 0        For Each Slides In genericPowerPoint.Presentations(File).Slides        Slides.name = k        k = k + 1    Next        'update fund name    Dim hgt As Double    Dim width, iLeft, top As Double        With genericPowerPoint.Presentations(File).Slides("0").Shapes("Fund")        .TextFrame.TextRange.Text = sClientName    End With        With genericPowerPoint.Presentations(File).Slides("0").Shapes("Universe")        .TextFrame.TextRange.Text = "Universe: " & sUniverse    End With    'set the name, position and size    With genericPowerPoint.Presentations(File).Slides("1").Shapes("Fund")        .TextFrame.TextRange.Text = sClientName    End With    With genericPowerPoint.Presentations(File).Slides("1").Shapes("Universe")        .TextFrame.TextRange.Text = "Universe: " & sUniverse    End With        'set the name, position and size    With genericPowerPoint.Presentations(File).Slides("2").Shapes("Fund")        .TextFrame.TextRange.Text = sClientName    End With    With genericPowerPoint.Presentations(File).Slides("2").Shapes("Universe")        .TextFrame.TextRange.Text = "Universe: " & sUniverse    End With        'Update date    Dim m_date As Date: m_date = wCurrentWbk.Sheets("4. Single Stock Report").Range("enddate").Value        genericPowerPoint.Presentations(File).Slides("0").Shapes("Date").TextFrame.TextRange.Text = "Date as of " & CStr(Format(m_date, "mmmm dd, yyyy"))    genericPowerPoint.Presentations(File).Slides("1").Shapes("Date").TextFrame.TextRange.Text = "Date as of " & CStr(Format(m_date, "mmmm dd, yyyy"))    genericPowerPoint.Presentations(File).Slides("2").Shapes("Date").TextFrame.TextRange.Text = "Date as of " & CStr(Format(m_date, "mmmm dd, yyyy"))        'update data date    With genericPowerPoint.Presentations(File).Slides("2").Shapes("Data")        .TextFrame.TextRange.Text = "Data from Bloomberg as of " & CStr(Format(m_date, "mmmm dd, yyyy"))    End With            '****************************************************************************************        '*************** Slide 0 : Implied vs realized => update graphs and tables        '*****************************************************************************************        genericPowerPoint.Presentations(File).Slides("0").Shapes("Title").TextFrame.TextRange.Text = sStock & " Historical Price"        '********************************************    '**************    update moving av graph        With genericPowerPoint.Presentations(File).Slides("0").Shapes("Graph")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("0").Shapes("Graph").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("MA").Copy        'paste    genericPowerPoint.Presentations(File).Slides("0").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("0").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("0").Shapes(icount)            .LockAspectRatio = False        .name = "Graph"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With         '********************************************    '******** technical        With genericPowerPoint.Presentations(File).Slides("0").Shapes("Technical")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("0").Shapes("Technical").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Data Ppt").Range("Technical").CopyPicture        'paste    genericPowerPoint.Presentations(File).Slides("0").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("0").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("0").Shapes(icount)            .LockAspectRatio = False        .name = "Technical"        .Height = hgt        .width = width        .left = iLeft        .top = top            End With        '********************************************    '******** implied table        With genericPowerPoint.Presentations(File).Slides("0").Shapes("I_T")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("0").Shapes("I_T").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Data Ppt").Range("I_T").CopyPicture        'paste    genericPowerPoint.Presentations(File).Slides("0").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("0").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("0").Shapes(icount)            .LockAspectRatio = False        .name = "I_T"        .Height = hgt        .width = width        .left = iLeft        .top = top            End With        '********************************************    '******** realized table        With genericPowerPoint.Presentations(File).Slides("0").Shapes("R_T")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("0").Shapes("R_T").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Data Ppt").Range("R_T").CopyPicture        'paste    genericPowerPoint.Presentations(File).Slides("0").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("0").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("0").Shapes(icount)            .LockAspectRatio = False        .name = "R_T"        .Height = hgt        .width = width        .left = iLeft        .top = top            End With                '********************************************    '******** implied graph        With genericPowerPoint.Presentations(File).Slides("0").Shapes("I_G")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("0").Shapes("I_G").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("IV").Copy        'paste    genericPowerPoint.Presentations(File).Slides("0").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("0").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("0").Shapes(icount)            .LockAspectRatio = False        .name = "I_G"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With        '********************************************    '******** implied bplot        With genericPowerPoint.Presentations(File).Slides("0").Shapes("I_BP")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("0").Shapes("I_BP").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("I_BP").Copy        'paste    genericPowerPoint.Presentations(File).Slides("0").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("0").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("0").Shapes(icount)            .LockAspectRatio = False        .name = "I_BP"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With          '********************************************    '******** realized graph        With genericPowerPoint.Presentations(File).Slides("0").Shapes("R_G")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("0").Shapes("R_G").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("REAL").Copy        'paste    genericPowerPoint.Presentations(File).Slides("0").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("0").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("0").Shapes(icount)            .LockAspectRatio = False        .name = "R_G"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With        '********************************************    '******** realized bplot        With genericPowerPoint.Presentations(File).Slides("0").Shapes("R_BP")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("0").Shapes("R_BP").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("R_BP").Copy        'paste    genericPowerPoint.Presentations(File).Slides("0").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("0").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("0").Shapes(icount)            .LockAspectRatio = False        .name = "R_BP"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With    '****************************************************************************************        '*************** Slide 1 : Implied vs realized => update graphs and tables        '*****************************************************************************************        '********************************************    '******** implied/ realized table        With genericPowerPoint.Presentations(File).Slides("1").Shapes("Ratio_T")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("Ratio_T").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Data Ppt").Range("IR_T").CopyPicture        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "Ratio_T"        .Height = hgt        .width = width        .left = iLeft        .top = top            End With    '******** ts table        With genericPowerPoint.Presentations(File).Slides("1").Shapes("TS_T")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("TS_T").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Data Ppt").Activate    wCurrentWbk.Sheets("Single Stock Data Ppt").Range("TS_T").CopyPicture        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "TS_T"        .Height = hgt        .width = width        .left = iLeft        .top = top            End With        '******** smile table        With genericPowerPoint.Presentations(File).Slides("1").Shapes("S_T")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("S_T").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Data Ppt").Range("S_T").CopyPicture        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "S_T"        .Height = hgt        .width = width        .left = iLeft        .top = top            End With                'ir graph            With genericPowerPoint.Presentations(File).Slides("1").Shapes("Ratio_G")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("Ratio_G").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("IVR").Copy        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "Ratio_G"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With        'ir graph            With genericPowerPoint.Presentations(File).Slides("1").Shapes("TS_G")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("TS_G").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("TS").Copy        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "TS_G"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With            'smile graph            With genericPowerPoint.Presentations(File).Slides("1").Shapes("S_G")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("S_G").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("Smile").Copy        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "S_G"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With                '********************************************    '******** imp realized bplot        With genericPowerPoint.Presentations(File).Slides("1").Shapes("Ratio_BP")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("Ratio_BP").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("IR_BP").Copy        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "Ratio_BP"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With    '********************************************    '******** smile bplot        With genericPowerPoint.Presentations(File).Slides("1").Shapes("S_BP")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("S_BP").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("S_BP").Copy        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "S_BP"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With        '********************************************    '******** ts bplot        With genericPowerPoint.Presentations(File).Slides("1").Shapes("TS_BP")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("TS_BP").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("TS_BP").Copy        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "TS_BP"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With        '********************************************    '******** cone realized        With genericPowerPoint.Presentations(File).Slides("1").Shapes("RCone")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("RCone").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("Cone").Copy        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "RCone"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With        '********************************************    '******** cone implied        With genericPowerPoint.Presentations(File).Slides("1").Shapes("ICone")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("ICone").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Results").Shapes("Cone_Implied").Copy        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "ICone"        .Height = hgt        .width = width        .left = iLeft        .top = top        .LinkFormat.BreakLink    End With    '********************************************    '******** cone realized title        With genericPowerPoint.Presentations(File).Slides("1").Shapes("RVC_T")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("RVC_T").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Data Ppt").Range("RCone_T").CopyPicture        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "RVC_T"        .Height = hgt        .width = width        .left = iLeft        .top = top    End With        '********************************************    '******** cone implied title        With genericPowerPoint.Presentations(File).Slides("1").Shapes("IVC_T")        hgt = .Height        iLeft = .left        top = .top        width = .width    End With        'delete    genericPowerPoint.Presentations(File).Slides("1").Shapes("IVC_T").Delete        'copy from excel    wCurrentWbk.Sheets("Single Stock Data Ppt").Range("ICone_T").CopyPicture        'paste    genericPowerPoint.Presentations(File).Slides("1").Shapes.PasteSpecial (ppPasteEnhancedMetafile)        'look for the last shape added in powerpoint    icount = genericPowerPoint.Presentations(File).Slides("1").Shapes.Count        With genericPowerPoint.Presentations(File).Slides("1").Shapes(icount)            .LockAspectRatio = False        .name = "IVC_T"        .Height = hgt        .width = width        .left = iLeft        .top = top    End With        dt = Format(CStr(Now), "yyy_mm_dd_hh_mm_ss")    genericPowerPoint.Presentations(File).SaveAs (Path & "Screener_Report_" & sClientName & "_" & dt & ".pptx")        wCurrentWbk.Sheets("4. Single Stock Report").Range("PPT_SS").Offset(0, 0).Value = Path & "Screener_Report_" & sClientName & "_" & dt & ".pptx"            genericPowerPoint.Presentations("Screener_Report_" & sClientName & "_" & dt & ".pptx").Close    genericPowerPoint.QuitEnd Sub
