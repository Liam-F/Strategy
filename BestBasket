Private session As blpapicomLib.sessionPublic Sub mbest_baskets()''Init DbDim strOpenPwd As String: strOpenPwd = ";pwd=123456"Dim opt_db As DatabaseSet opt_db = OpenDatabase(Sh_BestBasket.Range("D15"), _                            Options:=True, _                            ReadOnly:=False, _                            Connect:=strOpenPwd)'' Init BloomSet session = New blpapicomLib.sessionsession.Startsession.OpenService ("//blp/refdata")Dim start_date As Date: start_date = Range("E3")Dim end_date As Date: end_date = Range("E4")Dim rsi_top As Integer: rsi_top = Range("E7")Dim basket_size As Integer: basket_size = Range("E8")Dim iv_mat As String: iv_mat = Range("E9")Dim iv_st As String: iv_st = Range("E10"): ''If iv_st = "100" Then iv_st = "ATM"Dim ass_corr As Double: ass_corr = Range("E11")Dim results() As Variant: ReDim results(Range(Sh_BestBasket.Cells(3, 2), _    Sh_BestBasket.Cells(3, 2).End(xlDown)).Count - 1, 3)    Dim dss As String j = 0For Each cell In Range(Sh_BestBasket.Cells(3, 2), Sh_BestBasket.Cells(3, 2).End(xlDown))Dim data_prices() As Variant'' prices from bloomDim flds() As Variant: ReDim flds(0): flds(0) = "PX_LAST"data_prices = M_BloomFunctions.M_GetHistoricalData(CStr(cell), flds(), start_date, end_date, "DAILY", session)Dim v_prices() As Single: ReDim v_prices(UBound(data_prices))For i = 0 To UBound(data_prices)v_prices(i) = data_prices(i, 1)Next i''' compute RSIDim rsi As StringCall RSI_level(v_prices, 14, rsi)'' fill resultsresults(j, 0) = CStr(cell)results(j, 1) = CSng(rsi)''' indicative yields from bloomflds(0) = "EQY_DVD_YLD_IND"Dim ti() As String: ReDim ti(0): ti(0) = CStr(cell)data_prices = M_BloomFunctions.M_GetStaticData(ti, flds, session)results(j, 2) = CSng(data_prices(0, 0))''' last implied vol 6MTH - ATM from Dbdata_prices = DB_Functions.get_histo_datas(CStr(cell), iv_mat & "M_" & iv_st, start_date, end_date, opt_db, dss)If dss = 1 Then'' no vol available at this date --> RSI = 100% so that the stock won't be part of a basketresults(j, 1) = 1Elseresults(j, 3) = CSng(data_prices(0, 1))End Ifj = j + 1Application.StatusBar = Format(j / UBound(results), "0.00%")Next cell'' sort according to RSICall order(results, 1, "asc")'' pick up 50 lowest RSIDim tp() As Varianttp = pick_up(results, rsi_top)'' sort according to YieldsCall order(tp, 1, "desc")''' compute implied vol for each basketba = 0Dim imp_vol_basket() As Double: ReDim imp_vol_basket(rsi_top / basket_size - 1)For Z = 0 To UBound(tp) Step basket_sizeDim basket_to_compute() As DoubleReDim basket_to_compute(0 To basket_size - 1, 0 To 1)    For b = 0 To basket_size - 1    basket_to_compute(b, 0) = 1 / basket_size    basket_to_compute(b, 1) = CDbl(tp(Z + b, 2) / 100)    Next b    imp_vol_basket(ba) = implied_vol(basket_to_compute, ass_corr)        ba = ba + 1Next Z'' formatCall fmt_baskets(rsi_top, basket_size)'' displayft = 3ba = 0For a = 0 To UBound(tp) Step basket_sizeDim basket_to_display() As VariantReDim basket_to_display(0 To basket_size - 1, 0 To 2)    For b = 0 To basket_size - 1    basket_to_display(b, 0) = tp(a + b, 0)    basket_to_display(b, 1) = CDbl(tp(a + b, 1) / 100)    basket_to_display(b, 2) = CDbl(tp(a + b, 2) / 100)    Next bRange(Cells(ft, 7), Cells(ft + basket_size - 1, 9)) = basket_to_displayCells(ft, 10) = imp_vol_basket(ba): ba = ba + 1ft = ft + basket_size + 2Next aApplication.StatusBar = "Ready"End SubSub Weeks_hilo(v_prices() As Single, level As String)Dim high As SingleDim low As Singlehigh = WorksheetFunction.Max(v_prices())low = WorksheetFunction.Min(v_prices())level = (v_prices(UBound(v_prices)) - low) / (high - low) ''* 100End SubSub RSI_level(v_prices() As Single, nb_d As Integer, level As String)Dim sumUp As Double: sumUp = 0Dim avgUp As Double: avgUp = 0Dim sumDown As Double: sumDown = 0Dim avgDown As Double: avgDown = 0For i = nb_d To UBound(v_prices)    If i = nb_d Then        '''' if first        For j = i - nb_d + 1 To i            If v_prices(j) > v_prices(j - 1) Then            sumUp = sumUp + v_prices(j) - v_prices(j - 1)            ElseIf v_prices(j) < v_prices(j - 1) Then            sumDown = sumDown + v_prices(j - 1) - v_prices(j)            End If        Next j                avgUp = sumUp / nb_d        avgDown = sumDown / nb_d            Else        '''' if next        If v_prices(i) > v_prices(i - 1) Then        avgUp = (avgUp * (nb_d - 1) + (v_prices(i) - v_prices(i - 1))) / nb_d        avgDown = (avgDown * (nb_d - 1)) / nb_d        ElseIf v_prices(i) < v_prices(i - 1) Then        avgDown = (avgDown * (nb_d - 1) + (v_prices(i - 1) - v_prices(i))) / nb_d        avgUp = (avgUp * (nb_d - 1)) / nb_d        Else        avgUp = (avgUp * (nb_d - 1)) / nb_d        avgDown = (avgDown * (nb_d - 1)) / nb_d        End If        End If    Next ilevel = 1 - 1 / (1 + avgUp / avgDown)End SubFunction order(myarray() As Variant, column As Integer, orderby As String)Dim Temp() As VariantReDim Temp(UBound(myarray, 2))If orderby = "asc" ThenFor i = 0 To UBound(myarray) - 1    For j = i + 1 To UBound(myarray)        If myarray(i, column) > myarray(j, column) Then                        For k = 0 To UBound(Temp)                Temp(k) = myarray(j, k)                Next k                            For k = 0 To UBound(Temp)                myarray(j, k) = myarray(i, k)                Next k                                For k = 0 To UBound(Temp)                myarray(i, k) = Temp(k)                Next k        End If    Next jNext iElseIf orderby = "desc" ThenFor i = 0 To UBound(myarray) - 1    For j = i + 1 To UBound(myarray)        If myarray(i, column) < myarray(j, column) Then                        For k = 0 To UBound(Temp)                Temp(k) = myarray(j, k)                Next k                            For k = 0 To UBound(Temp)                myarray(j, k) = myarray(i, k)                Next k                                For k = 0 To UBound(Temp)                myarray(i, k) = Temp(k)                Next k        End If    Next jNext iEnd IfEnd FunctionFunction pick_up(MySortedArray() As Variant, nb_to_pick As Integer) As VariantDim res() As VariantReDim res(nb_to_pick - 1, 2)For i = 0 To UBound(res, 1)    res(i, 0) = MySortedArray(i, 0)    res(i, 1) = MySortedArray(i, 2)    res(i, 2) = MySortedArray(i, 3)Next ipick_up = resEnd FunctionFunction implied_vol(basket() As Double, correl As Double) As DoubleDim sum_carre As Double: sum_carre = 0#For i = 0 To UBound(basket, 1)    sum_square = sum_square + basket(i, 0) ^ 2 * basket(i, 1) ^ 2Next iDim sum_one_to_one As Double: sum_one_to_one = 0For i = 0 To UBound(basket, 1)    For j = i + 1 To UBound(basket, 1)        sum_one_to_one = sum_one_to_one + basket(i, 0) * basket(i, 1) * basket(j, 0) * basket(j, 1)        Next jNext iimplied_vol = (sum_square + 2 * correl * sum_one_to_one) ^ 0.5End FunctionSub fmt_baskets(nb_stock As Integer, bsk_size As Integer)Range("G1:J10000").ClearContentsRange("G1:J10000").ClearFormatsft = 2Dim nb_bas As Integer: nb_bas = nb_stock / bsk_sizeRange("G:J").Interior.Color = vbWhiteRange("G:J").Font.name = "Verdana"Range("H:J").NumberFormat = "0.00%"For i = 1 To nb_basRange(Cells(ft, 7), Cells(ft, 10)).Interior.ColorIndex = 13Range(Cells(ft, 7), Cells(ft, 10)).Font.Color = vbWhiteRange(Cells(ft, 7), Cells(ft, 10)).Font.Bold = TrueCells(ft, 7) = "Basket #" & iWith Range(Cells(ft, 7), Cells(ft, 10)).Borders.LineStyle = xlContinuous.Weight = xlMedium.ColorIndex = xlAutomaticEnd WithCells(ft, 8) = "Yield"Cells(ft, 9) = "Stock Imp. Vol"Cells(ft, 10) = "Basket Imp. Vol"Range(Cells(ft + 1, 10), Cells(ft + bsk_size, 10)).Mergeft = ft + bsk_size + 2Range("G:J").HorizontalAlignment = xlCenterRange("G:J").VerticalAlignment = xlCenterNext iEnd Sub
